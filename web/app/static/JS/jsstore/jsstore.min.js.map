{"version":3,"sources":["webpack://JsStore/webpack/bootstrap","webpack://JsStore/./src/main/log_helper.ts","webpack://JsStore/./src/common/enums.ts","webpack://JsStore/./src/common/utils/promise.ts","webpack://JsStore/./src/main/connection_helper.ts","webpack://JsStore/./src/main/connection.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ERROR_TYPE","WORKER_STATUS","DATA_TYPE","API","EVENT","QUERY_OPTION","IDB_MODE","OCCURENCE","CONNECTION_STATUS","type","info","this","_info","message","getMsg","throw","log","msg","status","console","logError","error","logWarning","warn","worker","isConOpened_","isDbIdle_","requestQueue_","isCodeExecuting_","inactivityTimer_","eventQueue","middlewares","whiteListApi_","InitDb","OpenDb","Get","Set","ChangeLogStatus","Terminate","DropDb","isRuningInWorker","logger","LogHelper","worker_","onmessage","onMessageFromWorker_","initQueryManager_","$worker","window","workerRef","jsstoreWorker","queryManager","QueryManager","processFinishedQuery_","data","finishedRequest","shift","onError","terminate","CloseDb","length","openDb_","callEvent","RequestQueueEmpty","onSuccess","result","executeQry_","prcoessExecutionOfQry_","query","database","version","err","executeMiddleware_","input","Promise","res","index","lastIndex","callNextMiddleware","pushApi","request","resolve","reject","then","RequestQueueFilled","indexOf","clearTimeout","catch","splice","push","requestQueueLength","sendRequestToWorker_","allowedQueryIndex","findIndex","item","setTimeout","requestForWorker","postMessage","run","event","args","filter","ev","forEach","callback","Connection","initDb","dataBase","dropDb","select","Select","count","Count","insert","Insert","update","Update","remove","Remove","clear","tableName","Clear","openDb","dbName","getDbList","indexedDB","databases","set","transaction","Transaction","on","eventCallBack","off","q","indexes","union","Union","intersect","Intersect","addPlugin","plugin","params","setup","addMiddleware","middleware","importScripts","ImportScripts","urls"],"mappings":"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","file":"jsstore.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","\nimport { ERROR_TYPE, IError } from \"../common/index\";\n\nexport class LogHelper implements IError {\n    type: ERROR_TYPE;\n    message: string;\n    private _info: any;\n    status: boolean;\n\n    constructor(type: ERROR_TYPE, info?) {\n        this.type = type;\n        this._info = info;\n        this.message = this.getMsg();\n    }\n\n    throw() {\n        throw this.get();\n    }\n\n    log(msg) {\n        if (this.status) {\n            console.log(msg);\n        }\n    }\n\n    logError() {\n        console.error(this.get());\n    }\n\n    logWarning() {\n        console.warn(this.get());\n    }\n\n    get() {\n        return {\n            message: this.message,\n            type: this.type\n        } as IError;\n    }\n\n    private getMsg() {\n        let errMsg: string;\n        switch (this.type) {\n            default:\n                errMsg = this.message;\n                break;\n        }\n        return errMsg;\n    }\n}","export enum ERROR_TYPE {\n    UndefinedColumn = \"undefined_column\",\n    UndefinedValue = \"undefined_value\",\n    UndefinedColumnName = \"undefined_column_name\",\n    UndefinedDbName = \"undefined_database_name\",\n    UndefinedColumnValue = \"undefined_column_value\",\n    NotArray = \"not_array\",\n    NoValueSupplied = \"no_value_supplied\",\n    ColumnNotExist = \"column_not_exist\",\n    EnableSearchOff = \"enable_search_off\",\n    InvalidOp = \"invalid_operator\",\n    NullValue = \"null_value\",\n    WrongDataType = \"wrong_data_type\",\n    TableNotExist = \"table_not_exist\",\n    DbNotExist = \"db_not_exist\",\n    ConnectionAborted = \"connection_aborted\",\n    ConnectionClosed = \"connection_closed\",\n    NotObject = \"not_object\",\n    InvalidConfig = \"invalid_config\",\n    DbBlocked = \"Db_blocked\",\n    IndexedDbNotSupported = \"indexeddb_not_supported\",\n    NullValueInWhere = \"null_value_in_where\",\n    InvalidJoinQuery = 'invalid_join_query',\n    InvalidOrderQuery = 'invalid_order_query',\n    InvalidQuery = 'invalid_query',\n    InvalidGroupQuery = 'invalid_group_query',\n    ImportScriptsFailed = 'import_scripts_failed',\n    MethodNotExist = 'method_not_exist',\n    Unknown = \"unknown\"\n}\n\nexport enum WORKER_STATUS {\n    Registered = \"registerd\",\n    Failed = \"failed\",\n    NotStarted = \"not_started\"\n}\n\nexport enum DATA_TYPE {\n    String = \"string\",\n    Object = \"object\",\n    Array = \"array\",\n    Number = \"number\",\n    Boolean = \"boolean\",\n    Null = \"null\",\n    DateTime = \"date_time\"\n}\n\nexport enum API {\n    InitDb = \"init_db\",\n    Get = \"get\",\n    Set = \"set\",\n    Select = \"select\",\n    Insert = \"insert\",\n    Update = \"update\",\n    Remove = \"remove\",\n    OpenDb = \"open_db\",\n    Clear = \"clear\",\n    DropDb = \"drop_db\",\n    Count = \"count\",\n    ChangeLogStatus = \"change_log_status\",\n    Terminate = \"terminate\",\n    Transaction = \"transaction\",\n    CloseDb = \"close_db\",\n    Union = \"union\",\n    Intersect = \"intersect\",\n    ImportScripts = \"import_scripts\",\n}\n\nexport enum EVENT {\n    RequestQueueEmpty = \"requestQueueEmpty\",\n    RequestQueueFilled = \"requestQueueFilled\"\n}\n\nexport enum QUERY_OPTION {\n    Where = \"where\",\n    Like = 'like',\n    Regex = 'regex',\n    In = 'in',\n    Equal = \"=\",\n    Between = '-',\n    GreaterThan = '>',\n    LessThan = '<',\n    GreaterThanEqualTo = \">=\",\n    LessThanEqualTo = \"<=\",\n    NotEqualTo = \"!=\",\n    Aggregate = \"aggregate\",\n    Max = \"max\",\n    Min = \"min\",\n    Avg = \"avg\",\n    Count = \"count\",\n    Sum = \"sum\",\n    Or = \"or\",\n    Skip = \"skip\",\n    Limit = \"limit\",\n    And = \"and\",\n    IgnoreCase = \"ignoreCase\",\n    Then = \"then\"\n}\n\nexport enum IDB_MODE {\n    ReadOnly = \"readonly\",\n    ReadWrite = \"readwrite\"\n}\n\nexport enum OCCURENCE {\n    First = 'f',\n    Last = 'l',\n    Any = 'a'\n}\n\nexport enum CONNECTION_STATUS {\n    Connected = \"connected\",\n    Closed = \"closed\",\n    NotStarted = \"not_started\",\n    UnableToStart = \"unable_to_start\",\n    ClosedByJsStore = \"closed_by_jsstore\"\n}","export const promise = <T>(cb: (res, rej?) => any) => {\n    return new Promise<T>(cb);\n}","import { LogHelper } from \"./log_helper\";\nimport {\n  WebWorkerRequest, EventQueue, API, WebWorkerResult,\n  EVENT, promise, IDataBase, IDbInfo\n} from \"../common\";\n\ndeclare var JsStoreWorker;\nexport class ConnectionHelper {\n  protected database: IDataBase;\n  private worker_: Worker;\n  private isConOpened_ = false;\n  private isDbIdle_ = true;\n  private requestQueue_: WebWorkerRequest[] = [];\n  private isCodeExecuting_ = false;\n\n  private inactivityTimer_ = -1000;\n\n  protected eventQueue: EventQueue[] = [];\n\n  protected middlewares = [];\n\n  // these apis have special permissions. These apis dont wait for database open.\n  private whiteListApi_ = [\n    API.InitDb,\n    API.OpenDb,\n    API.Get,\n    API.Set,\n    API.ChangeLogStatus,\n    API.Terminate,\n    API.DropDb\n  ];\n\n  private queryManager;\n\n  isRuningInWorker = true;\n\n  protected logger = new LogHelper(null);\n\n  private $worker;\n\n  private get jsstoreWorker() {\n    return this.$worker || window['JsStoreWorker'];\n  }\n\n  constructor(worker?: Worker) {\n    if (worker) {\n      this.worker_ = worker;\n      this.worker_.onmessage = this.onMessageFromWorker_.bind(this);\n    } else {\n      this.isRuningInWorker = false;\n      this.initQueryManager_();\n    }\n  }\n\n  private initQueryManager_() {\n    const workerRef = this.jsstoreWorker;\n    if (workerRef) {\n      this.queryManager = new workerRef.QueryManager(this.processFinishedQuery_.bind(this));\n    }\n  }\n\n  private onMessageFromWorker_(msg) {\n    this.processFinishedQuery_(msg.data);\n  }\n\n  private processFinishedQuery_(message: WebWorkerResult) {\n\n    const finishedRequest: WebWorkerRequest = this.requestQueue_.shift();\n    if (finishedRequest) {\n      this.logger.log(`request ${finishedRequest.name} finished`);\n      if (message.error) {\n        finishedRequest.onError(message.error);\n      } else {\n        switch (finishedRequest.name) {\n          case API.OpenDb:\n          case API.InitDb:\n            this.isConOpened_ = true; break;\n          case API.Terminate:\n            this.isConOpened_ = false;\n            if (this.isRuningInWorker === true) {\n              this.worker_.terminate();\n            }\n          case API.DropDb:\n            this.isConOpened_ = false;\n            this.requestQueue_ = [];\n            this.isDbIdle_ = true;\n            break;\n          case API.CloseDb:\n            if (this.requestQueue_.length > 0) {\n              this.openDb_();\n            }\n            else {\n              this.isDbIdle_ = true;\n              this.callEvent(EVENT.RequestQueueEmpty, []);\n            }\n            break;\n        }\n        finishedRequest.onSuccess(message.result);\n      }\n      this.isCodeExecuting_ = false;\n      this.executeQry_();\n    }\n  }\n\n  private openDb_() {\n    this.prcoessExecutionOfQry_({\n      name: API.OpenDb,\n      query: {\n        name: this.database.name,\n        version: this.database.version\n      } as IDbInfo,\n      onSuccess: function () {\n\n      },\n      onError: function (err) {\n        console.error(err);\n      }\n    }, 0);\n  }\n\n  private executeMiddleware_(input: WebWorkerRequest) {\n    return promise<void>((res) => {\n      let index = 0;\n      const lastIndex = this.middlewares.length - 1;\n      const callNextMiddleware = () => {\n        if (index <= lastIndex) {\n          this.middlewares[index++](input, callNextMiddleware);\n        }\n        else {\n          res();\n        }\n      };\n      callNextMiddleware();\n    });\n  }\n\n  protected pushApi<T>(request: WebWorkerRequest): Promise<T> {\n    return new Promise((resolve, reject) => {\n      this.executeMiddleware_(request).then(() => {\n        request.onSuccess = resolve;\n        request.onError = reject;\n        if (this.requestQueue_.length === 0) {\n          this.callEvent(EVENT.RequestQueueFilled, []);\n          const isConnectionApi = [API.CloseDb, API.DropDb, API.OpenDb, API.Terminate].indexOf(request.name) >= 0;\n          if (!isConnectionApi && this.isDbIdle_ && this.isConOpened_) {\n            this.openDb_();\n          }\n          else {\n            clearTimeout(this.inactivityTimer_);\n          }\n        }\n        this.prcoessExecutionOfQry_(request);\n      }).catch(reject);\n    });\n  }\n\n  private prcoessExecutionOfQry_(request: WebWorkerRequest, index?: number) {\n    this.isDbIdle_ = false;\n    if (index != null) {\n      this.requestQueue_.splice(index, 0, request);\n    }\n    else {\n      this.requestQueue_.push(request);\n    }\n    this.logger.log(\"request pushed: \" + request.name);\n    this.executeQry_();\n  }\n\n  private executeQry_() {\n    const requestQueueLength = this.requestQueue_.length;\n    if (!this.isCodeExecuting_ && requestQueueLength > 0) {\n      if (this.isConOpened_ === true) {\n        this.sendRequestToWorker_(this.requestQueue_[0]);\n        return;\n      }\n\n      const allowedQueryIndex = this.requestQueue_.findIndex(\n        item => this.whiteListApi_.indexOf(item.name) >= 0\n      );\n\n      // shift allowed query to zeroth index\n      if (allowedQueryIndex >= 0) {\n        this.requestQueue_.splice(\n          0,\n          0,\n          this.requestQueue_.splice(allowedQueryIndex, 1)[0]\n        );\n        this.sendRequestToWorker_(this.requestQueue_[0]);\n      }\n    }\n    else if (requestQueueLength === 0 && this.isDbIdle_ === false && this.isConOpened_) {\n      this.inactivityTimer_ = setTimeout(() => {\n        this.prcoessExecutionOfQry_({\n          name: API.CloseDb,\n          onSuccess: function () {\n\n          },\n          onError: function (err) {\n            console.error(err);\n          }\n        });\n      }, 100) as any;\n    }\n  }\n\n  private sendRequestToWorker_(request: WebWorkerRequest) {\n    this.isCodeExecuting_ = true;\n    this.logger.log(\"request executing: \" + request.name);\n    const requestForWorker = {\n      name: request.name,\n      query: request.query\n    } as WebWorkerRequest;\n    if (this.isRuningInWorker === true) {\n      this.worker_.postMessage(requestForWorker);\n    }\n    else {\n      this.queryManager.run(requestForWorker);\n    }\n  }\n\n  private callEvent(event: EVENT, args: any[]) {\n    const events = this.eventQueue.filter(function (ev) {\n      if (ev.event === event) {\n        return ev;\n      }\n    });\n    events.forEach(function (ev) {\n      ev.callback(...args);\n    });\n  }\n}\n","import { ConnectionHelper } from \"./connection_helper\";\nimport {\n    SelectQuery, CountQuery, InsertQuery, SetQuery,\n    UpdateQuery, RemoveQuery, TranscationQuery,\n    API, IDataBase, EVENT, IPlugin, IntersectQuery, IDbInfo\n} from \"../common\";\n\nexport class Connection extends ConnectionHelper {\n\n    constructor(worker?: Worker) {\n        super(worker);\n    }\n\n    /**\n     * creates DataBase\n     *\n     * @param {IDataBase} dataBase\n     * @returns\n     * @memberof Connection\n     */\n    initDb(dataBase: IDataBase) {\n        this.database = dataBase;\n        return this.pushApi<boolean>({\n            name: API.InitDb,\n            query: dataBase\n        });\n    }\n\n    /**\n     * drop dataBase\n     *\n     * @returns\n     * @memberof Connection\n     */\n    dropDb() {\n        return this.pushApi<void>({\n            name: API.DropDb\n        });\n    }\n\n    /**\n     * select data from table\n     *\n     * @template T\n     * @param {SelectQuery} query\n     * @returns\n     * @memberof Connection\n     */\n    select<T>(query: SelectQuery) {\n        return this.pushApi<T[]>({\n            name: API.Select,\n            query: query\n        });\n    }\n\n    /**\n     * get no of record from table\n     *\n     * @param {CountQuery} query\n     * @returns\n     * @memberof Connection\n     */\n    count(query: CountQuery) {\n        return this.pushApi<number>({\n            name: API.Count,\n            query: query\n        });\n    }\n\n    /**\n     * insert data into table\n     *\n     * @template T\n     * @param {InsertQuery} query\n     * @returns\n     * @memberof Connection\n     */\n    insert<T>(query: InsertQuery) {\n        return this.pushApi<number | T[]>({\n            name: API.Insert,\n            query: query\n        });\n    }\n\n    /**\n     * update data into table\n     *\n     * @param {UpdateQuery} query\n     * @returns\n     * @memberof Connection\n     */\n    update(query: UpdateQuery) {\n        return this.pushApi<number>({\n            name: API.Update,\n            query: query\n        });\n    }\n\n    /**\n     * remove data from table\n     *\n     * @param {RemoveQuery} query\n     * @returns\n     * @memberof Connection\n     */\n    remove(query: RemoveQuery) {\n        return this.pushApi<number>({\n            name: API.Remove,\n            query: query\n        });\n    }\n\n    /**\n     * delete all data from table\n     *\n     * @param {string} tableName\n     * @returns\n     * @memberof Connection\n     */\n    clear(tableName: string) {\n        return this.pushApi<void>({\n            name: API.Clear,\n            query: tableName\n        });\n    }\n\n    /**\n     * set log status\n     *\n     * @param {boolean} status\n     * @memberof Connection\n     */\n    set logStatus(status: boolean) {\n        this.logger.status = status;\n        this.pushApi({\n            name: API.ChangeLogStatus,\n            query: status\n        });\n    }\n\n    /**\n     * open database\n     *\n     * @param {string} dbName\n     * @returns\n     * @memberof Connection\n     */\n    openDb(dbName: string, version?) {\n        return this.pushApi<IDataBase>({\n            name: API.OpenDb,\n            query: {\n                version: version,\n                name: dbName\n            } as IDbInfo\n        }).then((dataBase) => {\n            this.database = dataBase;\n            return dataBase;\n        });\n    }\n\n    /**\n     * returns list of database created\n     *\n     * @returns\n     * @memberof Connection\n     */\n    getDbList(): Promise<[IDbInfo]> {\n        console.warn(\"Api getDbList is recommended to use for debugging only. Do not use in code.\");\n        return (indexedDB as any).databases();\n    }\n\n    /**\n     * get the value from keystore table\n     *\n     * @template T\n     * @param {string} key\n     * @returns\n     * @memberof Connection\n     */\n    get<T>(key: string) {\n        return this.pushApi<T>({\n            name: API.Get,\n            query: key\n        });\n    }\n\n    /**\n     * set the value in keystore table \n     *\n     * @param {string} key\n     * @param {*} value\n     * @returns\n     * @memberof Connection\n     */\n    set(key: string, value: any) {\n        return this.pushApi<void>({\n            name: API.Set,\n            query: {\n                key: key, value: value\n            } as SetQuery\n        });\n    }\n\n    /**\n     * terminate the connection\n     *\n     * @returns\n     * @memberof Connection\n     */\n    terminate() {\n        return this.pushApi<void>({\n            name: API.Terminate\n        });\n    }\n\n    /**\n     * execute transaction\n     *\n     * @template T\n     * @param {TranscationQuery} query\n     * @returns\n     * @memberof Connection\n     */\n    transaction<T>(query: TranscationQuery) {\n        return this.pushApi<T>({\n            name: API.Transaction,\n            query: query\n        });\n    }\n\n    on(event: EVENT, eventCallBack: Function) {\n        this.eventQueue.push({\n            event: event,\n            callback: eventCallBack\n        });\n    }\n\n    off(event: EVENT, eventCallBack: Function) {\n        if (eventCallBack) {\n            const index = this.eventQueue.findIndex(q => q.event === event);\n            this.eventQueue.splice(index, 0);\n            return;\n        }\n        const indexes = [];\n        this.eventQueue.forEach((ev, i) => {\n            if (ev.event === event) {\n                indexes.push(i);\n            }\n        });\n        indexes.forEach(i => {\n            this.eventQueue.splice(i, 1);\n        });\n    }\n\n    union<T>(query: SelectQuery[]) {\n        return this.pushApi<T>({\n            name: API.Union,\n            query\n        });\n    }\n\n    intersect<T>(query: IntersectQuery) {\n        return this.pushApi<T>({\n            name: API.Intersect,\n            query\n        });\n    }\n\n    addPlugin(plugin: IPlugin, params?) {\n        plugin.setup(this, params);\n    }\n\n    addMiddleware(middleware) {\n        this.middlewares.push(middleware);\n    }\n\n    /**\n     * import scripts in jsstore web worker. \n     * Scripts method can be called using transaction api.\n     * \n     * @param {...string[]} urls\n     * @returns\n     * @memberof Connection\n     */\n    importScripts(...urls: string[]) {\n        return this.pushApi<void>({\n            name: API.ImportScripts,\n            query: urls\n        });\n    }\n}"],"sourceRoot":""}