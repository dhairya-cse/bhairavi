{"version":3,"sources":["webpack://JsStoreWorker/webpack/bootstrap","webpack://JsStoreWorker/./src/common/enums.ts","webpack://JsStoreWorker/./src/common/utils/promise.ts","webpack://JsStoreWorker/./src/worker/enums/table_state.ts","webpack://JsStoreWorker/./src/worker/model/table_meta.ts","webpack://JsStoreWorker/./src/worker/meta_helper.ts","webpack://JsStoreWorker/./src/worker/model/db_meta.ts","webpack://JsStoreWorker/./src/worker/utils/log_helper.ts","webpack://JsStoreWorker/./src/worker/idbutil/index.ts","webpack://JsStoreWorker/./src/common/utils/promise_all.ts","webpack://JsStoreWorker/./src/worker/utils/promise_reject.ts","webpack://JsStoreWorker/./src/worker/utils/get_error.ts","webpack://JsStoreWorker/./src/worker/executors/base.ts","webpack://JsStoreWorker/./src/worker/utils/get_error_from_exception.ts","webpack://JsStoreWorker/./src/worker/utils/get_data_type.ts","webpack://JsStoreWorker/./src/worker/utils/is_null.ts","webpack://JsStoreWorker/./src/worker/executors/insert/values_checker.ts","webpack://JsStoreWorker/./src/worker/executors/update/schema_checker.ts","webpack://JsStoreWorker/./src/worker/executors/query_helper.ts","webpack://JsStoreWorker/./src/worker/executors/insert/index.ts","webpack://JsStoreWorker/./src/worker/constants/index.ts","webpack://JsStoreWorker/./src/worker/utils/set_cross_browser_idb.ts","webpack://JsStoreWorker/./src/worker/utils/get_keys.ts","webpack://JsStoreWorker/./src/worker/utils/is_array.ts","webpack://JsStoreWorker/./src/worker/utils/get_length.ts","webpack://JsStoreWorker/./src/worker/utils/get_object_first_key.ts","webpack://JsStoreWorker/./src/worker/executors/select/then_evaluator.ts","webpack://JsStoreWorker/./src/worker/executors/select/not_where.ts","webpack://JsStoreWorker/./src/worker/utils/remove_space.ts","webpack://JsStoreWorker/./src/worker/executors/select/order_by.ts","webpack://JsStoreWorker/./src/worker/executors/select/where.ts","webpack://JsStoreWorker/./src/worker/utils/get_regex_from_like.ts","webpack://JsStoreWorker/./src/worker/utils/clone.ts","webpack://JsStoreWorker/./src/worker/utils/compare.ts","webpack://JsStoreWorker/./src/worker/executors/where_checker.ts","webpack://JsStoreWorker/./src/worker/executors/base_fetch.ts","webpack://JsStoreWorker/./src/worker/executors/select/in.ts","webpack://JsStoreWorker/./src/worker/executors/select/regex.ts","webpack://JsStoreWorker/./src/worker/executors/select/join.ts","webpack://JsStoreWorker/./src/worker/executors/select/index.ts","webpack://JsStoreWorker/./src/worker/utils/is_object.ts","webpack://JsStoreWorker/./src/worker/executors/select/base_select.ts","webpack://JsStoreWorker/./src/worker/executors/select/group_by.ts","webpack://JsStoreWorker/./src/worker/executors/count/not_where.ts","webpack://JsStoreWorker/./src/worker/executors/count/index.ts","webpack://JsStoreWorker/./src/worker/executors/count/where.ts","webpack://JsStoreWorker/./src/worker/executors/count/regex.ts","webpack://JsStoreWorker/./src/worker/executors/count/in.ts","webpack://JsStoreWorker/./src/worker/executors/update/update_value.ts","webpack://JsStoreWorker/./src/worker/executors/update/index.ts","webpack://JsStoreWorker/./src/worker/executors/update/not_where.ts","webpack://JsStoreWorker/./src/worker/executors/update/where.ts","webpack://JsStoreWorker/./src/worker/executors/update/regex.ts","webpack://JsStoreWorker/./src/worker/executors/update/in.ts","webpack://JsStoreWorker/./src/worker/intersect/index.ts","webpack://JsStoreWorker/./src/worker/executors/drop_db.ts","webpack://JsStoreWorker/./src/worker/union/index.ts","webpack://JsStoreWorker/./src/worker/executors/remove/index.ts","webpack://JsStoreWorker/./src/worker/executors/remove/in.ts","webpack://JsStoreWorker/./src/worker/executors/remove/not_where.ts","webpack://JsStoreWorker/./src/worker/executors/remove/where.ts","webpack://JsStoreWorker/./src/worker/executors/remove/regex.ts","webpack://JsStoreWorker/./src/worker/executors/clear/index.ts","webpack://JsStoreWorker/./src/worker/executors/transaction/index.ts","webpack://JsStoreWorker/./src/worker/query_manager.ts","webpack://JsStoreWorker/./src/worker/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ERROR_TYPE","WORKER_STATUS","DATA_TYPE","API","EVENT","QUERY_OPTION","IDB_MODE","OCCURENCE","CONNECTION_STATUS","TABLE_STATE","promise","cb","Promise","table","dbVersion","autoIncColumnValue","columns","columnName","column","autoIncrement","this","primaryKey","enableSearch","push","version","setState_","state","Create","autoIncrementKey","tableName","set","util","tx","createTransaction","MetaHelper","store","objectStore","res","rej","req","put","onsuccess","onerror","keyRange","result","remove","delete","dbSchema","db","tables","map","type","info","info_","message","getMsg_","log","msg","status","console","throw","logError","error","errMsg","NotArray","UndefinedColumn","UndefinedValue","UndefinedColumnName","UndefinedDbName","UndefinedColumnValue","NoValueSupplied","InvalidOp","ColumnNotExist","EnableSearchOff","NullValue","WrongDataType","TableNotExist","DbNotExist","NotObject","DbBlocked","NullValueInWhere","MethodNotExist","IndexedDbNotSupported","InvalidJoinQuery","InvalidGroupQuery","InvalidOrderQuery","ImportScriptsFailed","Unknown","logger","emptyTx","oncomplete","onabort","createTransactionIfNotExist","ReadWrite","con","transaction","op","Between","IDBKeyRange","bound","low","high","GreaterThan","lowerBound","GreaterThanEqualTo","LessThan","upperBound","LessThanEqualTo","only","abortTransaction","abort","close","setTimeout","initDb","isDbCreated","dbOpenRequest","indexedDB","open","onversionchange","e","target","onupgradeneeded","upgradeConnection","createStates","Delete","forEach","indexOf","option","keyPath","objectStoreNames","contains","deleteObjectStore","createObjectStore","options","unique","multiEntry","createIndex","promiseAll","promises","all","promiseReject","reject","getError","rowAffected","isTxQuery","results","find","q","getColumnInfo","onException","ex","InvalidQuery","getErrorFromException","getDataType","Null","Array","isArray","Date","DateTime","isNull","length","isNaN","autoIncValues","autoIncrementValue","checkAndModifyValues","query","err","values","ignoreIndexes","every","item","index","checkAndModifyValue","ignore","splice","checkAndModifyColumnValue_","checkNotNullAndDataType_","notNull","ColumnName","dataType","columnValue","Number","undefined","default","validation","details","check","setValue","tblName","checkByColumn_","checkFurther","allowedOp","prop","validate","api","Select","Remove","Count","checkSelect","Insert","checkInsertQuery","Update","checkUpdate","getTable_","isInsertQryValid","into","in","where","checkForNullInWhere_","addGreatAndLessToNotOp_","from","whereQuery","containsNot","qry","keys","findIndex","NotEqualTo","addToSingleQry","Or","queryKeys","qryKeys","validResult","skipDataCheck","valuesAffected_","execute","insertData_","then","_","return","catch","onInsertData","addMethod","idbMethod","upsert","addResult","IS_WORKER","self","alert","ServiceWorkerGlobalScope","IS_IDB_SUPPORTED","mozIndexedDB","webkitIndexedDB","msIndexedDB","IDBTransaction","webkitIDBTransaction","msIDBTransaction","webkitIDBKeyRange","msIDBKeyRange","setCrossBrowserIndexedDb","getKeys","getLength","getObjectFirstKey","setCaseAndValue","caseQuery","caseQuery_","setCaseAndColumn","setColumn","columnName_","caseColumnQuery_","length_","evaluate","checkCase_","lastThen","cond","queryOption","Equal","executeSkipAndLimit","onFinished","cursor","recordSkipped","limitRecord","pushResult","continue","advance","skipRecord","executeSkip","executeSimple","executeLimit","removeSpace","replace","getOrderColumnInfo","orderColumn","join","splittedByDot","split","valueFromFirstColumn","isOrder","compareStringInDesc_","a","b","localeCompare","compareStringinAsc_","compareDefaultInDesc_","String","compareDefaultinAsc_","compareNumberInDesc_","compareNumberinAsc_","compareDateInDesc_","getTime","compareDateInAsc_","getValInDesc_","value1","value2","thenEvaluator","column1","column2","getValInAsc_","getValueComparer_","order","orderBy_","getOrderType_","by","sort","columnInfo","case","toLowerCase","executeSkipAndLimitForWhere_","onFinish","shouldAddValue","executeSkipForWhere_","executeLimitForWhere_","executeSimpleForWhere_","getRegexFromLikeExpression","likeExpression","filterValue","occurence","filterValues","Any","Last","First","RegExp","clone","obj","copy","compare","compareValue","symbol","type1","checkFlag","props","last","pop","reduce","prev","curr","rowValue","whereColumnValue","In","checkIn","Like","checkLike_","Regex","checkRegex","checkComparisionOp_","test","shouldEvaluateLimitAtEnd","shouldEvaluateSkipAtEnd","goToWhereLogic","firstColumn","indexNames","whereCheckerInstance","executeWhereLogic","regexVal","executeRegexLogic","executeInLogic","Aggregate","executeSkipAndLimitForIn_","skipOrPush","executeSkipForIn_","executeSimpleForIn_","executeSkipAndLimitForRegex_","executeSkipForRegex_","executeLimitForRegex_","executeSimpleForRegex_","select","joinQueryStack_","currentQueryStackIndex_","tablesFetched","getTable","executeSelect","tablesToFetch","jointblInfo","getJoinTableInfo_","on","with","table1","table2","checkJoinQuery_","joinTableInfo","flatten","startExecutingJoinLogic_","onJoinQueryFinished_","as","data","setLimitAndSkipEvaluationAtEnd_","processOrderBy","processGroupDistinctAggr","joinQuery","jointables","joinType","secondtableData","valueMatchedFromSecondTable","callBack","columnDefaultValue","table1Index","table2Index","col","valueFromFirstTable","valueFromSecondTable","performInnerJoin","joinOn","splittedjoinOn","splittedjoinOnbydotFirst","splittedjoinOnbydotSecond","tableSchemaOf1stTable","tableSchemaOf2ndTable","columnFound","sorted","isSubQuery","returnResult_","concat","skip","slice","limit","setPushResult","isArrayQry","idbSorting","groupBy","initTransaction_","processWhereArrayQry","processWhere_","executeWhereUndefinedLogic","executeJoinQuery","operation","pKey","isFirstWhere","output","onSuccess","And","andResults","keyValue","removeDuplicates","processFirstQry","shift","ReadOnly","or","processOrLogic_","onWhereEvaluated","isOr","orQuerySuccess_","orQueryFinish_","orInfo","orQuery","val","columnStore","cursorRequest","openCursor","orderType","dir","exp","datas","lookupObject","len","distinct","aggregate","executeAggregateGroupBy","processGroupBy","processAggregateQry","orderQueryType","prevOrderQueryBy","currentOrderQuery","currentorderQueryBy","orderColumnDetail","columnToAggregate","datasLength","getCount","getMax","getMin","Infinity","getSum","getAvg","aggregateColumn","aggregateValType","aggregateCalculator","grpQry","objKey","lookUpObj","aggregateQry","calculateAggregate","sumOfColumn","Max","Min","Sum","Avg","avg","sumForAvg","countForAvg","count","sum","isCountTypeString","isSumTypeString","avgColumn","groupByColumn","resultCount","queryHelper","getDataFromSelect","selectInstance","countRequest","updateValue","suppliedValue","storedValue","initTransaction","executeComplexLogic_","selectObject","ignoreCase","inQuery","whereQry","cursorUpdateRequest","update","cursorOpenRequest","intersectQry","getHashKey","hashMap","hashMapTemp","isQueryForSameTable","queries","queryLength","columnValKey","fetchData","selectResult","resultPusher","assign","dbName","dropDbRequest","deleteDatabase","onblocked","keyList","pkey","Where","processOrLogic","_orInfo","OrQuery","columnIndex","clearRequest","clear","currentTable","reqQueue","isQueryExecuting","isTxStarted_","startExecution_","onError","notExistingTable","notExistingTable_","methodName","method","txLogic","insert","pushReq_","setResult","getResult","abortTx_","start","startTx_","tableNames","processExecutionOfQry_","onReqFinished_","finisehdRequest","executeRequest_","request","requestObj","onReqFinished","promiseObj","resolve","invalidTable","fn","onQryFinished","postMessage","run","queryResult","OpenDb","openDb","InitDb","CloseDb","closeDb","Intersect","DropDb","dropDb","Terminate","terminate","Union","Clear","Transaction","Get","Set","ImportScripts","importScripts_","ChangeLogStatus","importScripts","dataBase","dbMeta","isCreated","savedDb","shouldReCreateDb","savedTable","providedTable","onmessage"],"mappings":";;;;;8BACE,IAAIA,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QA0Df,OArDAF,EAAoBQ,EAAIF,EAGxBN,EAAoBS,EAAIV,EAGxBC,EAAoBU,EAAI,SAASR,EAASS,EAAMC,GAC3CZ,EAAoBa,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEZ,EAAoBkB,EAAI,SAAShB,GACX,oBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDrB,EAAoBsB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQrB,EAAoBqB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA1B,EAAoBkB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOrB,EAAoBU,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRzB,EAAoB6B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBU,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRZ,EAAoBa,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG/B,EAAoBkC,EAAI,GAIjBlC,EAAoBA,EAAoBmC,EAAI,G,iCClFrD,IAAYC,EA+BAC,EAMAC,EAUAC,EAqBAC,EAKAC,EA0BAC,EAKAC,EAMAC,E,qDA9GZ,SAAYR,GACR,qCACA,mCACA,8CACA,4CACA,gDACA,uBACA,sCACA,oCACA,sCACA,+BACA,yBACA,kCACA,kCACA,4BACA,yCACA,uCACA,yBACA,iCACA,yBACA,kDACA,yCACA,wCACA,0CACA,+BACA,0CACA,8CACA,oCACA,oBA5BJ,CAAYA,MAAU,KA+BtB,SAAYC,GACR,yBACA,kBACA,2BAHJ,CAAYA,MAAa,KAMzB,SAAYC,GACR,kBACA,kBACA,gBACA,kBACA,oBACA,cACA,uBAPJ,CAAYA,MAAS,KAUrB,SAAYC,GACR,mBACA,YACA,YACA,kBACA,kBACA,kBACA,kBACA,mBACA,gBACA,mBACA,gBACA,sCACA,wBACA,4BACA,qBACA,gBACA,wBACA,iCAlBJ,CAAYA,MAAG,KAqBf,SAAYC,GACR,wCACA,0CAFJ,CAAYA,MAAK,KAKjB,SAAYC,GACR,gBACA,cACA,gBACA,UACA,YACA,cACA,kBACA,eACA,0BACA,uBACA,kBACA,wBACA,YACA,YACA,YACA,gBACA,YACA,UACA,cACA,gBACA,YACA,0BACA,cAvBJ,CAAYA,MAAY,KA0BxB,SAAYC,GACR,sBACA,wBAFJ,CAAYA,MAAQ,KAKpB,SAAYC,GACR,YACA,WACA,UAHJ,CAAYA,MAAS,KAMrB,SAAYC,GACR,wBACA,kBACA,2BACA,kCACA,sCALJ,CAAYA,MAAiB,KC9GtB,ICAKC,EDACC,EAAU,SAAIC,GACvB,OAAO,IAAIC,QAAWD,KCD1B,SAAYF,GACR,kBACA,kBAFJ,CAAYA,MAAW,KCKvB,I,EAAA,aAQI,WAAYI,EAAeC,GAF3B,KAAAC,mBAAqB,GAGjB,IAAMC,EAAU,GAChB,IAAK,IAAMC,KAAcJ,EAAMG,QAAS,CACpC,IAAME,EAAkBL,EAAMG,QAAQC,GACtCC,EAAO3C,KAAO0C,EACVC,EAAOC,gBACPC,KAAKL,mBAAmBE,GAAc,GAEtCC,EAAOG,aACPD,KAAKC,WAAaJ,GAEtBC,EAAOI,aAAsC,MAAvBJ,EAAOI,cAA8BJ,EAAOI,aAClEN,EAAQO,KAAKL,GAEjBE,KAAKJ,QAAUA,EACfI,KAAK7C,KAAOsC,EAAMtC,KAClB6C,KAAKI,QAAUX,EAAMW,SAAW,EAC5BV,EAAYM,KAAKI,UACjBJ,KAAKI,QAAUV,GAEnBM,KAAKK,YAMb,OAHY,YAAAA,UAAR,WACIL,KAAKM,MAAQjB,EAAYkB,QAEjC,EAlCA,GCFA,2BAuDA,OArDW,EAAAC,iBAAP,SAAwBC,EAAmBZ,GACvC,MAAO,WAAWY,EAAS,IAAIZ,EAAU,UAItC,EAAAa,IAAP,SAAWvC,EAAKN,EAAO8C,GACdA,EAAKC,IACND,EAAKE,kBAAkB,CAACC,EAAWL,YAEvC,IAAMM,EAAQJ,EAAKK,YAAYF,EAAWL,WAE1C,OAAOnB,GAAQ,SAAC2B,EAAKC,GACjB,IAAMC,EAAMJ,EAAMK,IAAI,CAClBjD,IAAG,EAAEN,MAAK,IAEdsD,EAAIE,UAAY,WACZJ,KAEJE,EAAIG,QAAUJ,MAGf,EAAAzD,IAAP,SAAWU,EAAKwC,GACPA,EAAKC,IACND,EAAKE,kBAAkB,CAACC,EAAWL,YAEvC,IAAMM,EAAQJ,EAAKK,YAAYF,EAAWL,WAE1C,OAAOnB,GAAQ,SAAC2B,EAAKC,GACjB,IAAMC,EAAMJ,EAAMtD,IACdkD,EAAKY,SAASpD,IAElBgD,EAAIE,UAAY,WACZ,IAAMG,EAASL,EAAIK,OACnBP,EAAIO,GAAUA,EAAO3D,QAEzBsD,EAAIG,QAAUJ,MAIf,EAAAO,OAAP,SAActD,EAAKwC,GACVA,EAAKC,IACND,EAAKE,kBAAkB,CAACC,EAAWL,YAEvC,IAAMM,EAAQJ,EAAKK,YAAYF,EAAWL,WAE1C,OAAOnB,GAAQ,SAAC2B,EAAKC,GACjB,IAAMC,EAAMJ,EAAMW,OACdf,EAAKY,SAASpD,IAElBgD,EAAIE,UAAYJ,EAChBE,EAAIG,QAAUJ,MAnDf,EAAAT,UAAY,eAIZ,EAAAkB,SAAW,mBAkDtB,EAvDA,GCCA,EAMI,SAAYC,GACR5B,KAAK7C,KAAOyE,EAAGzE,KACfyE,EAAGC,OAAO1B,KAAK,CACXhD,KAAM,EAAWsD,UACjBb,QAAS,CACLzB,IAAK,CACD8B,YAAY,GAEhBpC,MAAO,CACHqC,cAAc,MAI1BF,KAAK6B,OAASD,EAAGC,OAAOC,KAAI,SAAArC,GACxB,OAAO,IAAI,EAAUA,EAAOmC,EAAGxB,YAEnCJ,KAAKI,QAAUwB,EAAGxB,SAAW,GCxBrC,aAaI,WAAY2B,EAAkBC,GAC1BhC,KAAK+B,KAAOA,EACZ/B,KAAKiC,MAAQD,EACbhC,KAAKkC,QAAUlC,KAAKmC,UAsG5B,OA/GI,YAAAC,IAAA,SAAIC,GACIrC,KAAKsC,QACLC,QAAQH,IAAIC,IAUpB,YAAAG,MAAA,WACI,MAAMxC,KAAKvC,OAIf,YAAAgF,SAAA,WACIF,QAAQG,MAAM1C,KAAKvC,QAKvB,YAAAA,IAAA,WACI,MAAO,CACHyE,QAASlC,KAAKkC,QACdH,KAAM/B,KAAK+B,OAIX,YAAAI,QAAR,WACI,IAAIQ,EACJ,OAAQ3C,KAAK+B,MACT,KAAKnD,EAAWgE,SACZD,EAAS,iCACT,MACJ,KAAK/D,EAAWiE,gBACZF,EAAS,+BACT,MACJ,KAAK/D,EAAWkE,eACZH,EAAS,8BACT,MACJ,KAAK/D,EAAWmE,oBACZJ,EAAS,6BAA+B3C,KAAKiC,MAAiB,UAAI,IAClE,MACJ,KAAKrD,EAAWoE,gBACZL,EAAS,gCACT,MACJ,KAAK/D,EAAWqE,qBACZN,EAAS,4BACT,MACJ,KAAK/D,EAAWsE,gBACZP,EAAS,uBACT,MACJ,KAAK/D,EAAWuE,UACZR,EAAS,qBAAuB3C,KAAKiC,MAAU,GAAI,IACnD,MACJ,KAAKrD,EAAWwE,eACZT,EAAS3C,KAAKiC,MAAe,QACzB,WAAWjC,KAAKiC,MAAc,OAAC,kCAC/B,WAAWjC,KAAKiC,MAAc,OAAC,mBACnC,MACJ,KAAKrD,EAAWyE,gBACZV,EAAS,wCAA0C3C,KAAKiC,MAAc,OAAI,IAC1E,MACJ,KAAKrD,EAAW0E,UACZX,EAAS,yCAA2C3C,KAAKiC,MAAkB,WAAI,IAC/E,MACJ,KAAKrD,EAAW2E,cACZZ,EAAS,8BAAgC3C,KAAKiC,MAAc,OACxD,yBACJ,MACJ,KAAKrD,EAAW4E,cACZb,EAAS,UAAY3C,KAAKiC,MAAiB,UAAI,mBAC/C,MACJ,KAAKrD,EAAW6E,WACZd,EAAS,sBAAsB3C,KAAKiC,MAAc,OAAC,kBACnD,MACJ,KAAKrD,EAAW8E,UACZf,EAAS,+BACT,MACJ,KAAK/D,EAAWuE,UACZR,EAAS,mBAAqB3C,KAAKiC,MAAc,OAAI,KACrD,MACJ,KAAKrD,EAAW+E,UACZhB,EAAS,iDACT,MACJ,KAAK/D,EAAWgF,iBACZjB,EAAS,mDAAmD3C,KAAKiC,MAAc,OAAC,aAChF,MACJ,KAAKrD,EAAWiF,eACZlB,EAAS,UAAU3C,KAAKiC,MAAK,mBAC7B,MACJ,KAAKrD,EAAWkF,sBACZnB,EAAS,qCACT,MACJ,KAAK/D,EAAWmF,iBAChB,KAAKnF,EAAWoF,kBAChB,KAAKpF,EAAWqF,kBAChB,KAAKrF,EAAWsF,oBACZvB,EAAS3C,KAAKiC,MACd,MACJ,QACSjC,KAAK+B,OACN/B,KAAK+B,KAAOnD,EAAWuF,SAE3BxB,EAAS3C,KAAKkC,QAGtB,OAAOS,GAEf,EAtHA,GCGA,aASI,WAAYf,GAFZ,KAAAwC,OAAS,IAAI,EAAU,MAGnBpE,KAAK4B,GAAKA,EAsHlB,OAnHI,YAAAyC,QAAA,WACSrE,KAAKY,KACVZ,KAAKY,GAAG0D,WAAa,KACrBtE,KAAKY,GAAG2D,QAAU,KAClBvE,KAAKY,GAAGU,QAAU,KAClBtB,KAAKY,GAAK,OAGd,YAAA4D,4BAAA,SAA4B3C,EAAkB9D,GACrCiC,KAAKY,IACNZ,KAAKa,kBAAkBgB,EAAQ9D,IAIvC,YAAA8C,kBAAA,SAAkBgB,EAAkB9D,GAApC,WAEI,YAFgC,IAAAA,MAAOmB,EAASuF,WAChDzE,KAAKY,GAAKZ,KAAK0E,IAAIC,YAAY9C,EAAQ9D,GAChCuB,GAAQ,SAAC2B,EAAKC,GACjB,EAAKN,GAAG0D,WAAarD,EACrB,EAAKL,GAAG2D,QAAUtD,EAClB,EAAKL,GAAGU,QAAUJ,MAI1B,YAAAK,SAAA,SAAS1D,EAAO+G,GACZ,IAAIrD,EACJ,OAAQqD,GACJ,KAAK3F,EAAa4F,QAAStD,EAAWuD,YAAYC,MAAMlH,EAAMmH,IAAKnH,EAAMoH,MAAM,GAAO,GAAQ,MAC9F,KAAKhG,EAAaiG,YAAa3D,EAAWuD,YAAYK,WAAWtH,GAAO,GAAO,MAC/E,KAAKoB,EAAamG,mBAAoB7D,EAAWuD,YAAYK,WAAWtH,GAAQ,MAChF,KAAKoB,EAAaoG,SAAU9D,EAAWuD,YAAYQ,WAAWzH,GAAO,GAAO,MAC5E,KAAKoB,EAAasG,gBAAiBhE,EAAWuD,YAAYQ,WAAWzH,GAAQ,MAC7E,QAAS0D,EAAWuD,YAAYU,KAAK3H,GAEzC,OAAO0D,GAGX,YAAAP,YAAA,SAAY7D,GACR,OAAO6C,KAAKY,GAAGI,YAAY7D,IAG/B,YAAAsI,iBAAA,WACQzF,KAAKY,IACLZ,KAAKY,GAAG8E,SAIhB,YAAAC,MAAA,sBAKI,OAJI3F,KAAK0E,KACL1E,KAAK0E,IAAIiB,QAGNrG,GAAQ,SAAA2B,GACX,EAAKyD,IAAM,KACXkB,WAAW3E,EAAK,SAIxB,YAAA4E,OAAA,sBAEUjE,EAAK5B,KAAK4B,GACZkE,GAAc,EAqDlB,OAAOxG,GApDW,SAAC2B,EAAKC,GACpB,IAAM6E,EAAgBC,UAAUC,KAAKrE,EAAGzE,KAAMyE,EAAGxB,SAEjD2F,EAAc1E,UAAY,WACtB,EAAKqD,IAAMqB,EAAcvE,OACzB,EAAKkD,IAAIwB,gBAAkB,SAACC,GAExBA,EAAEC,OAAOT,SAGb1E,EAAI6E,IAGRC,EAAczE,QAAU,SAAC6E,GACrB5D,QAAQG,MAAM,QAASyD,GACvBjF,EAAIiF,IAGRJ,EAAcM,gBAAkB,SAAUF,GACtC,IAAMG,EAAkCH,EAAUC,OAAO5E,OACzDsE,GAAc,EACd,IAuBMS,EAAe,CAAClH,EAAYkB,OAAQlB,EAAYmH,QACtD5E,EAAGC,OAAO4E,SAAQ,SAAAhH,GACV8G,EAAaG,QAAQjH,EAAMa,QAAU,GAzBnB,SAACb,GACvB,IAAMkH,EAAmClH,EAAMQ,WAAa,CACxD2G,QAASnH,EAAMQ,YACf,CACIF,eAAe,GAInBuG,EAAkBO,iBAAiBC,SAASrH,EAAMtC,OAClDmJ,EAAkBS,kBAAkBtH,EAAMtC,MAG9C,IAAM4D,EAAQuF,EAAkBU,kBAAkBvH,EAAMtC,KAAMwJ,GAC9DlH,EAAMG,QAAQ6G,SAAQ,SAAA3G,GAClB,GAAIA,EAAOI,aAAc,CACrB,IAAML,EAAaC,EAAO3C,KACpB8J,EAAUnH,EAAOG,WAAa,CAAEiH,QAAQ,GAAS,CAAEA,OAAQpH,EAAOoH,QACxED,EAAoB,WAAInH,EAAOqH,WAC/B,IAAMP,EAA4B,MAAlB9G,EAAO8G,QAAkB/G,EAAaC,EAAO8G,QAC7D7F,EAAMqG,YAAYvH,EAAY+G,EAASK,OAO3CD,CAAkBvH,WAO1C,EAhIA,GCLa4H,EAAa,SAAIC,GAC1B,OAAO9H,QAAQ+H,IAAOD,ICDbE,EAAgB,SAAC3J,GAC1B,OAAO2B,QAAQiI,OAAO5J,ICCb6J,EAAW,SAACvB,GAErB,GADoBA,aAAa,EAG7B,OADAA,EAAE1D,WACM0D,EAAgB1I,MAGxB,IAAIiF,OAAK,EAYT,OAXIyD,EAAEhJ,MACFuF,EAAQ,IAAI,EAAUyD,EAAEhJ,OAClB+E,QAAUiE,EAAEjE,SAGlBQ,EAAQ,IAAI,EAAWyD,EAAUC,OAAO1D,MAAMvF,OACxC+E,QAAWiE,EAAUC,OAAO1D,MAAMR,QAKrCQ,EAAMjF,OChBrB,0BAKI,KAAAkK,YAAc,EACd,KAAAC,WAAY,EAIF,KAAAC,QAAiB,GA4B/B,OAvBI,YAAApI,MAAA,SAAMtC,GACF,IAAMsD,EAAYtD,GAAQ6C,KAAKS,UAC/B,OAAOT,KAAK4B,GAAGC,OAAOiG,MAAK,SAAAC,GAAK,OAAAA,EAAE5K,OAASsD,MAG/C,YAAAR,WAAA,SAAWQ,GACP,OAAOT,KAAKP,MAAMgB,GAAWR,YAIvB,YAAA+H,cAAV,SAAwBnI,EAAoBY,GACxC,OAAOT,KAAKP,MAAMgB,GAAWb,QAAQkI,MAAK,SAAAhI,GAAU,OAAAA,EAAO3C,OAAS0C,MAKxE,YAAAoI,YAAA,SAAYC,EAAkBnG,GAG1B,OAFAQ,QAAQG,MAAMwF,GACdlI,KAAKW,KAAK8E,mBACH+B,ECpCsB,SAACU,EAAInG,GAEtC,YAFsC,IAAAA,MAAOnD,EAAWuJ,cACxDD,EAAG/K,KAAO4E,EACH2F,EAASQ,GDmCRE,CAAsBF,EAAInG,KAGtC,EAtCA,GEHasG,EAAc,SAACxK,GACxB,GAAa,MAATA,EACA,OAAOiB,EAAUwJ,KAErB,IAAMvG,SAAclE,EACpB,OAAQkE,GACJ,IAAK,SACD,GAAIwG,MAAMC,QAAQ3K,GACd,OAAOiB,EAAUyJ,MAErB,GAAI1K,aAAiB4K,KACjB,OAAO3J,EAAU4J,SAG7B,OAAO3G,GChBE4G,EAAS,SAAC9K,GACnB,GAAa,MAATA,EACA,OAAO,EAEP,cAAeA,GACX,IAAK,SAAU,OAAwB,IAAjBA,EAAM+K,OAC5B,IAAK,SAAU,OAAOC,MAAMhL,GAGpC,OAAO,GCHX,aAKI,WAAY4B,EAAkBqJ,GAC1B9I,KAAKP,MAAQA,EACbO,KAAK+I,mBAAqBD,EA0ElC,OAvEI,YAAAE,qBAAA,SAAqBC,GAArB,IACQC,EADR,OAEIlJ,KAAKiJ,MAAQA,EACb,IAAME,EAASF,EAAME,OACfC,EAAgB,GAYtB,OAXAD,EAAOE,OAAM,SAACC,EAAMC,GAMhB,OALAL,EAAM,EAAKM,oBAAoBF,GAC3BL,EAAMQ,QAAUP,IAChBE,EAAcjJ,KAAKoJ,GACnBL,EAAM,OAEHA,KAEXE,EAAc3C,SAAQ,SAAA8C,GAClBJ,EAAOO,OAAOH,EAAO,MAElB,CAAEL,IAAG,EAAEC,OAAM,IAGhB,YAAAK,oBAAR,SAA4B3L,GAA5B,IACQ6E,EADR,OAMI,OAJA1C,KAAKP,MAAMG,QAAQyJ,OAAM,SAAAvJ,GAErB,QADA4C,EAAQ,EAAKiH,2BAA2B7J,EAAQjC,OAG7C6E,GAGH,YAAAkH,yBAAR,SAAiC9J,EAAiBjC,GAE9C,OAAIiC,EAAO+J,SAAWlB,EAAO9K,EAAMiC,EAAO3C,OAC/B6C,KAAK0H,SAAS9I,EAAW0E,UAAW,CAAEwG,WAAYhK,EAAO3C,OAG3D2C,EAAOiK,WAAapB,EAAO9K,EAAMiC,EAAO3C,QAC7CkL,EAAYxK,EAAMiC,EAAO3C,SAAW2C,EAAOiK,SACpC/J,KAAK0H,SAAS9I,EAAW2E,cAAe,CAAEzD,OAAQA,EAAO3C,YAF/D,GAMD,YAAAwM,2BAAR,SAAmC7J,EAAiBjC,GAChD,IAAMmM,EAAcnM,EAAMiC,EAAO3C,MAsBjC,GApBI2C,EAAOC,cAEH4I,EAAOqB,GACPnM,EAAMiC,EAAO3C,QAAU6C,KAAK+I,mBAAmBjJ,EAAO3C,MAGlDkL,EAAY2B,KAAiBlL,EAAUmL,QAGnCD,EAAchK,KAAK+I,mBAAmBjJ,EAAO3C,QAC7C6C,KAAK+I,mBAAmBjJ,EAAO3C,MAAQ6M,QAM3BE,IAAnBpK,EAAOqK,SAAyBxB,EAAOqB,KAC5CnM,EAAMiC,EAAO3C,MAAQ2C,EAAOqK,SAElBnK,KAAKiJ,MACTmB,WACN,OAAOpK,KAAK4J,yBAAyB9J,EAAQjC,IAI7C,YAAA6J,SAAR,SAAiBhF,EAAmB2H,GAChC,OAAO,IAAI,EAAU3H,EAAO2H,IAEpC,EAjFA,GCDA,aAEI,WAAY5K,GACRO,KAAKP,MAAQA,EAoDrB,OAjDI,YAAA6K,MAAA,SAAMC,EAAkBC,GAAxB,IACQpI,EADR,OAmBI,cAjBWmI,IAAazL,EAAUxB,OAC1B0C,KAAKP,MAELO,KAAKP,MAAMG,QAAQyJ,OAAM,SAACvJ,GAItB,OAHIA,EAAO3C,QAAQoN,IACfnI,EAAM,EAAKqI,eAAe3K,EAAQyK,EAASzK,EAAO3C,SAE/CiF,KAIXA,EAAM,IAAI,EAAUxD,EAAW4E,cAAe,CAAE/C,UAAW+J,IAI/DpI,EAAM,IAAI,EAAUxD,EAAW8E,WAE5BtB,GAKH,YAAAqI,eAAR,SAAuB3K,EAAiBjC,GAEpC,IAAuB,IAAnBiC,EAAO+J,SAAoBlB,EAAO9K,GAClC,OAAO,IAAI,EAAUe,EAAW0E,UAAW,CAAEwG,WAAYhK,EAAO3C,OAIpE,IAAM4E,EAAOsG,EAAYxK,GACnB6M,EAAwB,MAAT7M,EACrB,GAAIiC,EAAOiK,UAAYW,GACf3I,IAASjC,EAAOiK,UAAqB,WAAThI,EAC5B,OAAO,IAAI,EAAUnD,EAAW2E,cAAe,CAAEzD,OAAQA,EAAO3C,OAKxE,GAAIuN,GAAyB,WAAT3I,EAAmB,CACnC,IAAM4I,EAAY,CAAC,IAAK,IAAK,IAAK,IAAK,UACvC,IAAK,IAAMC,KAAQ/M,EACf,GAAI8M,EAAUjE,QAAQkE,GAAQ,GAAK9K,EAAOiK,UAAYhI,IAASjC,EAAOiK,SAClE,OAAO,IAAI,EAAUnL,EAAW2E,cAAe,CAAEzD,OAAQA,EAAO3C,SAKpF,EAvDA,GCCA,aAGI,WAAYwE,GACR3B,KAAK4B,GAAKD,EA4IlB,OAzII,YAAAkJ,SAAA,SAASC,EAAU7B,GACf,OAAQ6B,GACJ,KAAK/L,EAAIgM,OACT,KAAKhM,EAAIiM,OACT,KAAKjM,EAAIkM,MACL,OAAOjL,KAAKkL,YAAYjC,GAC5B,KAAKlK,EAAIoM,OACL,OAAOnL,KAAKoL,iBAAiBnC,GACjC,KAAKlK,EAAIsM,OACL,OAAOrL,KAAKsL,YAAYrC,KAI5B,YAAAsC,UAAR,SAAkB9K,GACd,OAAOT,KAAK4B,GAAGC,OAAOiG,MAAK,SAAAC,GAAK,OAAAA,EAAE5K,OAASsD,MAG/C,YAAA+K,iBAAA,SAAiBvC,GACb,IACI7G,EADE3C,EAAQO,KAAKuL,UAAUtC,EAAMwC,MAEnC,GAAIhM,EACA,OAAQ4I,EAAYY,EAAME,SACtB,KAAKrK,EAAUyJ,MACX,MACJ,KAAKzJ,EAAUwJ,KACXlG,EAAM,IAAI,EAAUxD,EAAWsE,iBAC/B,MACJ,QACId,EAAM,IAAI,EAAUxD,EAAWgE,eAIvCR,EAAM,IAAI,EAAUxD,EAAW4E,cAAe,CAAE/C,UAAWwI,EAAMwC,OAErE,MAAO,CACHhM,MAAK,EAAE2C,IAAG,IAIV,YAAAkJ,YAAR,SAAoBrC,GAChB,IAAIC,EAAM,IAAI,EAAclJ,KAAKuL,UAAUtC,EAAMyC,KAC7CpB,MAAMrB,EAAMvI,IAAKuI,EAAMyC,IAC3B,GAAIxC,EAAK,OAAOA,EAChB,GAAmB,MAAfD,EAAM0C,MAAe,CAErB,GADAzC,EAAMlJ,KAAK4L,qBAAqB3C,GACvB,OAAOC,EAChBlJ,KAAK6L,wBAAwB5C,KAI7B,YAAAiC,YAAR,SAAoBjC,GAEhB,IADcjJ,KAAKuL,UAAUtC,EAAM6C,MAE/B,OAAO,IAAI,EAAUlN,EAAW4E,cAC5B,CAAE/C,UAAWwI,EAAM6C,OAI3B,GAAI7C,EAAM0C,MAAO,CACb,IAAMzC,EAAMlJ,KAAK4L,qBAAqB3C,GACtC,GAAIC,EAAK,OAAOA,EAChBlJ,KAAK6L,wBAAwB5C,KAI7B,YAAA2C,qBAAR,SAA6B3C,GACzB,IAAK,IAAMpJ,KAAcoJ,EAAM0C,MAC3B,GAA+B,MAA3B1C,EAAM0C,MAAM9L,GACZ,OAAO,IAAI,EAAUjB,EAAWgF,iBAAkB,CAAE9D,OAAQD,KAKhE,YAAAgM,wBAAR,SAAgC5C,GAC5B,IAAM8C,EAAa9C,EAAM0C,MACnBK,EAAc,SAACC,EAAaC,GAC9B,OAAOA,EAAKC,WAAU,SAAAhO,GAAO,OAAqC,MAArC8N,EAAI9N,GAAKc,EAAamN,gBAAwB,GAEzEC,EAAiB,SAACJ,EAAKC,GACzB,IAAIrO,EAgBJ,OAfAqO,EAAKzF,SAAQ,SAACmE,GAE4B,OADtC/M,EAAQoO,EAAIrB,IACF3L,EAAamN,cACnBH,EAAIrB,GAAM3L,EAAaiG,aAAerH,EAAMoB,EAAamN,iBAC5BlC,IAAzB+B,EAAIhN,EAAaqN,KACjBL,EAAIhN,EAAaqN,IAAM,GACvBL,EAAIhN,EAAaqN,IAAI1B,GAAQ,SAEOV,IAA/B+B,EAAIhN,EAAaqN,IAAI1B,KAC1BqB,EAAIhN,EAAaqN,IAAI1B,GAAQ,IAEjCqB,EAAIhN,EAAaqN,IAAI1B,GAAM3L,EAAaoG,UAAYxH,EAAMoB,EAAamN,mBAChEH,EAAIrB,GAAM3L,EAAamN,gBAG/BH,GAEX,OAAQ5D,EAAY0D,IAChB,KAAKjN,EAAUxB,OACX,IAAMiP,EAAYjP,OAAO4O,KAAKH,GAC9B,GAAIC,EAAYD,EAAYQ,GACxB,GAAyB,IAArBA,EAAU3D,OACVK,EAAM0C,MAAQU,EAAeN,EAAYQ,OAExC,CACD,IAAM,EAAc,GACpBA,EAAU9F,SAAQ,SAACmE,G,MACf,EAAYzK,KAAKkM,IAAc,MAAIzB,GAAOmB,EAAWnB,GAAK,GAAI,CAACA,QAEnE3B,EAAM0C,MAAQ,EAGtB,MACJ,QACI,IAAM,EAAW,GAChBI,EAAwBtF,SAAQ,SAAAwF,GAC7B,IAAMO,EAAUlP,OAAO4O,KAAKD,GACxBD,EAAYC,EAAKO,KACjBP,EAAMI,EAAeJ,EAAKO,IAE9B,EAASrM,KAAK8L,MAElBhD,EAAM0C,MAAQ,IAIlB,YAAAP,iBAAR,SAAyBnC,GACrB,IAAMwD,EAAczM,KAAKwL,iBAAiBvC,GACtCxJ,EAAQgN,EAAYhN,MAClBiD,EAAQ+J,EAAYrK,IAC1B,GAAIM,EAAO,OAAOA,EAClB,IAAIuG,EAAMyD,cAAV,CACA,IACM,EADuB,IAAI,EAAcjN,EAAOA,EAAME,oBACfqJ,qBAAqBC,GAA1DE,EAAM,SAAED,EAAG,MAEnB,OADAD,EAAME,OAASA,EACRD,IAEf,EAhJA,G,kcCGA,cAMI,WAAYD,EAAoBtI,GAAhC,MACI,cAAO,K,OAHH,EAAAgM,gBAAkB,GAIE,MAApB1D,EAAMmB,aACNnB,EAAMmB,YAAa,GAEvB,EAAKnB,MAAQA,EACb,EAAKtI,KAAOA,EACZ,EAAKF,UAAYwI,EAAMwC,K,EAwE/B,OArF4B,OAgBxB,YAAAmB,QAAA,SAAQhL,GAAR,WACUsH,EAAM,IAAI,EAAYtH,GAAIiJ,SAAS9L,EAAIoM,OAAQnL,KAAKiJ,OAC1D,OAAIC,EAAY1B,EAAc0B,GACvBlJ,KAAK6M,YAAYjL,GAAIkL,MAAK,SAAAC,GAC7B,OAAO,EAAK9D,MAAM+D,OAAS,EAAKL,gBAAkB,EAAKhF,eACxDsF,OAAM,SAAA/D,GAEL,OADA,EAAKvI,KAAK8E,mBACH+B,EAAc0B,OAIrB,YAAA2D,YAAR,SAAoBjL,GAApB,IAEQsL,EACAC,EAeMC,EAlBd,OAKUnE,EAAQjJ,KAAKiJ,MAgCnB,OA9BIiE,EADAjE,EAAM+D,OACS,SAACnP,GACZ,EAAK8O,gBAAgBxM,KAAKtC,IAKf,SAACA,KACV,EAAK8J,aAILyF,EAAYnE,EAAMoE,OAAS,MAAQ,MAD7CF,EAEQlE,EAAMQ,SAAW,EAAK7B,UACf,SAAC/J,GAGJ,OAFW,EAAK8C,KAAK+D,IAAIC,YAAYsE,EAAMwC,KAAMvM,EAASuF,WACnCzD,YAAYiI,EAAMwC,MACtB2B,GAAWvP,KAGjC,EAAK+J,WACN,EAAKjH,KAAKE,kBACN,CAACoI,EAAMwC,KAAM,EAAWhL,YAGhC,EAAKO,YAAc,EAAKL,KAAKK,YAAY,EAAKP,WACvC,SAAC5C,GACJ,OAAO,EAAKmD,YAAYoM,GAAWvP,KAIpCwJ,EACH4B,EAAME,OAAOrH,KAAI,SAACjE,GACd,OAAOyB,GAAQ,SAAC2B,EAAKC,GACjB,IAAMoM,EAAYH,EAAUtP,GAC5ByP,EAAUhM,QAAU,SAAC4H,GACbD,EAAMQ,OACNxI,IAEAC,EAAIgI,IAGZoE,EAAUjM,UAAY,WAClB6L,EAAarP,GACboD,YAId6L,MAAK,WACH,EAAWpM,IAAI,EAAWiB,SAAUC,EAAI,EAAKjB,UAGzD,EArFA,CAA4B,GCPf4M,OAA2C,IAAvBC,KAAaC,OAA6D,oBAA7BC,yBACjEC,ECH2B,WACpC,IAKI,GAJK3H,YACDA,UAAawH,KAAaI,cACrBJ,KAAaK,iBAAoBL,KAAaM,cAEnD9H,UAOA,OAAO,EANP+H,eAAiBA,gBACZP,KAAaQ,sBAAyBR,KAAaS,iBACvDT,KAAa1I,YAAe0I,KAAa1I,aACrC0I,KAAaU,mBAAsBV,KAAaW,cAK3D,MAAOjG,GACL,OAAO,EAEX,OAAO,EDfqBkG,GEHnBC,EAAU,SAACxQ,GACpB,OAAOP,OAAO4O,KAAKrO,ICDV2K,EAAU,SAAC3K,GACpB,OAAO0K,MAAMC,QAAQ3K,ICCZyQ,EAAY,SAACzQ,GACtB,OAAOwQ,EAAQxQ,GAAO+K,QCHb2F,EAAoB,SAAC1Q,GAC9B,IAAK,IAAMM,KAAON,EACd,OAAOM,GCAf,2BA4EA,OArEI,YAAAqQ,gBAAA,SAAgBC,EAAgB5Q,GAC5BmC,KAAK0O,WAAaD,EAClBzO,KAAKuK,SAAS1M,IAGlB,YAAA8Q,iBAAA,SAAiBF,EAAmD5O,GAGhE,OAFAG,KAAK0O,WAAaD,EAClBzO,KAAK4O,UAAU/O,GACRG,MAGX,YAAA4O,UAAA,SAAU/O,GAIN,OAHAG,KAAK6O,YAAchP,EACnBG,KAAK8O,iBAAmB9O,KAAK0O,WAAW1O,KAAK6O,aAC7C7O,KAAK+O,QAAU/O,KAAK8O,iBAAiBlG,OAC9B5I,MAGX,YAAAuK,SAAA,SAAS1M,GAEL,OADAmC,KAAKnC,MAAQA,EACNmC,MAGX,YAAAgP,SAAA,WACI,IAAK,IAAIpS,EAAI,EAAGA,EAAIoD,KAAK+O,QAASnS,IAC9B,IAAkD,IAA9CoD,KAAKiP,WAAWjP,KAAK8O,iBAAiBlS,IACtC,OAAOoD,KAAK8O,iBAAiBlS,GAAGkQ,KAGxC,IAAMoC,EAAWlP,KAAK8O,iBAAiB9O,KAAK+O,QAAU,GAAGjC,KACzD,OAAmB,MAAZoC,EAAmBlP,KAAKnC,MAAMmC,KAAK6O,aAAeK,GAGrD,YAAAD,WAAR,SAAmBE,GACf,IAAIC,EACJ,IAAKA,KAAeD,EAAM,CACtB,OAAQC,GACJ,KAAKnQ,EAAaiG,YACd,GAAIlF,KAAKnC,MAAMmC,KAAK6O,aAAeM,EAAKC,GACpC,OAAO,EACT,MACN,KAAKnQ,EAAaoQ,MACd,GAAIrP,KAAKnC,MAAMmC,KAAK6O,eAAiBM,EAAKC,GACtC,OAAO,EACT,MACN,KAAKnQ,EAAaoG,SACd,GAAIrF,KAAKnC,MAAMmC,KAAK6O,aAAeM,EAAKC,GACpC,OAAO,EACT,MACN,KAAKnQ,EAAamG,mBACd,GAAIpF,KAAKnC,MAAMmC,KAAK6O,cAAgBM,EAAKC,GACrC,OAAO,EACT,MACN,KAAKnQ,EAAasG,gBACd,GAAIvF,KAAKnC,MAAMmC,KAAK6O,cAAgBM,EAAKC,GACrC,OAAO,EACT,MACN,KAAKnQ,EAAamN,WACd,GAAIpM,KAAKnC,MAAMmC,KAAK6O,eAAiBM,EAAKC,GACtC,OAAO,EACT,MACN,KAAKnQ,EAAa4F,QACd,GAAI7E,KAAKnC,MAAMmC,KAAK6O,aAAeM,EAAKC,GAAapK,KAAOhF,KAAKnC,MAAMmC,KAAK6O,aAAeM,EAAKC,GAAanK,KACzG,OAAO,EAGnB,OAAO,IAGnB,EA5EA,GC4CMqK,EAAsB,SAAwBC,GAAxB,IAEpBC,EAFoB,OACpBC,GAAgB,EAEpB,OAAO,SAACtJ,IACJqJ,EAAUrJ,EAAUC,OAAO5E,QAEnBiO,GAAiB,EAAK5H,QAAQe,SAAW,EAAK8G,aAC9C,EAAKC,WAAWH,EAAO3R,OACvB2R,EAAOI,aAGPH,GAAgB,EAChBD,EAAOK,QAAQ,EAAKC,aAGxBP,MAKNQ,EAAc,SAAwBR,GAAxB,IAEZC,EAFY,OACZC,GAAgB,EAEpB,OAAO,SAACtJ,IACJqJ,EAASrJ,EAAEC,OAAO5E,QAEViO,GACA,EAAKE,WAAWH,EAAO3R,OACvB2R,EAAOI,aAGPH,GAAgB,EAChBD,EAAOK,QAAQ,EAAKC,aAGxBP,MAKNS,EAAgB,SAAwBT,GAAxB,IACdC,EADc,OAElB,OAAO,SAACrJ,IACJqJ,EAASrJ,EAAEC,OAAO5E,SAEd,EAAKmO,WAAWH,EAAO3R,OACtB2R,EAAeI,YAGhBL,MAKNU,EAAe,SAAwBV,GAAxB,IACbC,EADa,OAEjB,OAAO,SAACrJ,IACJqJ,EAASrJ,EAAEC,OAAO5E,SACJ,EAAKqG,QAAQe,SAAW,EAAK8G,aACvC,EAAKC,WAAWH,EAAO3R,OACvB2R,EAAOI,YAEPL,MC5GCW,EAAc,SAACrS,GACxB,OAAOA,EAAMsS,QAAQ,MAAO,KC6B1BC,EAAqB,SAAwBC,GAC/C,IAAIvQ,EACJ,GAAuB,MAAnBE,KAAKiJ,MAAMqH,KACXxQ,EAASE,KAAKgI,cAAcqI,OAE3B,CACD,IAAME,EAAgBL,EAAYG,GAAaG,MAAM,KACrDH,EAAcE,EAAc,GAC5BzQ,EAASE,KAAKgI,cAAcqI,EAAaE,EAAc,IAE3D,GAAc,MAAVzQ,EAAgB,CAChB,IAAM2Q,EAAuBzQ,KAAK6H,QAAQ,GAAGwI,GAC7C,GAAII,EACA,MAAO,CACH1G,SAAU1B,EAAYoI,GACtBtT,KAAMkT,GAGd,MAAM,IAAI,EAAUzR,EAAWwE,eAC3B,CAAEtD,OAAQuQ,EAAaK,SAAS,IAIxC,OAAO5Q,GAGL6Q,EAAuB,SAACC,EAAWC,GACrC,OAAOA,EAAEC,cAAcF,IAGrBG,EAAsB,SAACH,EAAWC,GACpC,OAAOD,EAAEE,cAAcD,IAGrBG,EAAwB,SAACJ,EAAWC,GACtC,OAAO,IAAII,OAAOJ,GAAGC,cAAcF,IAGjCM,EAAuB,SAACN,EAAGC,GAC7B,OAAO,IAAII,OAAOL,GAAGE,cAAcD,IAGjCM,EAAuB,SAACP,EAAWC,GACrC,OAAOA,EAAID,GAGTQ,EAAsB,SAACR,EAAWC,GACpC,OAAOD,EAAIC,GAGTQ,EAAqB,SAACT,EAASC,GACjC,OAAOA,EAAES,UAAYV,EAAEU,WAGrBC,EAAoB,SAACX,EAASC,GAChC,OAAOD,EAAEU,UAAYT,EAAES,WAGrBE,EAAgB,SAAwBC,EAAQC,EAAQjD,GAC1D,IAAK,IAAM5O,KAAc4O,EAAW,CAChCzO,KAAK2R,cAAcnD,gBAAgBC,EAAWgD,GAC9C,IAAMG,EAAU5R,KAAK2R,cAAc/C,UAAU/O,GAAYmP,WACzDhP,KAAK2R,cAAcnD,gBAAgBC,EAAWiD,GAC9C,IAAMG,EAAU7R,KAAK2R,cAAc/C,UAAU/O,GAAYmP,WACzD,cAAeyC,EAAOG,IAClB,KAAK9S,EAAUmS,OACX,OAAON,EAAqBc,EAAOG,GAAUF,EAAOG,IACxD,QACI,OAAOV,EAAqBM,EAAOG,GAAUF,EAAOG,OAK9DC,EAAe,SAAwBL,EAAQC,EAAQjD,GACzD,IAAK,IAAM5O,KAAc4O,EAAW,CAChCzO,KAAK2R,cAAcnD,gBAAgBC,EAAWgD,GAC9C,IAAMG,EAAU5R,KAAK2R,cAAc/C,UAAU/O,GAAYmP,WACzDhP,KAAK2R,cAAcnD,gBAAgBC,EAAWiD,GAC9C,IAAMG,EAAU7R,KAAK2R,cAAc/C,UAAU/O,GAAYmP,WACzD,cAAeyC,EAAOG,IAClB,KAAK9S,EAAUmS,OACX,OAAOF,EAAoBU,EAAOG,GAAUF,EAAOG,IACvD,QACI,OAAOT,EAAoBK,EAAOG,GAAUF,EAAOG,OAK7DE,GAAoB,SAACjS,EAAiBkS,GACxC,OAAQlS,EAAOiK,UACX,KAAKjL,EAAUmS,OACX,MAAsB,QAAfe,EAAMjQ,KAAiBgP,EAAsBJ,EACxD,KAAK7R,EAAUmL,OACX,MAAsB,QAAf+H,EAAMjQ,KAAiBqP,EAAsBD,EACxD,KAAKrS,EAAU4J,SACX,MAAsB,QAAfsJ,EAAMjQ,KAAiBwP,EAAoBF,EACtD,QACI,MAAsB,QAAfW,EAAMjQ,KAAiBmP,EAAuBF,IAK3DiB,GAAW,SAAwBD,G,MAAxB,OACbA,EAAMjQ,KAAOmQ,GAAcF,EAAMjQ,MACjC,IAAIsO,EAAc2B,EAAMG,GACxB,GAAmB,MAAf9B,UAA8BA,IAAgBvR,EAAUxB,OACrC,QAAf0U,EAAMjQ,KACN/B,KAAK6H,QAAQuK,MAAK,SAACxB,EAAGC,GAClB,OAAOiB,EAAa/U,KAAK,EAAM6T,EAAGC,EAAGR,MAIzCrQ,KAAK6H,QAAQuK,MAAK,SAACxB,EAAGC,GAClB,OAAOW,EAAczU,KAAK,EAAM6T,EAAGC,EAAGR,UAI7C,CACD,IAAMgC,EAAajC,EAAmBrT,KAAKiD,KAAMqQ,GACjD,GAAkB,MAAdgC,EAAoB,CACpB,IAAM,EAAcN,GAAkBM,EAAYL,GAClD3B,EAAcgC,EAAWlV,KACP,MAAd6U,EAAMM,KACNtS,KAAK6H,QAAQuK,MAAK,SAACxB,EAAGC,GAClB,OAAO,EAAYD,EAAEP,GAAwBQ,EAAER,QAInDrQ,KAAK2R,cAAchD,mBAAgB,MAAI0B,GAAwB2B,EAAMM,KAAI,GAAIjC,GAC7ErQ,KAAK6H,QAAQuK,MAAK,SAACxB,EAAGC,GAClB,OAAO,EACH,EAAKc,cAAcpH,SAASqG,GAAG5B,WAC/B,EAAK2C,cAAcpH,SAASsG,GAAG7B,mBASjDkD,GAAgB,SAACnQ,GACnB,OAAe,MAARA,EAAe,MAAQA,EAAKwQ,eCzIjCC,GAA+B,SAAwBC,GAAxB,WAC7BhD,GAAgB,EACpB,OAAO,SAACtJ,GACJ,IAAMqJ,EAA6BrJ,EAAEC,OAAO5E,OAC5C,GAAIgO,EACA,GAAIC,GAAiB,EAAK5H,QAAQe,SAAW,EAAK8G,YAAa,CAC3D,IAAM7R,EAAQ2R,EAAO3R,MACjB,EAAK6U,eAAe7U,IACpB,EAAK8R,WAAW9R,GAEpB2R,EAAOI,gBAGPH,GAAgB,EAChBD,EAAOK,QAAQ,EAAKC,iBAIxB2C,MAKNE,GAAuB,SAAwBF,GAAxB,WACrBhD,GAAgB,EACpB,OAAO,SAACtJ,GACJ,IAAMqJ,EAASrJ,EAAEC,OAAO5E,OACxB,GAAIgO,EACA,GAAIC,EAAe,CACf,IAAM5R,EAAQ2R,EAAO3R,MACjB,EAAK6U,eAAe7U,IACpB,EAAK8R,WAAW9R,GAEpB2R,EAAOI,gBAGPH,GAAgB,EAChBD,EAAOK,QAAQ,EAAKC,iBAIxB2C,MAKNG,GAAwB,SAAwBH,GAAxB,WAC1B,OAAO,SAACtM,GACJ,IAAMqJ,EAASrJ,EAAEC,OAAO5E,OACxB,GAAIgO,GAAU,EAAK3H,QAAQe,SAAW,EAAK8G,YAAa,CACpD,IAAM7R,EAAQ2R,EAAO3R,MACjB,EAAK6U,eAAe7U,IACpB,EAAK8R,WAAW9R,GAEpB2R,EAAOI,gBAGP6C,MAMNI,GAAyB,SAAwBJ,GAAxB,WAC3B,OAAO,SAACtM,GACJ,IAAMqJ,EAA6BrJ,EAAEC,OAAO5E,OAC5C,GAAIgO,EAAQ,CACR,IAAM3R,EAAQ2R,EAAO3R,MACjB,EAAK6U,eAAe7U,IACpB,EAAK8R,WAAW9R,GAEpB2R,EAAOI,gBAGP6C,MC3GCK,GAA6B,SAACC,GACvC,IACIC,EACAC,EAFEC,EAAeH,EAAevC,MAAM,KAW1C,OARI0C,EAAa,IACbF,EAAcE,EAAa,GAC3BD,EAAYC,EAAatK,OAAS,EAAIzJ,EAAUgU,IAAMhU,EAAUiU,OAGhEJ,EAAcE,EAAa,GAC3BD,EAAY9T,EAAUkU,OAElBJ,GACJ,KAAK9T,EAAUkU,MACX,OAAO,IAAIC,OAAO,IAAIN,EAAe,KACzC,KAAK7T,EAAUiU,KACX,OAAO,IAAIE,OAAUN,EAAW,IAAK,KACzC,QACI,OAAO,IAAIM,OAAO,GAAGN,EAAe,OClB1C,GAAW,SAACnV,GACd,MAA8B,WAAvBwK,EAAYxK,MAAyBA,aAAiByV,SAGpDC,GAAQ,SAACC,GAClB,GAAI,GAASA,GAAM,CACf,IAAMC,EAAO,GACb,IAAK,IAAM7W,KAAK4W,EACZC,EAAK7W,GAAe,MAAV4W,EAAI5W,IAAc,GAAS4W,EAAI5W,IAAM2W,GAAMC,EAAI5W,IAAM4W,EAAI5W,GAEvE,OAAO6W,EAEX,OAAOD,GCVEE,GAAU,SAAC7V,EAAO8V,EAAcC,GACzC,IAAMC,EAAQxL,EAAYxK,GAG1B,GAAIgW,IAFUxL,EAAYsL,GAEL,OAAO,EAK5B,OAJIE,IAAU/U,EAAU4J,WACpB7K,EAAQA,EAAMyT,UACdqC,EAAeA,EAAarC,WAExBsC,GAEJ,KAAK3U,EAAaiG,YACd,OAAOrH,EAAQ8V,EAEnB,KAAK1U,EAAaoG,SACd,OAAOxH,EAAQ8V,EAEnB,KAAK1U,EAAasG,gBACd,OAAO1H,GAAS8V,EAEpB,KAAK1U,EAAamG,mBACd,OAAOvH,GAAS8V,EAEpB,KAAK1U,EAAamN,WACd,OAAOvO,IAAU8V,EACrB,QACI,OAAO9V,IAAU8V,ICrB7B,cAIE,WAAYhI,EAAemI,GACzB9T,KAAK2L,MAAQ4H,GAAM5H,GACnB3L,KAAK8T,UAAYA,EAyErB,OAtEE,YAAArS,OAAA,SAAOsS,GACL,IAAMC,EAAOD,EAAME,aACLF,EAAMG,QAAO,SAACC,EAAMC,GAAS,OAAAD,GAAQA,EAAKC,KAAOpU,KAAK2L,OACvDqI,IAGf,YAAA1J,MAAA,SAAM+J,GACJ,IAAI/R,GAAS,EACb,IAAKtC,KAAK8T,UAAW,OAAOxR,EAC5B,IAAK,IAAIzC,KAAcG,KAAK2L,MAAO,CACjC,IAAKrJ,EACH,OAAOA,EAET,IAAMgS,EAAmBtU,KAAK2L,MAAM9L,GAC9BmK,EAAcqK,EAASxU,GAC7B,GAAsC,WAAlCwI,EAAYiM,GACd,IAAK,IAAMnW,KAAOmW,EAAkB,CAClC,IAAKhS,EACH,OAAOA,EAET,OAAQnE,GACN,KAAKc,EAAasV,GAChBjS,EAAStC,KAAKwU,QAAQ3U,EAAYmK,GAClC,MACF,KAAK/K,EAAawV,KAChBnS,EAAStC,KAAK0U,WAAW7U,EAAYmK,GACrC,MACF,KAAK/K,EAAa0V,MAChBrS,EAAStC,KAAK4U,WAAW/U,EAAYmK,GACrC,MACF,KAAK/K,EAAa4F,QAClB,KAAK5F,EAAaiG,YAClB,KAAKjG,EAAaoG,SAClB,KAAKpG,EAAamG,mBAClB,KAAKnG,EAAasG,gBAClB,KAAKtG,EAAamN,WAChB9J,EAAStC,KAAK6U,oBAAoBhV,EAAYmK,EAAa7L,GAC3D,MACF,QACEmE,GAAS,QAKfA,EAASoR,GAAQY,EAAkBtK,GAGvC,OAAO1H,GAGD,YAAAkS,QAAR,SAAgB1U,EAAQjC,GACtB,OAAsF,MAA9EmC,KAAK2L,MAAM7L,GAAQb,EAAasV,IAAczM,MAAK,SAAAC,GAAK,OAAA2L,GAAQ3L,EAAGlK,OAGrE,YAAA6W,WAAR,SAAmB5U,EAAQjC,GACzB,OAAOiV,GAA2B9S,KAAK2L,MAAM7L,GAAQb,EAAawV,OAAOK,KAAKjX,IAGxE,YAAA+W,WAAR,SAAmB9U,EAAQjC,GACzB,OAAOmC,KAAK2L,MAAM7L,GAAQb,EAAa0V,OAAOG,KAAKjX,IAG7C,YAAAgX,oBAAR,SAA4B/U,EAAQjC,EAAO+V,GACzC,IAAMD,EAAe3T,KAAK2L,MAAM7L,GAAQ8T,GACxC,OAAIA,GAAU3U,EAAa4F,QAClB6O,GAAQ7V,EAAO8V,EAAcC,GAE/BF,GAAQ7V,EAAO8V,EAAa3O,IAAK,OACtC0O,GAAQ7V,EAAO8V,EAAa1O,KAAM,OAExC,EA/EA,G,0dCAA,0E,OAMI,EAAA8P,0BAA2B,EAC3B,EAAAC,yBAA0B,E,EA2D9B,OAlE+B,QAcjB,YAAAC,eAAV,WACI,IAAMhM,EAAQjJ,KAAKiJ,MACbiM,EAAc3G,EAAkBtF,EAAM0C,OAC5C,IAAI3L,KAAKgB,YAAYmU,WAAWrO,SAASoO,GAsCpC,CACD,IAAMpV,EAASE,KAAKgI,cAAckN,GAC5BxS,EACF,IAAI,EADgB,MAAV5C,EACIlB,EAAWwE,eACXxE,EAAWyE,gBADgB,CAAEvD,OAAQoV,IAEvD,OAAO1N,EACH9E,GA3CJ,IAAM7E,EAAQoL,EAAM0C,MAAMuJ,GAC1B,GAA2B,WAAvB7M,EAAYxK,GA6BX,CACKiW,EAAYxF,EAAUrF,EAAM0C,OAAS,EAG3C,OAFA3L,KAAKoV,qBAAuB,IAAI,GAAanM,EAAM0C,MAAOmI,GAC1D9T,KAAKoV,qBAAqB3T,OAAO,CAACyT,IAC3BlV,KAAKqV,kBAAkBH,EAAarX,EAAO,KAAM,QAhCxD,IAAMiW,EAAYxF,EAAUzQ,GAAS,GACjCyQ,EAAUrF,EAAM0C,OAAS,EAE7B3L,KAAKoV,qBAAuB,IAAI,GAAanM,EAAM0C,MAAOmI,GAC1D,IAAM3V,EAAMoQ,EAAkB1Q,GAE9B,OADAmC,KAAKoV,qBAAqB3T,OAAO,CAACyT,EAAa/W,IACvCA,GACJ,KAAKc,EAAawV,KACd,IAAMa,EAAWxC,GAA2BjV,EAAMoB,EAAawV,OAC/D,OAAOzU,KAAKuV,kBAAkBL,EAAaI,GAE/C,KAAKrW,EAAa0V,MACd,OAAO3U,KAAKuV,kBAAkBL,EAAarX,EAAMoB,EAAa0V,QAClE,KAAK1V,EAAasV,GACd,OAAOvU,KAAKwV,eACRN,EAAarX,EAAMoB,EAAasV,KAExC,KAAKtV,EAAa4F,QAClB,KAAK5F,EAAaiG,YAClB,KAAKjG,EAAaoG,SAClB,KAAKpG,EAAamG,mBAClB,KAAKnG,EAAasG,gBACd,OAAOvF,KAAKqV,kBAAkBH,EAAarX,EAAOM,EAAK,QAC3D,KAAKc,EAAawW,UAAW,MAC7B,QACI,OAAOzV,KAAKqV,kBAAkBH,EAAarX,EAAO,KAAM,UAqBhF,EAlEA,CAA+B,GCqCzB6X,GAA4B,SAAwBjD,EAAUkD,GAAlC,WAC9B,OAAO,SAACxP,GACJ,IAAMqJ,EAA6BrJ,EAAEC,OAAO5E,OAC5C,GAAI,EAAKqG,QAAQe,SAAW,EAAK8G,aAAeF,EAAQ,CACpD,IAAM3R,EAAQ2R,EAAO3R,MACjB,EAAK6U,eAAe7U,IACpB8X,EAAW9X,GAEf2R,EAAOI,gBAGP6C,MAKNmD,GAAoB,SAAwBnD,EAAUkD,GAAlC,WAEtB,OAAO,SAACxP,GACJ,IAAMqJ,EAA6BrJ,EAAEC,OAAO5E,OAC5C,GAAIgO,EAAQ,CACR,IAAM3R,EAAQ2R,EAAO3R,MACjB,EAAK6U,eAAe7U,IACpB8X,EAAW9X,GAEf2R,EAAOI,gBAGP6C,MAsBNoD,GAAsB,SAAwBpD,GAAxB,WACxB,OAAO,SAACtM,GACJ,IAAMqJ,EAA6BrJ,EAAEC,OAAO5E,OAC5C,GAAIgO,EAAQ,CACR,IAAM3R,EAAQ2R,EAAO3R,MACjB,EAAK6U,eAAe7U,IACpB,EAAK8R,WAAW9R,GAEpB2R,EAAOI,gBAGP6C,MC9DNqD,GAA+B,SAAwBrD,EAAUkD,GAAlC,WACjC,OAAO,SAACxP,GACJ,IAAMqJ,EAASrJ,EAAEC,OAAO5E,OACpB,EAAKqG,QAAQe,SAAW,EAAK8G,aAAeF,GACxC,EAAKkD,eAAelD,IACpBmG,EAAWnG,EAAO3R,OAEtB2R,EAAOI,YAEP6C,MAKNsD,GAAuB,SAAwBtD,EAAUkD,GAAlC,WACzB,OAAO,SAACxP,GACJ,IAAMqJ,EAASrJ,EAAEC,OAAO5E,OACpBgO,GACI,EAAKkD,eAAelD,IACpBmG,EAAYnG,EAAY,OAE5BA,EAAOI,YAEP6C,MAKNuD,GAAwB,SAAwBvD,GAAxB,WAC1B,OAAO,SAACtM,GACJ,IAAMqJ,EAASrJ,EAAEC,OAAO5E,OACpB,EAAKqG,QAAQe,SAAW,EAAK8G,aAAeF,GACxC,EAAKkD,eAAelD,IACpB,EAAKG,WAAWH,EAAO3R,OAE3B2R,EAAOI,YAEP6C,MAKNwD,GAAyB,SAAwBxD,GAAxB,WAC3B,OAAO,SAACtM,GACJ,IAAMqJ,EAASrJ,EAAEC,OAAO5E,OACpBgO,GACI,EAAKkD,eAAelD,IACpB,EAAKG,WAAWH,EAAO3R,OAE3B2R,EAAOI,YAEP6C,M,iNCnFZ,cAQI,WAAYyD,GANJ,KAAAC,gBAAuC,GACvC,KAAAC,wBAA0B,EAClC,KAAAC,cAAgB,GAChB,KAAAxO,QAAU,GAIN7H,KAAKkW,OAASA,EAyRtB,OAtRI,sBAAI,oBAAK,C,IAAT,WACI,OAAOlW,KAAKkW,OAAOjN,O,gCAGvB,YAAAqN,SAAA,SAASnZ,GACL,OAAO6C,KAAKkW,OAAOzW,MAAMtC,IAGrB,YAAAoZ,cAAR,SAAsBtN,GAElB,OAAO,IAAI,GAAOA,EAAOjJ,KAAKkW,OAAOvV,MACjCiM,QAAQ5M,KAAKkW,OAAOtU,KAG5B,YAAAgL,QAAA,sBACU3D,EAAQjJ,KAAKiJ,MACnBjJ,KAAKmW,gBAAkB9N,EAAYY,EAAMqH,QAAUxR,EAAUxB,OACzD,CAAC2L,EAAMqH,MAA6BrH,EAAMqH,KAI9C,IAFA,IAAM7P,EAAYwI,EAAM6C,KAClB0K,EAAgB,CAAC/V,GACd7D,EAAI,EAAG,EAASoD,KAAKmW,gBAAgBvN,OAAQhM,EAAI,EAAQA,IAAK,CACnE,IAAM0M,EAAOtJ,KAAKmW,gBAAgBvZ,GAC9B6Z,EAAczW,KAAK0W,kBAAkBpN,EAAKqN,IAE1CrN,EAAKsN,OAASH,EAAYI,OAAOpX,QACjCgX,EAAc,CACVI,OAAQJ,EAAYK,OACpBA,OAAQL,EAAYI,SAI5B,IAAM3N,EAAMlJ,KAAK+W,gBAAgBN,EAAanN,GAC9C,GAAIJ,EACA,OAAO1B,EAAc0B,GAEzBlJ,KAAKmW,gBAAgBvZ,GAAGoa,cAAgBP,EACxCD,EAAcrW,KAAKmJ,EAAKsN,MAO5B,OAJK5W,KAAKkW,OAAOtO,WACb5H,KAAKkW,OAAOvV,KAAKE,kBAAkB2V,GAGhCxW,KAAKuW,cAAc,CACtBzK,KAAMrL,EACNkL,MAAO1C,EAAM0C,MACb2G,KAAMrJ,EAAMqJ,KACZ2E,QAAShO,EAAMgO,UAChBnK,MAAK,SAAAjF,GAOJ,OANA,EAAKA,QAAUA,EAAQ/F,KAAI,SAACwH,G,MACxB,OAAO,EAAP,IACK,EAAK8M,yBAA0B9M,E,KAGxC,EAAK+M,cAAclW,KAAKM,GACjB,EAAKyW,+BAIZ,YAAAC,qBAAR,sBAEI,GAAInX,KAAK6H,QAAQe,OAAS,EAEtB,IACI,IAAI,EAAU,GAER,EADStL,OAAO4O,KAAKlM,KAAK6H,QAAQ,IACZe,OACtB,EAAe,SAACK,EAAkBpL,GACpC,GAAgB,MAAZoL,EAAMmO,GACN,IAAK,IAAMjZ,KAAO8K,EAAMmO,QACkBlN,IAAlCrM,EAAOoL,EAAMmO,GAAWjZ,MACxBN,EAAOoL,EAAMmO,GAAWjZ,IAAQN,EAAMM,UAC/BN,EAAMM,IAIzB,OAAON,GAEXmC,KAAK6H,QAAQpB,SAAQ,SAACjF,GAElB,IADA,IAAI6V,EAAO7V,EAAO,GACT5E,EAAI,EAAGA,EAAI,EAAcA,IAAK,CACnC,IAAMqM,EAAQ,EAAKkN,gBAAgBvZ,EAAI,GACvCya,EAAO,GAAH,MAAQA,GAAS,EAAapO,EAAOzH,EAAO5E,KAEpD,EAAQuD,KAAKkX,MAEjBrX,KAAKkW,OAAgB,QAAI,EACzBlW,KAAKkW,OAAOoB,kCACZtX,KAAKkW,OAAOjN,MAAMgO,QAAU,KAYxBjX,KAAKkW,OAAOqB,iBAcZvX,KAAKkW,OAAOsB,2BAGpB,MAAOtP,GACH,OAAOV,EACH,IAAI,EAAU5I,EAAWmF,iBAAkBmE,EAAGhG,YAOtD,YAAAgV,yBAAR,sBACUO,EAAYzX,KAAKmW,gBAAgBnW,KAAKoW,yBAC5C,IAAIqB,EAsBA,OAAOzX,KAAKmX,uBArBZ,IACI,IAAI,EAAcM,EAAUT,cAC5B,OAAOhX,KAAKuW,cAAc,CACtBzK,KAAM2L,EAAUb,KAChBjL,MAAO8L,EAAU9L,MACjB2G,KAAMmF,EAAUnF,KAChB2E,QAASQ,EAAUR,UACpBnK,MAAK,SAAAjF,GAIJ,OAHA,EAAK6P,WAAWD,EAAU1V,KAAM,EAAa8F,GAC7C,EAAKwO,cAAclW,KAAK,EAAY2W,OAAOrX,SACzC,EAAK2W,wBACA,EAAKc,8BAGpB,MAAOhP,GACH,OAAOV,EACH,IAAI,EAAU5I,EAAWmF,iBAAkBmE,EAAGhG,YAStD,YAAAwV,WAAR,SAAmBC,EAAkBlB,EAA4BmB,GAAjE,IAoBYC,EACAC,EAFAvO,EAGEwO,EAtBd,OAEUlQ,EAAU,GACV+J,EAAU6E,EAAYI,OAAO/W,OAC7B+R,EAAU4E,EAAYK,OAAOhX,OAC7BkY,EAAchY,KAAKqW,cAAc3P,QAAQ+P,EAAYI,OAAOpX,OAC5DwY,EAAcjY,KAAKoW,wBAA0B,EA+CnD,OAAQuB,GACJ,IAAK,OAnCDpO,EAAQ,EAGNwO,EAAqB,GAC3B,EAAKzB,SAASG,EAAYK,OAAOrX,OAAOG,QAAQ6G,SAAQ,SAAAyR,GACpDH,EAAmBG,EAAI/a,MAAQ,QAEnC,EAAK0K,QAAQpB,SAAQ,SAAC0R,GAClBN,EAA8B,GAE1BC,EADgB,IAAhBG,EACW,SAAUG,GACbD,EAAoBH,GAAapG,KAAawG,EAAqBvG,IACnEgG,EAA4B1X,KAAKiY,IAK9B,SAAUA,GACjB,IAAMva,EAAQsa,EAAoBH,GACrB,MAATna,GAAiBA,EAAM+T,KAAawG,EAAqBvG,IACzDgG,EAA4B1X,KAAKiY,IAI7CR,EAAgBnR,QAAQqR,GACmB,IAAvCD,EAA4BjP,SAC5BiP,EAA8B,CAACE,IAEnCF,EAA4BpR,SAAQ,SAAU5I,GAC1CgK,EAAQ0B,GAAS,GAAH,GAAQ4O,GACtBtQ,EAAQ0B,KAAS0O,GAAepa,QAMjB,MACvB,SAjDqB,WACrB,IAAI0L,EAAQ,EACZ,EAAK1B,QAAQpB,SAAQ,SAAA0R,GACjBP,EAAgBnR,SAAQ,SAAC2R,GACjBD,EAAoBH,GAAapG,KAAawG,EAAqBvG,KACnEhK,EAAQ0B,GAAS,GAAH,GAAQ4O,GACtBtQ,EAAQ0B,KAAS0O,GAAeG,SA4CxCC,GAERrY,KAAK6H,QAAUA,GAGX,YAAA6O,kBAAR,SAA0B4B,GAEtB,IAAMC,GADND,EAASpI,EAAYoI,IACS9H,MAAM,KAC9BgI,EAA2BD,EAAe,GAAG/H,MAAM,KACnDiI,EAA4BF,EAAe,GAAG/H,MAAM,KAW1D,MAVa,CACTqG,OAAQ,CACJpX,MAAO+Y,EAAyB,GAChC1Y,OAAQ0Y,EAAyB,IAErC1B,OAAQ,CACJrX,MAAOgZ,EAA0B,GACjC3Y,OAAQ2Y,EAA0B,MAMtC,YAAA1B,gBAAR,SAAwBN,EAA4BxK,GAChD,IAII/C,EAJE2N,EAASJ,EAAYI,OACrBC,EAASL,EAAYK,OACrB4B,EAAwB1Y,KAAKsW,SAASO,EAAOpX,OAC7CkZ,EAAwB3Y,KAAKsW,SAASQ,EAAOrX,OAqCnD,OAjCIwM,EAAI2K,OAASE,EAAOrX,QACpByJ,EAAM,IAAI,EAAUtK,EAAWmF,iBAC3B,2CAMiE,MAArE2U,EAAsB9Y,QAAQkI,MAAK,SAAAC,GAAK,OAAAA,EAAE5K,OAAS0Z,EAAO/W,UAC1DoJ,EAAM,IAAI,EAAUtK,EAAWmF,iBAC3B,UAAU8S,EAAO/W,OAAM,4BAA4B+W,EAAOpX,OAGY,MAArEkZ,EAAsB/Y,QAAQkI,MAAK,SAAAC,GAAK,OAAAA,EAAE5K,OAAS2Z,EAAOhX,YAC/DoJ,EAAM,IAAI,EAAUtK,EAAWmF,iBAC3B,UAAU+S,EAAOhX,OAAM,4BAA4BgX,EAAOrX,QAKpD,MAAVwM,EAAImL,KACJnL,EAAImL,GAAK,IAEbsB,EAAsB9Y,QAAQyJ,OAAM,SAAUvJ,GAC1C,IAAM8Y,EAAcD,EAAsB/Y,QAAQkI,MAAK,SAAAC,GAAK,OAAAA,EAAE5K,OAAS2C,EAAO3C,MAAQ4K,EAAE5K,OAAS0Z,EAAO/W,UACxG,OAAmB,MAAf8Y,GAAmD,MAA5B3M,EAAImL,GAAGwB,EAAYzb,QAC1C+L,EAAM,IAAI,EAAUtK,EAAWmF,iBAC3B,UAAUjE,EAAO3C,KAAI,wBAAwB0Z,EAAOpX,MAAK,MAAMqX,EAAOrX,QAEnE,MAIRyJ,GAEf,EAlSA,G,8vBCGA,eA6BI,WAAYD,EAAoBtI,GAAhC,MACI,cAAO,K,OA7BX,EAAAkY,QAAS,EAST,EAAAC,YAAa,EAIH,EAAAnH,cAAgB,IAAI,EAqKtB,EAAAoH,cAAgB,WACpB,GAAI,EAAK9P,MAAMgO,QAAS,CACpB,IAAM,EAAe,GACf,EAAgB,GACtB,EAAKhO,MAAMgO,QAAQxQ,SAAQ,SAAA3G,GACvB,EAAK+H,QAAQpB,SAAQ,SAAC4Q,EAAMza,GACxBya,EAAKvX,GAAQ2G,SAAQ,SAAA6C,G,MACjB,EAAanJ,KAAK,SACTkX,KAAI,MAAQvX,GAASwJ,EAAI,QAGtC,EAAc1M,IAAK,QAG3B,IAAI,EAAe,EACnByR,EAAQ,GAAe5H,SAAQ,SAAAtI,GAC3B,EAAK0J,QAAQ6B,OAAOO,OAAO9L,GAAO,EAAc,KAC9C,KAEN,EAAK0J,QAAU,EAAKA,QAAQmR,OAAO,GAUvC,OARA,EAAKxB,2BACL,EAAKD,iBACD,EAAKvC,yBACL,EAAKnN,QAAQ6B,OAAO,EAAG,EAAKT,MAAMgQ,MAElC,EAAKlE,2BACL,EAAKlN,QAAU,EAAKA,QAAQqR,MAAM,EAAG,EAAKjQ,MAAMkQ,QAE7C,EAAKtR,SAjLZ,EAAKoB,MAAQA,EACb,EAAKtI,KAAOA,EACZ,EAAKF,UAAYwI,EAAM6C,KACvB,EAAKsN,gBACD5Q,EAAQ,EAAKS,MAAM0C,QACnB,EAAK0N,YAAa,EAClB,EAAK/B,oCAGL,EAAKxH,WAAa7G,EAAMgQ,KACxB,EAAKvJ,YAAczG,EAAMkQ,OAEzBlQ,EAAM+I,QACFxJ,EAAQS,EAAM+I,QAAU/I,EAAM+I,MAAMM,MC3DxB,iBD2DyCrJ,EAAM+I,MAAMG,MACjE,EAAKlJ,MAAM+I,MAAMsH,YAAa,GAElC,EAAKhC,mCAEArO,EAAMsQ,SACX,EAAKjC,kC,EAoMjB,OAtP4B,QAsDxB,YAAA1K,QAAA,SAAQhL,GACJ5B,KAAK4B,GAAKA,EAEV,IACI,IAAMsH,EAAM,IAAI,EAAYtH,GAAIiJ,SAAS9L,EAAIgM,OAAQ/K,KAAKiJ,OAC1D,OAAIC,EAAY1B,EAAc0B,IAC9BlJ,KAAKwZ,oBACkB,MAAnBxZ,KAAKiJ,MAAMqH,KACa,MAApBtQ,KAAKiJ,MAAM0C,MACPnD,EAAQxI,KAAKiJ,MAAM0C,OACT3L,KAAKyZ,uBAGLzZ,KAAK0Z,gBAIT1Z,KAAK2Z,6BAIT3Z,KAAK4Z,oBAEJ9M,KACX9M,KAAK+Y,cAAc3a,KAAK4B,QAGhC,MAAOkI,GACH,OAAOlI,KAAKiI,YAAYC,KAIxB,YAAAuR,qBAAR,sBACIzZ,KAAKqZ,YAAa,EAClB,IAEsCQ,EAFhC9N,EAAa/L,KAAKiJ,MAAM0C,MACxBmO,EAAO9Z,KAAKC,aACd8Z,GAAe,EAAMC,EAAS,GAK5BC,EAAY,WACd,GAAIJ,IAAc5a,EAAaib,IAAK,EAYX,IAAjBH,EACAC,EAAS,EAAKnS,QAETmS,EAAOpR,OAAS,IAbjBuR,EAAa,GACjB,EAAKtS,QAAQpB,SAAQ,SAAC6C,GAPd,IAAC8Q,IAQW9Q,EAAKwQ,GAP1BE,EAAO7N,WAAU,SAAA7C,GAAQ,OAAAA,EAAKwQ,KAAUM,MAAa,GAQ5CD,EAAWha,KAAKmJ,MAGxB0Q,EAASG,EACTA,EAAa,WAWbH,EAAOpR,OAAS,GAChB,EAAKf,QAAU,GAAH,MAAOmS,GAAW,EAAKnS,SACnC,EAAKwS,mBACLL,EAAS,EAAKnS,SAGdmS,EAAS,EAAKnS,QAzBJ,IACNsS,EA4BZ,GADAJ,GAAe,EACXhO,EAAWnD,OAAS,EAEpB,OADA,EAAKf,QAAU,GACRyS,IAGP,EAAKzS,QAAUmS,GAIjBM,EAAkB,WAcpB,OAbA,EAAKrR,MAAM0C,MAAQI,EAAWwO,QAC1B,EAAKtR,MAAM0C,MAAM1M,EAAaqN,KACM,IAAhCgC,EAAU,EAAKrF,MAAM0C,QACrBkO,EAAY5a,EAAaqN,GACzB,EAAKrD,MAAM0C,MAAQ,EAAK1C,MAAM0C,MAAM1M,EAAaqN,KAOrDuN,EAAY5a,EAAaib,IAEtB,EAAKR,gBAAgB5M,KAAKmN,IAErC,OAAOK,KAGH,YAAAd,iBAAR,WACSxZ,KAAK4H,WACN5H,KAAKW,KAAK6D,4BAA4B,CAACxE,KAAKS,WAAYvB,EAASsb,UAErExa,KAAKgB,YAAchB,KAAKW,KAAKK,YAAYhB,KAAKS,YAG1C,YAAAiZ,cAAR,sBAOI,OANA1Z,KAAK0S,eAAiB,SAAC7U,GACnB,OAAO,EAAKuX,qBAAqB9K,MAAMzM,IAEtCmC,KAAKiJ,MAAM0C,MAAqB8O,IACjCza,KAAK0a,kBAEF1a,KAAKiV,iBAAiBnI,MAAK,WAC9B,OAAO,EAAK6N,uBAIZ,YAAAA,iBAAR,WACI,GAAI3a,KAAK4a,KACL,OAAO5a,KAAK6a,mBAoCZ,YAAAC,eAAR,WACI9a,KAAK4a,MAAO,EACZ5a,KAAK6H,QAAU7H,KAAK+a,OAAOlT,QAE3B7H,KAAK+a,OAAS,KACd/a,KAAKqa,oBAID,YAAAQ,gBAAR,WAEI,GADA7a,KAAK+a,OAAOlT,QAAU,GAAH,MAAQ7H,KAAK+a,OAAOlT,SAAY7H,KAAK6H,UACnD7H,KAAKiJ,MAAMkQ,OAAUnZ,KAAKiJ,MAAMkQ,MAAQnZ,KAAK+a,OAAOlT,QAAQe,OAAS,CACtE5I,KAAK6H,QAAU,GACf,IAAM1J,EAAMoQ,EAAkBvO,KAAK+a,OAAOC,SAC1C,GAAW,MAAP7c,EAAa,CACb,IAAMwN,EAAQ,GAId,OAHAA,EAAMxN,GAAO6B,KAAK+a,OAAOC,QAAQ7c,UAC1B6B,KAAK+a,OAAOC,QAAQ7c,GAC3B6B,KAAKiJ,MAAM0C,MAAQA,EACZ3L,KAAKiV,iBAAiBnI,KAAK9M,KAAK2a,iBAAiBvc,KAAK4B,QAGrE,OAAOA,KAAK8a,kBAGR,YAAAJ,gBAAR,WACI1a,KAAK4a,MAAO,EACZ,IAAMjP,EAAQ3L,KAAKiJ,MAAM0C,MACzB3L,KAAK+a,OAAS,CACVC,QAASrP,EAAM8O,GACf5S,QAAS,WAGN8D,EAAM8O,IAErB,EAtPA,CAA4B,IAwP5B,GAAOjc,UAAUgX,eHpQa,SAA2B1V,EAAQqJ,GAAnC,WACtB8P,EAAOjZ,KAAK8P,WACV6F,EAAa,SAACsF,GACH,IAAThC,EACC,EAAgBtJ,WAAWsL,KAG1BhC,GAGJgB,EAAY,WACd,IAAsC,IAAlC,EAAKlF,2BAAuE,IAAjC,EAAKC,wBAAmC,CACnF,GAAI,EAAKlF,YAAc,EAAKJ,YACxB,OAAOgG,GAEN,GAAI,EAAK5F,WACV,OAAO8F,GAEF,EAAKlG,YAIlB,OAAOmG,GAZO,GAeZqF,EAAclb,KAAKgB,YAAYuI,MAAMzJ,GAS3C,OAAOuH,EACH8B,EAAOrH,KAAI,SAAUmZ,GACjB,OAVoCpd,EAUlBod,EATf3b,GAAQ,SAAC2B,EAAKC,GACjB,IAAMia,EAAgBD,EAAYE,WAAW,EAAKza,KAAKY,SAAS1D,IAChEsd,EAAc9Z,UAAY4Y,EAAUld,KAAK,EAAMkE,EAAK0U,GACpDwF,EAAc7Z,QAAUJ,KAJW,IAACrD,OG2OhD,GAAOW,UAAUmb,2BZrQyB,eAClCwB,EADkC,OAEtC,GAAInb,KAAKiJ,MAAM+I,QAAyC,IAAhChS,KAAKiJ,MAAM+I,MAAMsH,YAAwBtZ,KAAKiJ,MAAM+I,MAAMG,GAAI,CAClF,IAAInS,KAAKgB,YAAYmU,WAAWrO,SAAS9G,KAAKiJ,MAAM+I,MAAMG,IAQtD,OAAO3K,EACH,IAAI,EACA5I,EAAWwE,eACX,CAAEtD,OAAQE,KAAKiJ,MAAM+I,MAAMG,GAAIzB,SAAS,KAVhD,IAAM2K,EAAgCrb,KAAKiJ,MAAM+I,MAAMjQ,MACX,SAAxC/B,KAAKiJ,MAAM+I,MAAMjQ,KAAKwQ,cAA2B,OAAS,OAC9DvS,KAAK6Y,QAAS,EACdsC,EAAgBnb,KAAKgB,YAAYuI,MAAMvJ,KAAKiJ,MAAM+I,MAAMG,IACpDiJ,WAAW,KAAMC,QAYzBF,EAAgBnb,KAAKgB,YAAYoa,aAErC,IAAMnB,EAAY,WACd,IAAsC,IAAlC,EAAKlF,2BAAuE,IAAjC,EAAKC,wBAAmC,CACnF,GAAI,EAAKlF,YAAc,EAAKJ,YACxB,OAAOJ,EAEN,GAAI,EAAKQ,WACV,OAAOC,EAEN,GAAI,EAAKL,YACV,OAAOO,EAGf,OAAOD,EAZO,GAclB,OAAO1Q,GAAc,SAAC2B,EAAKC,GACvBia,EAAc7Z,QAAUJ,EACxBia,EAAc9Z,UAAY4Y,EAAUld,KAAK,EAAMkE,OYgOvD,GAAOzC,UAAU6W,kBTtQgB,SAA2BvV,EAAQjC,EAAO+G,EAAI0W,GAA9C,WAE7Bzd,EAAQ+G,EAAK/G,EAAM+G,GAAM/G,EACzB,IAAMsd,EAAgBnb,KAAKgB,YAAYuI,MAAMzJ,GAAQsb,WACjDpb,KAAKW,KAAKY,SAAS1D,EAAO+G,GAC1B0W,GAGErB,EAAY,WACd,IAAsC,IAAlC,EAAKlF,2BAAuE,IAAjC,EAAKC,wBAAmC,CACnF,GAAI,EAAKlF,YAAc,EAAKJ,YACxB,OAAO8C,GAEN,GAAI,EAAK1C,WACV,OAAO6C,GAEN,GAAI,EAAKjD,YACV,OAAOkD,GAIf,OAAOC,GAbO,GAgBlB,OAAOvT,GAAa,SAAC2B,EAAKC,GACtBia,EAAc7Z,QAAUJ,EACxBia,EAAc9Z,UAAY4Y,EAAUld,KAAK,EAAMkE,OS6OvD,GAAOzC,UAAU+W,kBFtQgB,SAA2BzV,EAAQyb,GAAnC,WAEzBtC,EAAOjZ,KAAK8P,WACV6F,EAAa,SAACsF,GACH,IAAThC,EACC,EAAgBtJ,WAAWsL,KAG1BhC,GAGVjZ,KAAK0S,eAAiB,SAAClD,GACnB,OAAO+L,EAAIzG,KAAKtF,EAAOrR,MACnB,EAAKiX,qBAAqB9K,MAAMkF,EAAO3R,QAG/C,IAAMsd,EAAgBnb,KAAKgB,YAAYuI,MAAMzJ,GAAQsb,aAE/CnB,EAAY,WACd,IAAsC,IAAlC,EAAKlF,2BAAuE,IAAjC,EAAKC,wBAAmC,CACnF,GAAI,EAAKlF,YAAc,EAAKJ,YACxB,OAAOoG,GAEN,GAAI,EAAKhG,WACV,OAAOiG,GAEN,GAAI,EAAKrG,YACV,OAAOsG,GAGf,OAAOC,GAZO,GAelB,OAAO3W,GAAa,SAAC2B,EAAKC,GACtBia,EAAc7Z,QAAUJ,EACxBia,EAAc9Z,UAAY4Y,EAAUld,KAAK,EAAMkE,EAAK0U,OEqO5D,GAAOnX,UAAU8Y,gCEzP6B,WACtCtX,KAAKiJ,MAAMkQ,QACXnZ,KAAK+U,0BAA2B,GAEhC/U,KAAKiJ,MAAMgQ,OACXjZ,KAAKgV,yBAA0B,IFqPvC,GAAOxW,UAAU4a,cE5QY,sBACrBpZ,KAAKiJ,MAAMqJ,KACXtS,KAAK2P,WAAa,SAAC9R,GACf,IAAIgC,EAEJ,IAAKA,KADL,EAAK8R,cAAcnD,gBAAgB,EAAKvF,MAAMqJ,KAAMzU,GACjC,EAAKoL,MAAMqJ,KAC1BzU,EAAMgC,GAAc,EAAK8R,cAAc/C,UAAU/O,GAAYmP,WAEjE,EAAKnH,QAAQ1H,KAAKtC,IAItBmC,KAAK2P,WAAa,SAAC9R,GACf,EAAKgK,QAAQ1H,KAAKtC,KFgQ9B,GAAOW,UAAU6b,iBElPe,WAC5B,IAAImB,EAAQxb,KAAK6H,QAEjB7H,KAAK6H,QAAU,KAGf,IAFA,IAAM1J,EAAM6B,KAAKC,aACXwb,EAAe,GACZ7e,EAAI,EAAG8e,EAAMF,EAAM5S,OAAQhM,EAAI8e,EAAK9e,IACzC6e,EAAaD,EAAM5e,GAAGuB,IAAQqd,EAAM5e,GAGxC,IAAK,IAAMA,KADX4e,EAAQ,GACQC,EACZD,EAAMrb,KAAKsb,EAAa7e,IAE5BoD,KAAK6H,QAAU2T,GFsOnB,GAAOhd,UAAUob,iBD3Qe,WAC5B,OAAO,IAAI,GAAK5Z,MAAM4M,WC2Q1B,GAAOpO,UAAUgZ,yBV5QuB,WACpC,GAAIxX,KAAKiJ,MAAM0S,SAAU,CACrB,IAAMpC,EAAU,GACV/X,EAASxB,KAAK6H,QAAQ,GAC5B,IAAK,IAAM1J,KAAOqD,EACd+X,EAAQpZ,KAAKhC,GAEjB,IAAM8B,EAAaD,KAAKC,aACpBsJ,EAAQgQ,EAAQ7S,QAAQzG,GAC5BsZ,EAAQ7P,OAAOH,EAAO,GACtBvJ,KAAKiJ,MAAMsQ,QAAUA,EAAQ3Q,OAAS,EAAI2Q,EAAU,KAEpDvZ,KAAKiJ,MAAMsQ,QACPvZ,KAAKiJ,MAAM2S,UACX5b,KAAK6b,0BAGL7b,KAAK8b,iBAGJ9b,KAAKiJ,MAAM2S,WAChB5b,KAAK+b,uBUwPb,GAAOvd,UAAU+Y,eVnGa,WAC1B,IAAMvF,EAAQhS,KAAKiJ,MAAM+I,MACzB,GAAIA,GAAShS,KAAK6H,QAAQe,OAAS,IAAM5I,KAAK6Y,OAAQ,CAClD,IAAMmD,EAAiB3T,EAAY2J,GACnC,GAAIgK,IAAmBld,EAAUxB,OAC7B2U,GAASlV,KAAKiD,KAAMgS,QAEnB,GAAIgK,IAAmBld,EAAUyJ,MAAO,CACzC0J,GAASlV,KAAKiD,KAAMgS,EAAM,IAC1B,I,eAASpV,EAAO,GAEZ,IAAMqf,EAAmBjK,EAAMpV,EAAI,GAAGuV,GAChC+J,EAAgClK,EAAMpV,GACxCuf,EAAsBD,EAAkB/J,GACtCiK,EAAoBhM,EAAmBrT,KAAK,EAAMof,GACxD,GAAyB,MAArBC,EAA2B,CAC3BD,EAAsBC,EAAkBjf,KACxC+e,EAAkBna,KAAOmQ,GAAcgK,EAAkBna,MACzD,IAAM,EAAcgQ,GAAkBqK,EAAmBF,GACzD,EAAKrU,QAAQuK,MAAK,SAACxB,EAAGC,GAClB,OAAID,EAAEqL,KAAsBpL,EAAEoL,GACnB,EACHrL,EAAEuL,GACFtL,EAAEsL,IAEH,O,OAhBVvf,EAAI,EAAG,EAAUoV,EAAcpJ,OAAQhM,EAAI,EAAQA,I,EAAnDA,MU2FrB,GAAO4B,UAAUud,oBVlEkB,WAC/B,IAGIM,EAHEb,EAAQxb,KAAK6H,QACbyU,EAAcd,EAAM5S,OACpBf,EAAU,GAGhB7H,KAAK6H,aAAUqC,EACf,IAAMqS,EAAW,WACb,IAAI/a,EAAS,EACb,IAAK,IAAM5E,KAAK4e,EACZha,GAAUga,EAAM5e,GAAGyf,GAAqB,EAAI,EAEhD,OAAO7a,GAELgb,EAAS,WACX,IAAIhb,EAAS,EACb,IAAK,IAAM5E,KAAK4e,EACZha,EAASA,EAASga,EAAM5e,GAAGyf,GACvB7a,EAASga,EAAM5e,GAAGyf,GAE1B,OAAO7a,GAELib,EAAS,WACX,IAAIjb,EAASkb,IAAU7e,EAAQ6e,IAC/B,IAAK,IAAM9f,KAAK4e,EAGZha,EAASA,GAFT3D,EAAQ2d,EAAM5e,GAAGyf,GACbb,EAAM5e,GAAGyf,GAAqBK,KACRlb,EAAS3D,EAEvC,OAAO2D,GAELmb,EAAS,WACX,IAAInb,EAAS,EACb,IAAK,IAAM5E,KAAK4e,EACZha,GAAUga,EAAM5e,GAAGyf,GAEvB,OAAO7a,GAELob,EAAS,WACX,IAAIpb,EAAS,EACb,IAAK,IAAM5E,KAAK4e,EACZha,GAAUga,EAAM5e,GAAGyf,GAEvB,OAAO7a,EAAS8a,GAEpB,IAAK,IAAM1R,KAAQ5K,KAAKiJ,MAAM2S,UAAW,CACrC,IAAMiB,EAAkB7c,KAAKiJ,MAAM2S,UAAUhR,GACvCkS,EAAmBzU,EAAYwU,GACjCE,OAAmB,EACvB,OAAQnS,GACJ,IAAK,QACDmS,EAAsBR,EAAU,MACpC,IAAK,MACDQ,EAAsBP,EAAQ,MAClC,IAAK,MACDO,EAAsBN,EAAQ,MAClC,IAAK,MACDM,EAAsBJ,EAAQ,MAClC,IAAK,MACDI,EAAsBH,EAE9B,OAAQE,GACJ,KAAKhe,EAAUmS,OAEXpJ,EAAW+C,EAAI,KADfyR,EAAoBQ,GACgB,KAAOE,IAC3C,MACJ,KAAKje,EAAUyJ,MACX,IAAK,IAAMpK,KAAO0e,EAEdhV,EAAW+C,EAAI,KADfyR,EAAoBQ,EAAgB1e,IACA,KAAO4e,KAM3D,IAAK,IAAMnS,KAAQ/C,EACf2T,EAAM,GAAG5Q,GAAQ/C,EAAQ+C,GAE7B5K,KAAK6H,QAAU,CAAC2T,EAAM,KUX1B,GAAOhd,UAAUqd,wBG5NsB,WACnC,IAAMmB,EAAShd,KAAKiJ,MAAMsQ,QACtBiC,EAAQxb,KAAK6H,QAEjB7H,KAAK6H,aAAUqC,EACf,IAIIX,EACA0T,EACApf,EACAwe,EAPEa,EAAY,GAEZC,EAAend,KAAKiJ,MAAM2S,UAM1BwB,EAAqB,WACvB,IAAMb,EAAW,WAMb,OAHA1e,GAFAA,EAAQqf,EAAUD,IAEFpf,EAAM,SAAWwe,EAAoB,KAAO,EAE5Dxe,GAAS2d,EAAMjS,GAAO8S,GAAqB,EAAI,GAG7CG,EAAS,WAOX,OAJA3e,GAFAA,EAAQqf,EAAUD,IAEFpf,EAAM,OAASwe,EAAoB,KAAO,EAC1Db,EAAMjS,GAAO8S,GAAqBb,EAAMjS,GAAO8S,GAC3Cb,EAAMjS,GAAO8S,GAAqB,EAE/Bxe,EAAQ2d,EAAMjS,GAAO8S,GAAqBxe,EAAQ2d,EAAMjS,GAAO8S,IAEpEI,EAAS,WAOX,OAJA5e,GAFAA,EAAQqf,EAAUD,IAEFpf,EAAM,OAASwe,EAAoB,KAAOK,IAC1DlB,EAAMjS,GAAO8S,GAAqBb,EAAMjS,GAAO8S,GAC3Cb,EAAMjS,GAAO8S,GAAqBK,IAE/B7e,EAAQ2d,EAAMjS,GAAO8S,GAAqBxe,EAAQ2d,EAAMjS,GAAO8S,IAEpEM,EAAS,WAMX,OAHA9e,GAFAA,EAAQqf,EAAUD,IAEFpf,EAAM,OAASwe,EAAoB,KAAO,EAE1Dxe,GAAS2d,EAAMjS,GAAO8S,GAAqBb,EAAMjS,GAAO8S,GAAqB,GAG3EO,EAAS,WAGX,IAAIS,GAFJxf,EAAQqf,EAAUD,IAEQpf,EAAM,OAASwe,EAAoB,KAAO,EAEpEgB,GAAe7B,EAAMjS,GAAO8S,GAAqBb,EAAMjS,GAAO8S,GAAqB,EACnFb,EAAMjS,GAAO,OAAS8S,EAAoB,KAAOgB,EAEjDxf,EAAQA,EAAQA,EAAM,SAAWwe,EAAoB,KAAO,EAE5Dxe,GAAS2d,EAAMjS,GAAO8S,GAAqB,EAAI,EAC/Cb,EAAMjS,GAAO,SAAW8S,EAAoB,KAAOxe,GAEvD,IAAK,IAAM+M,KAAQuS,EAAc,CAC7B,IAAMN,EAAkBM,EAAavS,GAC/BkS,EAAmBzU,EAAYwU,GACjCE,OAAmB,EACvB,OAAQnS,GACJ,KAAK3L,EAAagM,MACd8R,EAAsBR,EACtB,MACJ,KAAKtd,EAAaqe,IACdP,EAAsBP,EACtB,MACJ,KAAKvd,EAAase,IACdR,EAAsBN,EACtB,MACJ,KAAKxd,EAAaue,IACdT,EAAsBJ,EACtB,MACJ,KAAK1d,EAAawe,IACdV,EAAsBH,EAG9B,OAAQE,GACJ,KAAKhe,EAAUmS,OACXoL,EAAoBQ,EACpBrB,EAAMjS,GAAUqB,EAAI,IAAIyR,EAAiB,KAAOU,IAChD,MACJ,KAAKje,EAAUyJ,MACX,IAAK,IAAMe,KAAQuT,EACfR,EAAoBQ,EAAgBvT,GACpCkS,EAAMjS,GAAUqB,EAAI,IAAIyR,EAAiB,KAAOU,OAMpE,GAAI1U,EAAY2U,KAAYle,EAAUmS,OAClC,IAAK1H,KAASiS,EACVyB,EAASzB,EAAMjS,GAAOyT,GACtBI,IACAF,EAAUD,GAAUzB,EAAMjS,QAI9B,IAAKA,KAASiS,EAAO,CAEjB,IAAK,IAAM1b,KADXmd,EAAS,GACYD,EACjBC,GAAUzB,EAAMjS,GAAOyT,EAAOld,IAElCsd,IACAF,EAAUD,GAAUzB,EAAMjS,GAMlC,IAAK,IAAM3M,KADX4e,EAAQ,GACQ0B,EACZ1B,EAAMrb,KAAK+c,EAAUtgB,IAGzB,GAAIugB,EAAaO,IACb,GAAIrV,EAAY8U,EAAaO,OAAS5e,EAAUmS,OAC5C,IAAK1H,KAASiS,EAAO,CACjB,IAAMmC,EAAYnC,EAAMjS,GAAO,OAAS4T,EAAaO,IAAM,KACvDE,EAAcpC,EAAMjS,GAAO,SAAW4T,EAAaO,IAAM,KAC7DlC,EAAMjS,GAAO,OAAS4T,EAAaO,IAAM,KAAOC,EAAYC,EACxDT,EAAaU,QAAUV,EAAaO,YAC7BlC,EAAMjS,GAAO,SAAW4T,EAAaO,IAAM,KAElDP,EAAaW,MAAQX,EAAaO,YAC3BlC,EAAMjS,GAAO,OAAS4T,EAAaO,IAAM,SAIvD,CACD,IAAMK,EAAoB1V,EAAY8U,EAAaU,SAAW/e,EAAUmS,OAClE+M,EAAkB3V,EAAY8U,EAAaW,OAAShf,EAAUmS,OACpE,IAAK1H,KAASiS,EACV,IAAK,IAAM1b,KAAUqd,EAAaO,IAAY,CAC1C,IAAMO,EAAYd,EAAaO,IAAI5d,GAC/Bge,EAAMtC,EAAMjS,GAAO,OAAS0U,EAAY,KACxCJ,EAAQrC,EAAMjS,GAAO,SAAW0U,EAAY,KAChDzC,EAAMjS,GAAO,OAAS0U,EAAY,KAAOH,EAAMD,EAE3CE,IACIZ,EAAaU,QAAUI,IAGyB,IAA3Cd,EAAaU,MAAMnX,QAAQuX,YAFzBzC,EAAMjS,GAAO,SAAW0U,EAAY,KAO/CD,IACIb,EAAaW,MAAQG,IAGyB,IAAzCd,EAAaW,IAAIpX,QAAQuX,YAFvBzC,EAAMjS,GAAO,OAAS0U,EAAY,MAUjEje,KAAK6H,QAAU2T,GHwDnB,GAAOhd,UAAUsd,eGjRa,WAC1B,IAAMvC,EAAUvZ,KAAKiJ,MAAMsQ,QACvBiC,EAAQxb,KAAK6H,QACXqV,EAAY,GAGlB,GADAld,KAAK6H,QAAU7H,KAAKiJ,MAAMsQ,QAAU,KAChClR,EAAYkR,KAAaza,EAAUxB,OACnC,GAAI+K,EAAYkR,KAAaza,EAAUmS,OACnC,IAAK,IAAMrU,KAAK4e,EACZ0B,EAAU1B,EAAM5e,GAAG2c,IAAsBiC,EAAM5e,OAGlD,CACD,IAAIqgB,OAAM,EACV,IAAK,IAAMrgB,KAAK4e,EAAO,CAEnB,IAAK,IAAM1b,KADXmd,EAAS,GACY1D,EACjB0D,GAAUzB,EAAM5e,GAAG2c,EAAQzZ,IAE/Bod,EAAUD,GAAUzB,EAAM5e,SAMlC,GAAwB,IADAU,OAAO4O,KAAKqN,GAAS3Q,OAClB,CACvB,IAAMsV,EAAgB3P,EAAkBgL,GAExC,IAAK,IAAM3c,KADXoD,KAAK2R,cAAchD,iBAAiB4K,EAAS2E,GAC7B1C,EACZ0B,EAAUld,KAAK2R,cAAcpH,SAASiR,EAAM5e,IAAIoS,YAAcwM,EAAM5e,OAGvE,CACGqgB,OAAM,EACV,IAAK,IAAMrgB,KAAK4e,EAAO,CAGnB,IAAK,IAAM1b,KAFXmd,EAAS,GACTjd,KAAK2R,cAAcnD,gBAAgB+K,EAASiC,EAAM5e,IAC7B2c,EACjB0D,GAAUjd,KAAK2R,cAAc/C,UAAU9O,GAAQkP,WAEnDkO,EAAUD,GAAUzB,EAAM5e,IAMtC,IAAK,IAAMA,KADX4e,EAAQ,GACQ0B,EACZ1B,EAAMrb,KAAK+c,EAAUtgB,IAEzBoD,KAAK6H,QAAU2T,GCjDZ,I,0dCQP,eAMI,WAAYvS,EAAmBtI,GAA/B,MACI,cAAO,K,OAJX,EAAAwd,YAAsB,EAKlB,EAAKlV,MAAQA,EACb,EAAKtI,KAAOA,EACZ,EAAKF,UAAYwI,EAAM6C,K,EAsD/B,OAhE2B,QAavB,YAAAc,QAAA,SAAQhL,GAAR,WACI5B,KAAK4B,GAAKA,EACV,IAAMwc,EAAc,IAAI,EAAYxc,GAC9BqH,EAAQjJ,KAAKiJ,MACbC,EAAMkV,EAAYvT,SAAS9L,EAAIkM,MAAOhC,GAC5C,GAAIC,EACA,OAAO1B,EACH0B,GAGR,IACI,IACMmV,EAAoB,WACtB,IAAMC,EAAiB,IAAI,GAAO,EAAKrV,MAAsB,EAAKtI,MAElE,OADA2d,EAAe1W,UAAY,EAAKA,UACzB0W,EAAe1R,QAAQhL,GAAIkL,MAAK,SAAAjF,GACnC,EAAKsW,YAActW,EAAQe,WAoBnC,OAjBA5I,KAAKwZ,oBACa,MAAdvQ,EAAMqH,KACa,MAAfrH,EAAM0C,MACD1C,EAAM0C,MAAqB8O,IAAMjS,EAAQxI,KAAKiJ,MAAM0C,OAC5C0S,IAGAre,KAAKiV,iBAITjV,KAAK2Z,6BAIT0E,KAECvR,MAAK,SAAAC,GACf,OAAO,EAAKoR,eAGpB,MAAOjW,GACHlI,KAAKiI,YAAYC,KAIjB,YAAAsR,iBAAR,WACSxZ,KAAK4H,WACN5H,KAAKW,KAAKE,kBAAkB,CAACb,KAAKiJ,MAAM6C,MAAO5M,EAASsb,UAE5Dxa,KAAKgB,YAAchB,KAAKW,KAAKK,YAAYhB,KAAKiJ,MAAM6C,OAE5D,EAhEA,CAA2B,IAkE3B,GAAMtN,UAAUmb,2BD1E0B,eAClC4E,EAYQ,EAb0B,OAEhCtE,EACE,EAAKjZ,YAAY6c,OACjBU,EAAe,EAAKvd,YAAY6c,QACzB,SAACpL,GACJ,OAAO,WACF,EAAe0L,YAAcI,EAAa/c,OAC3CiR,QAMR8L,EAAe,EAAKvd,YAAYoa,aACzB,SAAC3I,GACJ,OAAO,SAACtM,IACJ,EAASA,EAAEC,OAAO5E,WAEX,EAAe2c,YAClB,EAAOvO,YAGP6C,OAMpB,OAAOnT,GAAQ,SAAC2B,EAAKC,GACjBqd,EAAajd,QAAUJ,EACvBqd,EAAald,UAAY4Y,EAAUhZ,OC4C3C,GAAMzC,UAAU6W,kBC1EiB,SAA2BvV,EAAQjC,EAAO+G,GAA1C,IAEzBuW,EACA3L,EAHyB,OAM7B,OALA3R,EAAQ+G,EAAK/G,EAAM+G,GAAM/G,EAKlByB,GAAQ,SAAC2B,EAAKC,GACmB,IAAhCoN,EAAU,EAAKrF,MAAM0C,QAAgB,EAAK3K,YAAY6c,OACtD1C,EAAgB,EAAKna,YAAYuI,MAAMzJ,GAAQ+d,MAAM,EAAKld,KAAKY,SAAS1D,EAAO+G,KACjEvD,UAAY,WACrB,EAAe8c,YAAchD,EAAc3Z,OAC5CP,MAIJka,EAAgB,EAAKna,YAAYuI,MAAMzJ,GAAQsb,WAAW,EAAKza,KAAKY,SAAS1D,EAAO+G,KACtEvD,UAAY,SAAC8E,IACvBqJ,EAASrJ,EAAEC,OAAO5E,SAEV,EAAK4T,qBAAqB9K,MAAMkF,EAAO3R,UACpC,EAAesgB,YAEtB3O,EAAOI,YAGP3O,KAIZka,EAAc7Z,QAAUJ,MD8ChC,GAAM1C,UAAU+W,kBE5EiB,SAA2BzV,EAAgByb,GAA3C,IACzB/L,EADyB,OAEvB2L,EAAgBnb,KAAKgB,YAAYuI,MAAMzJ,GAAQsb,aAKrD,OAJApb,KAAK0S,eAAiB,SAAClD,GACnB,OAAO+L,EAAIzG,KAAKtF,EAAOrR,MACnB,EAAKiX,qBAAqB9K,MAAMkF,EAAO3R,QAExCyB,GAAQ,SAAC2B,EAAKC,GACjBia,EAAc7Z,QAAUJ,EACxBia,EAAc9Z,UAAY,SAAC8E,IACvBqJ,EAASrJ,EAAEC,OAAO5E,SAEV,EAAKkR,eAAelD,MACjB,EAAe2O,YAEtB3O,EAAOI,YAGP3O,SF2DhB,GAAMzC,UAAUgX,eG7Ec,SAA2B1V,EAAQqJ,GAAnC,IACtBqG,EADsB,OAEpB0L,EAAclb,KAAKgB,YAAYuI,MAAMzJ,GA+B3C,OAAOuH,EACH8B,EAAOrH,KAAI,SAAUmZ,GACjB,OAhCoCpd,EAgClBod,EA/BhB1Z,EAAW,EAAKZ,KAAKY,SAAS1D,GAChC,EAAKmD,YAAY6c,MACVve,GAAQ,SAAC2B,EAAKC,GACjB,IAAMia,EAAgBD,EAAY2C,MAAMtc,GACxC4Z,EAAc9Z,UAAY,SAAC8E,GACvB,EAAKgY,aAAehY,EAAEC,OAAO5E,OAC7BP,KAEJka,EAAc7Z,QAAUJ,KAGzB5B,GAAc,SAAC2B,EAAKC,GACvB,IAAMia,EAAgBD,EAAYE,WAAW7Z,GAC7C4Z,EAAc9Z,UAAY,SAAC8E,IACvBqJ,EAASrJ,EAAEC,OAAO5E,SAEV,EAAK4T,qBAAqB9K,MAAMkF,EAAO3R,UACrC,EAAKsgB,YAEX3O,EAAOI,YAGP3O,KAGRka,EAAc7Z,QAAUJ,KA1BW,IAACrD,EAClC0D,OCLP,IAAMid,GAAc,SAACC,EAAeC,GACvC,IAAK,IAAMvgB,KAAOsgB,EACd,GAAIpW,EAAYoW,EAActgB,MAAUW,EAAUxB,OAC9CohB,EAAYvgB,GAAOsgB,EAActgB,QAGjC,IAAK,IAAMyG,KAAM6Z,EAActgB,GAAM,CACjC,OAAQyG,GACJ,IAAK,IAAK8Z,EAAYvgB,IAAQsgB,EAActgB,GAAKyG,GAAK,MACtD,IAAK,IAAK8Z,EAAYvgB,IAAQsgB,EAActgB,GAAKyG,GAAK,MACtD,IAAK,IAAK8Z,EAAYvgB,IAAQsgB,EAActgB,GAAKyG,GAAK,MACtD,IAAK,IAAK8Z,EAAYvgB,IAAQsgB,EAActgB,GAAKyG,GAAK,MACtD,IAAK,SAAU8Z,EAAYvgB,GAAKgC,KAAKse,EAActgB,GAAKyG,IAAM,MAC9D,QAAS8Z,EAAYvgB,GAAOsgB,EAActgB,GAE9C,MAIZ,OAAOugB,G,0dCVX,eAGI,WAAYzV,EAAoBtI,GAAhC,MACI,cAAO,K,OACP,EAAKsI,MAAQA,EACb,EAAKtI,KAAOA,EACZ,EAAKF,UAAYwI,EAAMyC,G,EA8D/B,OArE4B,QAUxB,YAAAkB,QAAA,SAAQhL,GAAR,WACI5B,KAAK4B,GAAKA,EACV,IAAMqH,EAAqBjJ,KAAKiJ,MAChC,IACI,IACMC,EADc,IAAI,EAAYtH,GACZiJ,SAAS9L,EAAIsM,OAAQpC,GAC7C,GAAIC,EAAK,OAAO1B,EAAc0B,GAE9BlJ,KAAK2e,kBAaL,OAXmB,MAAf1V,EAAM0C,MACD1C,EAAM0C,MAAqB8O,IAAMjS,EAAQS,EAAM0C,OACtC3L,KAAK4e,uBAGL5e,KAAKiV,iBAITjV,KAAK2Z,8BAEJ7M,MAAK,WAChB,OAAO,EAAKnF,eAGpB,MAAOO,GACH,OAAOlI,KAAKiI,YAAYC,KAIxB,YAAA0W,qBAAR,sBACU3V,EAAqBjJ,KAAKiJ,MAC1B4V,EAAe,IAAI,GAAO,CAC5B/S,KAAM7C,EAAMyC,GACZC,MAAO1C,EAAM0C,MACbmT,WAAY7V,EAAM6V,YACJ9e,KAAKW,MAEvB,OADAke,EAAajX,UAAY5H,KAAK4H,UACvBiX,EAAajS,QAAQ5M,KAAK4B,IAAIkL,MAAK,SAACjF,G,QACjC1J,EAAM,EAAK8B,WAAWgJ,EAAMyC,IAC5BqT,EAAU,GAChBlX,EAAQpB,SAAQ,SAAC5I,GACbkhB,EAAQ5e,KAAKtC,EAAMM,OAEvB0J,EAAU,KACV,IAAMmX,IAAQ,MAAM7gB,KAAG,MAAMc,EAAasV,IAAKwK,EAAO,GAAE,GAGxD,OAFA,EAAK9V,MAAM0C,MAAQqT,EACnB,EAAKL,kBACE,EAAK1J,qBAIZ,YAAA0J,gBAAR,WACI,IAAMle,EAAaT,KAAKiJ,MAAcyC,GACjC1L,KAAK4H,WACN5H,KAAKW,KAAKE,kBAAkB,CAACJ,IAEjCT,KAAKgB,YAAchB,KAAKW,KAAKK,YAAYP,IAEjD,EArEA,CAA4B,IAuE5B,GAAOjC,UAAUmb,2BC9EyB,sBAChCwB,EAAgDnb,KAAKgB,YAAYoa,aACjE7Q,EAAYvK,KAAKiJ,MAAcvI,IACrC,OAAOpB,GAAc,SAAC2B,EAAKC,GACvBia,EAAc9Z,UAAY,SAAC8E,GACvB,IAAMqJ,EAA8BrJ,EAAUC,OAAO5E,OACrD,GAAIgO,EACA,IACI,IAAMyP,EAAsBzP,EAAO0P,OAAOV,GAAYjU,EAAUiF,EAAO3R,QACvEohB,EAAoB5d,UAAY,aAC1B,EAAKsG,YACP6H,EAAOI,YAEXqP,EAAoB3d,QAAUJ,EAChC,MAAOgH,GACLhH,EACIgH,QAKRjH,KAGRka,EAAc7Z,QAAUJ,MDuDhC,GAAO1C,UAAU6W,kBEhFgB,SAAwBvV,EAAQjC,EAAO+G,GAAvC,WAE7B/G,EAAQ+G,EAAK/G,EAAM+G,GAAM/G,EACzB,IAAMsd,EAAgBnb,KAAKgB,YAAYuI,MAAMzJ,GAAQsb,WAAWpb,KAAKW,KAAKY,SAAS1D,EAAO+G,IACpF2F,EAAYvK,KAAKiJ,MAAcvI,IACrC,OAAOpB,GAAc,SAAC2B,EAAKC,GACvBia,EAAc9Z,UAAY,SAAC8E,GACvB,IAAMqJ,EAA6BrJ,EAAEC,OAAO5E,OAC5C,GAAIgO,EACA,GAAI,EAAK4F,qBAAqB9K,MAAMkF,EAAO3R,OACvC,IACI,IAAMohB,EAAsBzP,EAAO0P,OAAOV,GAAYjU,EAAUiF,EAAO3R,QACvEohB,EAAoB5d,UAAY,aAC1B,EAAKsG,YACP6H,EAAOI,YAEXqP,EAAoB3d,QAAUJ,EAChC,MAAOgH,GACLhH,EACIgH,QAKRsH,EAAOI,gBAIX3O,KAGRka,EAAc7Z,QAAUJ,MFkDhC,GAAO1C,UAAU+W,kBGjFgB,SAAwBzV,EAAgByb,GAAxC,IACzB/L,EADyB,OAEvB2P,EAAoBnf,KAAKgB,YAAYuI,MAAMzJ,GAAQsb,aACzDpb,KAAK0S,eAAiB,SAAClD,GACnB,OAAO+L,EAAIzG,KAAKtF,EAAOrR,MACnB,EAAKiX,qBAAqB9K,MAAMkF,EAAO3R,QAE/C,IAAM0M,EAAYvK,KAAKiJ,MAAcvI,IACrC,OAAOpB,GAAc,SAAC2B,EAAKC,GAEvBie,EAAkB9d,UAAY,SAAC8E,GAE3B,GADAqJ,EAASrJ,EAAEC,OAAO5E,OAEd,GAAI,EAAKkR,eAAelD,GACpB,IACI,IAAMyP,EAAsBzP,EAAO0P,OAAOV,GAAYjU,EAAUiF,EAAO3R,QACvEohB,EAAoB5d,UAAY,aAC1B,EAAKsG,YACP6H,EAAOI,YAEXqP,EAAoB3d,QAAUJ,EAChC,MAAOgH,GACLhH,EACIgH,QAKRsH,EAAOI,gBAKX3O,KAGRke,EAAkB7d,QAAUJ,MH8CpC,GAAO1C,UAAUgX,eIjFa,SAAwB1V,EAAQqJ,GAAhC,WACpB+R,EAAclb,KAAKgB,YAAYuI,MAAMzJ,GACrCmJ,EAAqBjJ,KAAKiJ,MAoChC,OAAO5B,EACH8B,EAAOrH,KAAI,SAAUmZ,GACjB,OArCoCpd,EAqClBod,EApCf3b,GAAQ,SAAC2B,EAAKC,GACjB,IAAMia,EAAgBD,EAAYE,WAAW,EAAKza,KAAKY,SAAS1D,IAChEsd,EAAc9Z,UAAY,SAAC8E,GACvB,IAAMqJ,EAA6BrJ,EAAEC,OAAO5E,OAC5C,GAAIgO,EAAQ,CACR,IAAM,EAAQA,EAAO3R,MACrB,GAAI,EAAKuX,qBAAqB9K,MAAM,GAChC,IACI,IAAM2U,EAAsBzP,EAAO0P,OAAOV,GAAYvV,EAAMvI,IAAK,IACjEue,EAAoB5d,UAAY,aAC1B,EAAKsG,YACP6H,EAAOI,YAEXqP,EAAoB3d,QAAUJ,EAElC,MAAOgH,GACHhH,EACIgH,QAMRsH,EAAOI,gBAIX3O,KAGRka,EAAc7Z,QAAUJ,KA/BW,IAACrD,O,+qBCHhD,eAEI,WAAYuhB,EAA8Bze,GAA1C,MACI,cAAO,K,OACP,EAAKsI,MAAQmW,EACb,EAAKze,KAAOA,E,EAuIpB,OA5I+B,QAQ3B,YAAAiM,QAAA,SAAQhL,GAAR,WACI5B,KAAK4B,GAAKA,EACV,IAcIyd,EAiBAnJ,EA/BEkJ,EAA+Bpf,KAAKiJ,MACtCM,EAAQ,EACR+V,EAAU,GACVC,EAAc,GACdC,GAAsB,EACpBC,EAAUL,EAAaK,QACvBC,EAAcD,EAAQ7W,OAS5B,GARA6W,EAAQpW,OAAM,SAAC4C,EAAKrP,GAChB,QAAIA,EAAI,EAAI8iB,GAAezT,EAAIH,OAAS2T,EAAQ7iB,EAAI,GAAGkP,QACnD0T,GAAsB,GACf,MAKXA,EAAqB,CACrB,IAAM,EAAOxf,KAAKC,WAAWwf,EAAQ,GAAG3T,MACxCuT,EAAa,SAACpE,GACV,OAAOA,EAAI,SAIfoE,EAAa,SAACpE,GACV,IAAI0E,EAAe,GACnB,IAAK,IAAMxhB,KAAO8c,EACd0E,GAAgB1E,EAAI9c,GAExB,OAAOwhB,GAKf,IAAMC,EAAY,WACd,GAAIrW,EAAQmW,EAER,OADAxJ,EAAS,IAAI,GAAOuJ,EAAQlW,GAAQ,EAAK5I,OAC3BiM,QAAQ,EAAKhL,IAAIkL,MAAK,SAAC+S,GAejC,OAdAP,EAAU,GACVO,EAAapZ,SAAQ,SAAAwU,GACjB,IAAM0E,EAAeN,EAAWpE,GAClB,IAAV1R,EACAgW,EAAYI,GAAgB1E,EACQ,MAA7BsE,EAAYI,KACnBL,EAAQK,GAAgB1E,MAG5B1R,EAAQ,IACRgW,EAAc,MAAKD,MAGrB/V,EACKqW,OAIX,IAeI,EAfE,EAAU,GACZE,OAAY,EACZ,EAAOV,EAAanG,KAClB,EAAQmG,EAAajG,MAWvB,GAAiB,EAEf,EAAa,WACf,EAAQhZ,KAAKmf,EAAQ,KAEnB,EAAoB,WAClB,EAAQ1W,OAAS,EACjB,IAGA,GAAiB,GAGnB,EAAc,SAACkP,GACJ,IAAT,EACAA,MAGE,GA0BV,GAtBIgI,EADAV,EAAanG,MAAQmG,EAAajG,MACnB,WACX,GAAY,WACR,QAKHiG,EAAajG,MACH,EAEViG,EAAanG,KACH,WACX,GAAY,WACR,QAKO,WACX,KAGJ,GACA,IAAK,KAAOqG,EAER,GADAQ,EAAa,GACT,EACA,WAKR,IAAK,KAAOR,EACRQ,EAAa,GAGrB,OAlEI5J,EAAgB,QAAI,EACpB5Y,OAAOyiB,OAAO7J,EAAOjN,MAAO,CACxB+I,MAAOoN,EAAapN,MACpB1B,KAAM,KAEV4F,EAAOqB,iBACPrB,EAAOsB,2BACCtB,EAAiB,SA8DrC,OAAO0J,KAEf,EA5IA,CAA+B,GCF/B,4BAqBA,OAnBI,YAAAhT,QAAA,SAAQoT,GACJ,OAAO1gB,GAAQ,SAAC2B,EAAKC,GACjB,IAAM+e,EAAgBja,UAAUka,eAAeF,GAC/CC,EAAcE,UAAY,WACtB,IAAMjX,EAAM,IAAI,EAAUtK,EAAW+E,WACrC,OAAOzC,EACHwG,EAASwB,KAGjB+W,EAAc3e,QAAU,SAAC6E,GACrB,OAAOjF,EACHwG,EAASvB,KAGjB8Z,EAAc5e,UAAY,WACtBJ,SAIhB,EArBA,G,0dCGA,eAEI,WAAYgI,EAAsBtI,GAAlC,MACI,cAAO,K,OACP,EAAKsI,MAAQA,EACb,EAAKtI,KAAOA,E,EAwDpB,OA7D2B,QAQvB,YAAAiM,QAAA,SAAQhL,GAAR,WACI5B,KAAK4B,GAAKA,EACV,IAYIyd,EAZEpW,EAAuBjJ,KAAKiJ,MAC9BM,EAAQ,EACN+V,EAAU,GACZE,GAAsB,EACpBE,EAAczW,EAAML,OAS1B,GARAK,EAAMI,OAAM,SAAC4C,EAAKrP,GACd,QAAIA,EAAI,EAAI8iB,GAAezT,EAAIH,OAAS7C,EAAMrM,EAAI,GAAGkP,QACjD0T,GAAsB,GACf,MAKXA,EAAqB,CACrB,IAAM,EAAOxf,KAAKC,WAAWgJ,EAAM,GAAG6C,MACtCuT,EAAa,SAACpE,GACV,OAAOA,EAAI,SAIfoE,EAAa,SAACpE,GACV,IAAI0E,EAAe,GACnB,IAAK,IAAMxhB,KAAO8c,EACd0E,GAAgB1E,EAAI9c,GAExB,OAAOwhB,GAIf,IAAMC,EAAY,WACd,GAAIrW,EAAQN,EAAML,OAEd,OADS,IAAI,GAAOK,EAAMM,KAAU,EAAK5I,MAC3BiM,QAAQhL,GAAIkL,MAAK,SAAC+S,GAI5B,OAHAA,EAAapZ,SAAQ,SAAAwU,GACjBqE,EAAQD,EAAWpE,IAAQA,KAExB2E,OAIX,IAAM/X,EAAU,GAChB,IAAK,IAAM1J,KAAOmhB,EACdzX,EAAQ1H,KAAKmf,EAAQnhB,IAEzB,OAAO0J,GAGf,OAAO+X,KAIf,EA7DA,CAA2B,G,0dCM3B,eAII,WACI3W,EAAoBtI,GADxB,MAGI,cAAO,K,OACP,EAAKsI,MAAQA,EACb,EAAKtI,KAAOA,EACZ,EAAKF,UAAYwI,EAAM6C,K,EAoG/B,OA9G4B,QAaxB,YAAAc,QAAA,SAAQhL,GAAR,WACI5B,KAAK4B,GAAKA,EACV,IAAMwc,EAAc,IAAI,EAAYxc,GAC9BqH,EAAQjJ,KAAKiJ,MACbC,EAAMkV,EAAYvT,SAAS9L,EAAIiM,OAAQ/B,GAC7C,GAAIC,EAAK,OAAO1B,EACZ0B,GAEJ,IACIlJ,KAAKwZ,mBAaL,OAXmB,MAAfvQ,EAAM0C,MACFnD,EAAQS,EAAM0C,OACJ3L,KAAKyZ,uBAGLzZ,KAAK0Z,gBAIT1Z,KAAK2Z,8BAEJ7M,MAAK,WAChB,OAAO,EAAKnF,eAIpB,MAAOO,GACH,OAAOlI,KAAKiI,YAAYC,KAKxB,YAAAuR,qBAAR,sBACUoF,EAAe,IAAI,GAAO7e,KAAKiJ,MAAOjJ,KAAKW,MAEjD,OADAke,EAAajX,UAAY5H,KAAK4H,UACvBiX,EAAajS,QAAQ5M,KAAK4B,IAAIkL,MAAK,SAACjF,G,QACjCuY,EAAU,GACVC,EAAO,EAAKpgB,WAAW,EAAKgJ,MAAM6C,MACxCjE,EAAQpB,SAAQ,SAAC6C,GACb8W,EAAQjgB,KAAKmJ,EAAK+W,OAEtBxY,EAAU,KACV,IAAMmX,IAAQ,MAAMqB,KAAI,MAAMphB,EAAasV,IAAK6L,EAAO,GAAE,GAEzD,OADA,EAAKnX,MAAMhK,EAAaqhB,OAAStB,EAC1B,EAAKtF,oBAIZ,YAAAA,cAAR,sBAII,OAHK1Z,KAAKiJ,MAAM0C,MAAqB8O,IACjCza,KAAKugB,iBAEFvgB,KAAKiV,iBAAiBnI,MAAK,WAC9B,OAAO,EAAK6N,uBAIZ,YAAAnB,iBAAR,WACSxZ,KAAK4H,WACN5H,KAAKW,KAAKE,kBAAkB,CAACb,KAAKiJ,MAAM6C,OAE5C9L,KAAKgB,YAAchB,KAAKW,KAAKK,YAAYhB,KAAKiJ,MAAM6C,OAGhD,YAAA6O,iBAAR,WACI,GAAI3a,KAAK4a,KACL,OAAO5a,KAAK6a,mBAIZ,YAAAA,gBAAR,sBACU1c,EAAMoQ,EAAmBvO,KAAawgB,QAAQC,SACpD,GAAW,MAAPtiB,EAAa,CACb,IAAMwN,EAAQ,GAId,OAHAA,EAAMxN,GAAQ6B,KAAawgB,QAAQC,QAAQtiB,UACnC6B,KAAawgB,QAAQC,QAAQtiB,GACrC6B,KAAKiJ,MAAM0C,MAAQA,EACZ3L,KAAKiV,iBAAiBnI,MAAK,WAC9B,OAAO,EAAK6N,sBAIhB3a,KAAK4a,MAAO,GAIZ,YAAA2F,eAAR,WACIvgB,KAAK4a,MAAO,EACZ,IAAMjP,EAAQ3L,KAAKiJ,MAAM0C,MACxB3L,KAAawgB,QAAU,CACpBC,QAAS9U,EAAM8O,WAIZ9O,EAAM8O,IAErB,EA9GA,CAA4B,IAgH5B,GAAOjc,UAAUgX,eCzHa,SAAwB1V,EAAQqJ,GAAhC,WACpBuX,EAAc1gB,KAAKgB,YAAYuI,MAAMzJ,GAqB3C,OAAOuH,EACH8B,EAAOrH,KAAI,SAAUmZ,GACjB,OAtBoCpd,EAsBlBod,EArBf3b,GAAQ,SAAC2B,EAAKC,GACjB,IAAMia,EAAgBuF,EAAYtF,WAAW,EAAKza,KAAKY,SAAS1D,IAChEsd,EAAc9Z,UAAY,SAAC8E,GACvB,IAAMqJ,EAA6BrJ,EAAEC,OAAO5E,OACxCgO,GACI,EAAK4F,qBAAqB9K,MAAMkF,EAAO3R,SACvC2R,EAAO9N,WACL,EAAKiG,aAEX6H,EAAOI,YAGP3O,KAGRka,EAAc7Z,QAAUJ,KAhBW,IAACrD,ODwHhD,GAAOW,UAAUmb,2BE1HyB,eAClCnK,EADkC,OAEhC2L,EAAgBnb,KAAKgB,YAAYoa,aACvC,OAAO9b,GAAc,SAAC2B,EAAKC,GACvBia,EAAc9Z,UAAY,SAAC8E,IACvBqJ,EAASrJ,EAAEC,OAAO5E,SAEdgO,EAAO9N,WACL,EAAKiG,YACN6H,EAAeI,YAGhB3O,KAGRka,EAAc7Z,QAAUJ,MF4GhC,GAAO1C,UAAU6W,kBG3HgB,SAAwBvV,EAAQjC,EAAO+G,GAAvC,IACzB4K,EACA2L,EAFyB,OAK7B,OAFAtd,EAAQ+G,EAAK/G,EAAM+G,GAAM/G,EACzBsd,EAAgBnb,KAAKgB,YAAYuI,MAAMzJ,GAAQsb,WAAWpb,KAAKW,KAAKY,SAAS1D,EAAO+G,IAC7EtF,GAAc,SAAC2B,EAAKC,GACvBia,EAAc9Z,UAAY,SAAC8E,IACvBqJ,EAASrJ,EAAEC,OAAO5E,SAEV,EAAK4T,qBAAqB9K,MAAMkF,EAAO3R,SACvC2R,EAAO9N,WACL,EAAKiG,aAEX6H,EAAOI,YAGP3O,KAIRka,EAAc7Z,QAAUJ,MHwGhC,GAAO1C,UAAU+W,kBI5HgB,SAAwBzV,EAAgByb,GAAxC,IACzB/L,EADyB,OAEvB2L,EAAgBnb,KAAKgB,YAAYuI,MAAMzJ,GAAQsb,aAKrD,OAJApb,KAAK0S,eAAiB,SAAClD,GACnB,OAAO+L,EAAIzG,KAAKtF,EAAOrR,MACnB,EAAKiX,qBAAqB9K,MAAMkF,EAAO3R,QAExCyB,GAAc,SAAC2B,EAAKC,GACvBia,EAAc9Z,UAAY,SAAC8E,IACvBqJ,EAASrJ,EAAEC,OAAO5E,SAEV,EAAKkR,eAAelD,KACpBA,EAAO9N,WACL,EAAKiG,aAEX6H,EAAOI,YAGP3O,KAGRka,EAAc7Z,QAAUJ,M,8dClBhC,eACI,WAAYT,EAAmBE,GAA/B,MACI,cAAO,K,OACP,EAAKsI,MAAQxI,EACb,EAAKE,KAAOA,EACZ,EAAKF,UAAYA,E,EA8BzB,OAnC2B,QAQvB,YAAAmM,QAAA,SAAQhL,GAAR,WACI5B,KAAK4B,GAAKA,EACV,IAAMnB,EAAoBT,KAAKiJ,MAC1BjJ,KAAK4H,WACN5H,KAAKW,KAAKE,kBAAkB,CAACJ,EAAW,EAAWA,YAEvD,IAAMkgB,EAA2B3gB,KAAKW,KAAKK,YAAYP,GAAWmgB,QAClE,IACI,OAAOthB,GAAc,SAAC2B,EAAKC,GACvByf,EAAatf,UAAY,SAAC8E,GACtB,IAAM0a,EAAe,EAAKphB,MAAMgB,GAChC,IAAK,IAAMZ,KAAcghB,EAAalhB,mBAClCkhB,EAAalhB,mBAAmBE,GAAc,EAElD,EAAWa,IAAI,EAAWiB,SAAUC,EAAI,EAAKjB,MAAMmM,MAAK,WACpD7L,OACDgM,MAAM/L,IAGbyf,EAAarf,QAAUJ,KAG/B,MAAOgH,GACH,OAAOlI,KAAKiI,YAAYC,KAIpC,EAnCA,CAA2B,G,0dCO3B,eAUI,WAAY+D,EAAuBtL,GAAnC,MACI,cAAO,K,OAVX,EAAAkH,QAAU,GACV,EAAAiZ,SAA+B,GAC/B,EAAAC,kBAAmB,EAEnB,EAAAC,cAAe,EAOX,EAAK/X,MAAQgD,EACb,EAAKtL,KAAOA,E,EA2OpB,OAxPiC,QAgB7B,YAAAiM,QAAA,SAAQhL,GAAR,WACI5B,KAAK4B,GAAKA,EAEV,IAAMsH,EAAMlJ,KAAK6K,WACjB,OAAI3B,EAAY1B,EACZ0B,IAEJlJ,KAAKihB,kBAEE3hB,GAAc,SAAC2B,EAAKC,GACvB,EAAK+Y,UAAYhZ,EACjB,EAAKigB,QAAUhgB,KAChB4L,MAAK,SAAAtL,GAEJ,OADA,EAAKY,IAAI,wBACFZ,OAIf,YAAAqJ,SAAA,WACI,IAAM5B,EAA0BjJ,KAAKiJ,MAC/BkY,EAAmBnhB,KAAKohB,kBAAkBnY,EAAMpH,QACtD,GAAIsf,EACA,OAAO,IAAI,EAAUviB,EAAW4E,cAAe,CAAE/C,UAAW0gB,IAEhE,IAAME,EAAapY,EAAMqY,OAEzB,OADc9T,KAAK6T,QACnB,EACW,IAAI,EAAUziB,EAAWiF,eAAgBwd,IAIhD,YAAAJ,gBAAR,sBACUhY,EAA0BjJ,KAAKiJ,MA4C/BoY,EAAapY,EAAMqY,OACrBC,EAAU/T,KAAK6T,GAInB,OAFArhB,KAAKoC,IAAI,6BAEFmf,EAAQxkB,KACXiD,KACA,CACIqX,KAAMpO,EAAMoO,KACZmK,OA9CO,SAACvV,GACZ,OAAO,EAAKwV,SAAS,CACjBtkB,KAAM4B,EAAIoM,OACVlC,MAAOgD,KA2CSiK,OApDT,SAACjK,GACZ,OAAO,EAAKwV,SAAS,CACjBtkB,KAAM4B,EAAIgM,OACV9B,MAAOgD,KAkDPiT,OAzCO,SAACjT,GACZ,OAAO,EAAKwV,SAAS,CACjBtkB,KAAM4B,EAAIsM,OACVpC,MAAOgD,KAsCSxK,OAnCT,SAACwK,GACZ,OAAO,EAAKwV,SAAS,CACjBtkB,KAAM4B,EAAIiM,OACV/B,MAAOgD,KAiCP4R,MA9BM,SAAC5R,GACX,OAAO,EAAKwV,SAAS,CACjBtkB,KAAM4B,EAAIkM,MACVhC,MAAOgD,KA2BOyV,UAxBJ,SAACvjB,EAAaN,GAC5B,EAAKgK,QAAQ1J,GAAON,GAwBhB8jB,UAtBU,SAACxjB,GACf,OAAO,EAAK0J,QAAQ1J,IAqBMuH,MAnBhB,SAACrD,GACX,EAAKuf,SAASvf,IAmBVwf,MAhBM,WACV,EAAKC,eAoBb,YAAA1f,IAAA,SAAIF,GACAlC,KAAKW,KAAKyD,OAAOhC,IAAIF,IAGjB,YAAA4f,SAAR,sBACI,IACI9hB,KAAKghB,cAAe,EACpB,IAAIe,EAAc/hB,KAAKiJ,MAAcpH,OAOrC,OANAkgB,EAAaA,EAAW/I,OAAO,EAAWvY,WAC1CT,KAAKW,KAAKE,kBAAkBkhB,GAAYjV,MAAK,SAAAC,GACzC,EAAKkN,UAAU,EAAKpS,YACrBoF,OAAM,SAAA/D,GACL,EAAKgY,QAAQhY,MAEVlJ,KAAKgiB,yBAEhB,MAAO9Z,GACHlI,KAAKkhB,QAAQlhB,KAAKiI,YAAYC,MAQ9B,YAAA+Z,eAAR,SAAuBzgB,GACnB,IAAM0gB,EAAkBliB,KAAK8gB,SAASvG,QAEtCva,KAAKoC,IAAI,sBAAsB8f,EAAgB/kB,KAAI,KAE/C+kB,IACI1gB,EAAOkB,OACP1C,KAAK4hB,SAAS,uDACd5hB,KAAKoC,IAAI,4CACTpC,KAAKkhB,QAAQ1f,EAAOkB,SAGpB1C,KAAK+gB,kBAAmB,EACpBmB,EAAgBjI,WAChBiI,EAAgBjI,UAAUzY,GAE9BxB,KAAKgiB,4BAKT,YAAAJ,SAAR,SAAiBvf,GACbrC,KAAK8gB,SAAW,GAChB9gB,KAAKW,KAAK8E,mBACVzF,KAAKoC,IAAI,8BAA8BC,IAInC,YAAA8f,gBAAR,SAAwBC,GAEpB,IAAIC,EADJriB,KAAK+gB,kBAAmB,EAExB/gB,KAAKoC,IAAI,uBAAuBggB,EAAQjlB,KAAI,KAC5C,IAAMmlB,EAAgBtiB,KAAKiiB,eAAe7jB,KAAK4B,MACzCiJ,EAAQmZ,EAAQnZ,MACtB,OAAQmZ,EAAQjlB,MACZ,KAAK4B,EAAIgM,OACLsX,EAAa,IAAI,GACbpZ,EAAOjJ,KAAKW,MAEhB,MACJ,KAAK5B,EAAIoM,OACLkX,EAAa,IAAI,EACbpZ,EAAOjJ,KAAKW,MAEhB,MACJ,KAAK5B,EAAIsM,OACLgX,EAAa,IAAI,GACbpZ,EAAOjJ,KAAKW,MAEhB,MACJ,KAAK5B,EAAIiM,OACLqX,EAAa,IAAI,GACbpZ,EAAOjJ,KAAKW,MAEhB,MACJ,KAAK5B,EAAIkM,MACLoX,EAAa,IAAI,GACbpZ,EAAOjJ,KAAKW,MAIxB0hB,EAAWza,WAAY,EACvBya,EAAWzV,QAAQ5M,KAAK4B,IAAIkL,KAAKwV,GAAerV,OAAM,SAAA/D,GAIlDoZ,EAHe,CACX5f,MAAOwG,QAMX,YAAAuY,SAAR,SAAiBW,GAAjB,WACUjiB,EAAO,WACT,EAAK2gB,SAAS3gB,KAAKiiB,IAEjBG,EAAajjB,GAAQ,SAACkjB,EAAS/a,GACjC2a,EAAQnI,UAAY,SAACzY,GACjBghB,EAAQhhB,IAEZ4gB,EAAQlB,QAAU,SAACxe,GACf+E,EAAO/E,OAWf,OAR0B,IAAtB1C,KAAKghB,cACL7gB,IACAH,KAAKgiB,0BAGL7hB,IAEJH,KAAKoC,IAAI,oBAAoBggB,EAAQjlB,MAC9BolB,GAGH,YAAAP,uBAAR,YACkC,IAA1BhiB,KAAK+gB,kBACD/gB,KAAK8gB,SAASlY,OAAS,GACvB5I,KAAKmiB,gBAAgBniB,KAAK8gB,SAAS,KAKvC,YAAAM,kBAAR,SAA0Bvf,GAA1B,WACQ4gB,EAAuB,KAS3B,OARA5gB,EAAOwH,OAAM,SAAA5I,GAET,OAAa,MADC,EAAKhB,MAAMgB,KAErBgiB,EAAehiB,GACR,MAIRgiB,GAEf,EAxPA,CAAiC,GCKjC,cAUI,WAAYC,GACR1iB,KAAK2iB,cAAgBpV,EAAY,SAAC/L,GAC9BgM,KAAKoV,YAAYphB,IACjBkhB,EA2NZ,OAlOI,sBAAc,qBAAM,C,IAApB,WACI,OAAO1iB,KAAKW,KAAKyD,Q,gCASrB,YAAAye,IAAA,SAAIT,GAAJ,IACQU,EADR,OAEU7Z,EAAQmZ,EAAQnZ,MACtB,OAAQmZ,EAAQjlB,MACZ,KAAK4B,EAAIgkB,OACLD,EAAc9iB,KAAKgjB,OAAO/Z,GAC1B,MACJ,KAAKlK,EAAIkkB,OACLH,EAAc9iB,KAAK6F,OAAOoD,GAC1B,MACJ,KAAKlK,EAAImkB,QACLJ,EAAc9iB,KAAKmjB,UACnB,MACJ,KAAKpkB,EAAIoM,OACL2X,EAAc,IAAI,EAAO7Z,EAAOjJ,KAAKW,MACjCiM,QAAQ5M,KAAK4B,IACjB,MACJ,KAAK7C,EAAIgM,OACL+X,EAAc,IAAI,GAAO7Z,EAAOjJ,KAAKW,MACjCiM,QAAQ5M,KAAK4B,IACjB,MACJ,KAAK7C,EAAIkM,MACL6X,EAAc,IAAI,GAAM7Z,EAAOjJ,KAAKW,MAAMiM,QAAQ5M,KAAK4B,IACvD,MACJ,KAAK7C,EAAIsM,OACLyX,EAAc,IAAI,GAAO7Z,EAAOjJ,KAAKW,MAAMiM,QAAQ5M,KAAK4B,IACxD,MACJ,KAAK7C,EAAIqkB,UACLN,EAAc,IAAI,GAAU7Z,EAAOjJ,KAAKW,MAAMiM,QAAQ5M,KAAK4B,IAC3D,MACJ,KAAK7C,EAAIskB,OACLP,EAAc9iB,KAAKsjB,SACnB,MACJ,KAAKvkB,EAAIwkB,UACLT,EAAc9iB,KAAKwjB,YACnB,MACJ,KAAKzkB,EAAI0kB,MACLX,EAAc,IAAI,GAAM7Z,EAAOjJ,KAAKW,MAAMiM,QAAQ5M,KAAK4B,IACvD,MACJ,KAAK7C,EAAIiM,OACL8X,EAAc,IAAI,GAAO7Z,EAAOjJ,KAAKW,MAAMiM,QAAQ5M,KAAK4B,IACxD,MACJ,KAAK7C,EAAI2kB,MACLZ,EAAc,IAAI,GAAM7Z,EAAOjJ,KAAKW,MAAMiM,QAAQ5M,KAAK4B,IACvD,MACJ,KAAK7C,EAAI4kB,YACLb,EAAc,IAAI,GAAY7Z,EAAOjJ,KAAKW,MAAMiM,QAAQ5M,KAAK4B,IAC7D,MACJ,KAAK7C,EAAI6kB,IACLd,EAAc,EAAWrlB,IAAIwL,EAAiBjJ,KAAKW,MACnD,MACJ,KAAK5B,EAAI8kB,IACLf,EAAc,EAAWpiB,IAAIuI,EAAM9K,IAAK8K,EAAMpL,MAAOmC,KAAKW,MAC1D,MACJ,KAAK5B,EAAI+kB,cACLhB,EAAc9iB,KAAK+jB,eAAe3B,GAClC,MACJ,KAAKrjB,EAAIilB,gBACLhkB,KAAKoE,OAAO9B,OAAS2G,EACrB6Z,EAActjB,QAAQgjB,UACtB,MACJ,QACQ,EAGJM,EAActjB,QAAQgjB,UAE9BxiB,KAAKoE,OAAOhC,IAAI,mBAAmBggB,EAAQjlB,KAAI,kBAC/C2lB,EAAYhW,MAAK,SAACtL,GACd,EAAKuX,cAAc,CACfvX,OAAQA,OAEbyL,OAAM,SAAA/E,GACL,IACM1G,EAAS,CACXkB,MAFQgF,EAASQ,IAIrB,EAAK6Q,cAAcvX,OAInB,YAAAuiB,eAAR,SAAuB3B,GACnB,OAAO9iB,GAAc,SAAC2B,EAAKC,GACvB,IACI+iB,cAAa,aAAI7B,EAAQnZ,OACzBhI,IACF,MAAOkF,GAELjF,EADY,IAAI,EAAUtC,EAAWsF,oBAAqBiC,EAAEjE,eAMhE,YAAA6W,cAAR,SAAsBvX,GAClBxB,KAAKoE,OAAOhC,IAAI,oCACZpC,KAAKW,MACLX,KAAKW,KAAK0D,UAEdrE,KAAK2iB,cAAcnhB,IAGf,YAAA8hB,OAAR,WACI,IAAMtD,EAAShgB,KAAK4B,GAAGzE,KACvB,OAAO6C,KAAKwjB,YAAY1W,MAAK,WACzB,OAAO,IAAI,IAASF,QAAQoT,OAIpC,YAAAmD,QAAA,WACI,OAAOnjB,KAAKW,KAAKgF,SAGrB,YAAA6d,UAAA,sBACI,OAAOxjB,KAAKmjB,UAAUrW,MAAK,WACvB,EAAKlL,GAAK,SAIlB,YAAAohB,OAAA,SAAO/Z,GAAP,WAaI,OAXIjJ,KAAK4B,IAAMqH,EAAM9L,OAAS6C,KAAK4B,GAAGzE,KACxB6C,KAAK6F,SAGL7F,KAAK6F,OAAO,CAClB1I,KAAM8L,EAAM9L,KACZ0E,OAAQ,GAERzB,QAAS6I,EAAM7I,WAGR0M,MAAK,WAChB,OAAO,EAAKlL,OAIpB,YAAAiE,OAAA,SAAOqe,GAAP,WACI,IAAKvW,EACD,OAAOnG,EACH,IAAI,EAAU5I,EAAWkF,wBAIjC,IAAMqgB,EAASD,EAAW,IAAI,EAAOA,GAAYlkB,KAAK4B,GACtD5B,KAAKW,KAAO,IAAI,EAAQwjB,GA6CxB,OAAO7kB,GAAiB,SAAC2B,EAAKC,GAC1B,EAAKP,KAAKkF,SAASiH,MAAK,SAACsX,GACrB,OAAIA,IA9Ca5iB,EAiDM4iB,EAhDpB9kB,GAAQ,SAAC2B,EAAKC,GACjB,EAAWzD,IAAI,EAAWkE,SAAU,EAAKhB,MAAMmM,MAAK,SAACuX,GACjD,IACI3kB,EADA4kB,GAAmB,EAuBvB,GArBID,IACA3kB,EAAY2kB,EAAQjkB,QAEpBikB,EAAQxiB,OAAO4E,SAAQ,SAAC8d,EAAYhb,GAChC,IAAMib,EAAgBL,EAAOtiB,OAAO0H,GAEhCib,IACID,EAAWnkB,QAAUokB,EAAcpkB,SACnCokB,EAAclkB,MAAQjB,EAAYmH,OAClC8d,GAAmB,EACf5kB,EAAY8kB,EAAcpkB,UAC1BV,EAAY8kB,EAAcpkB,UAI9BokB,EAAclkB,MAAQ,UAMlCgkB,EASA,OARAH,EAAO/jB,QAAUV,OACjB,EAAK8jB,YAAY1W,MAAK,SAAAC,GAClB,EAAKpM,KAAO,IAAI,EAAQwjB,GACxB,EAAKxjB,KAAKkF,SAASiH,MAAK,SAACsX,GACrBnjB,EAAImjB,MACLnX,MAAM/L,MAKPM,IACN,EAAKI,GAAKyiB,GAEdpjB,EAAIO,UAxCQ,IAACA,KAkDlBsL,MAAK,SAAAtL,GACAA,EACA,EAAWd,IACP,EAAWiB,SAAUwiB,EACrB,EAAKxjB,MACPmM,MAAK,WACH,EAAKlL,GAAKuiB,EACVljB,GAAI,MAKRA,GAAI,MAETgM,MAAM/L,OAOrB,EAxOA,GCdA,GAAIqM,EAAW,CACX,IAAM,GAAU,IAAI,GACnBC,KAAaiX,UAAY,SAAUte,GAChC,GAAQ0c,IAAI1c,EAAEkR","file":"jsstore.worker.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","export enum ERROR_TYPE {\n    UndefinedColumn = \"undefined_column\",\n    UndefinedValue = \"undefined_value\",\n    UndefinedColumnName = \"undefined_column_name\",\n    UndefinedDbName = \"undefined_database_name\",\n    UndefinedColumnValue = \"undefined_column_value\",\n    NotArray = \"not_array\",\n    NoValueSupplied = \"no_value_supplied\",\n    ColumnNotExist = \"column_not_exist\",\n    EnableSearchOff = \"enable_search_off\",\n    InvalidOp = \"invalid_operator\",\n    NullValue = \"null_value\",\n    WrongDataType = \"wrong_data_type\",\n    TableNotExist = \"table_not_exist\",\n    DbNotExist = \"db_not_exist\",\n    ConnectionAborted = \"connection_aborted\",\n    ConnectionClosed = \"connection_closed\",\n    NotObject = \"not_object\",\n    InvalidConfig = \"invalid_config\",\n    DbBlocked = \"Db_blocked\",\n    IndexedDbNotSupported = \"indexeddb_not_supported\",\n    NullValueInWhere = \"null_value_in_where\",\n    InvalidJoinQuery = 'invalid_join_query',\n    InvalidOrderQuery = 'invalid_order_query',\n    InvalidQuery = 'invalid_query',\n    InvalidGroupQuery = 'invalid_group_query',\n    ImportScriptsFailed = 'import_scripts_failed',\n    MethodNotExist = 'method_not_exist',\n    Unknown = \"unknown\"\n}\n\nexport enum WORKER_STATUS {\n    Registered = \"registerd\",\n    Failed = \"failed\",\n    NotStarted = \"not_started\"\n}\n\nexport enum DATA_TYPE {\n    String = \"string\",\n    Object = \"object\",\n    Array = \"array\",\n    Number = \"number\",\n    Boolean = \"boolean\",\n    Null = \"null\",\n    DateTime = \"date_time\"\n}\n\nexport enum API {\n    InitDb = \"init_db\",\n    Get = \"get\",\n    Set = \"set\",\n    Select = \"select\",\n    Insert = \"insert\",\n    Update = \"update\",\n    Remove = \"remove\",\n    OpenDb = \"open_db\",\n    Clear = \"clear\",\n    DropDb = \"drop_db\",\n    Count = \"count\",\n    ChangeLogStatus = \"change_log_status\",\n    Terminate = \"terminate\",\n    Transaction = \"transaction\",\n    CloseDb = \"close_db\",\n    Union = \"union\",\n    Intersect = \"intersect\",\n    ImportScripts = \"import_scripts\",\n}\n\nexport enum EVENT {\n    RequestQueueEmpty = \"requestQueueEmpty\",\n    RequestQueueFilled = \"requestQueueFilled\"\n}\n\nexport enum QUERY_OPTION {\n    Where = \"where\",\n    Like = 'like',\n    Regex = 'regex',\n    In = 'in',\n    Equal = \"=\",\n    Between = '-',\n    GreaterThan = '>',\n    LessThan = '<',\n    GreaterThanEqualTo = \">=\",\n    LessThanEqualTo = \"<=\",\n    NotEqualTo = \"!=\",\n    Aggregate = \"aggregate\",\n    Max = \"max\",\n    Min = \"min\",\n    Avg = \"avg\",\n    Count = \"count\",\n    Sum = \"sum\",\n    Or = \"or\",\n    Skip = \"skip\",\n    Limit = \"limit\",\n    And = \"and\",\n    IgnoreCase = \"ignoreCase\",\n    Then = \"then\"\n}\n\nexport enum IDB_MODE {\n    ReadOnly = \"readonly\",\n    ReadWrite = \"readwrite\"\n}\n\nexport enum OCCURENCE {\n    First = 'f',\n    Last = 'l',\n    Any = 'a'\n}\n\nexport enum CONNECTION_STATUS {\n    Connected = \"connected\",\n    Closed = \"closed\",\n    NotStarted = \"not_started\",\n    UnableToStart = \"unable_to_start\",\n    ClosedByJsStore = \"closed_by_jsstore\"\n}","export const promise = <T>(cb: (res, rej?) => any) => {\n    return new Promise<T>(cb);\n}","export enum TABLE_STATE {\n    Create = \"create\",\n    Delete = \"delete\"\n}","import { ITable } from \"@/main\";\nimport { TColumns } from \"@/common\";\nimport { TABLE_STATE } from \"@/worker/enums\";\nimport { IColumn } from \"@/worker/interfaces\";\n\nexport class TableMeta {\n    name: string;\n    columns: IColumn[];\n    primaryKey: string;\n    state: TABLE_STATE;\n    version: number;\n    autoIncColumnValue = {};\n\n    constructor(table: ITable, dbVersion: number) {\n        const columns = [];\n        for (const columnName in table.columns) {\n            const column: IColumn = table.columns[columnName] as any;\n            column.name = columnName;\n            if (column.autoIncrement) {\n                this.autoIncColumnValue[columnName] = 0;\n            }\n            if (column.primaryKey) {\n                this.primaryKey = columnName;\n            }\n            column.enableSearch = column.enableSearch == null ? true : column.enableSearch;\n            columns.push(column);\n        }\n        this.columns = columns;\n        this.name = table.name;\n        this.version = table.version || 1;\n        if (dbVersion > this.version) {\n            this.version = dbVersion;\n        }\n        this.setState_();\n    }\n\n    private setState_() {\n        this.state = TABLE_STATE.Create;\n    }\n}","import { IDBUtil } from \"@/worker/idbutil\";\nimport { promise } from \"@/common\";\n\nexport class MetaHelper {\n    static tableName = \"JsStore_Meta\";\n    static autoIncrementKey(tableName: string, columnName: string) {\n        return `JsStore_${tableName}_${columnName}_Value`;\n    }\n    static dbSchema = `JsStore_DbSchema`;\n\n    static set(key, value, util: IDBUtil) {\n        if (!util.tx) {\n            util.createTransaction([MetaHelper.tableName]);\n        }\n        const store = util.objectStore(MetaHelper.tableName);\n\n        return promise((res, rej) => {\n            const req = store.put({\n                key, value\n            });\n            req.onsuccess = () => {\n                res();\n            };\n            req.onerror = rej;\n        });\n    }\n    static get(key, util: IDBUtil) {\n        if (!util.tx) {\n            util.createTransaction([MetaHelper.tableName]);\n        }\n        const store = util.objectStore(MetaHelper.tableName);\n\n        return promise((res, rej) => {\n            const req = store.get(\n                util.keyRange(key)\n            );\n            req.onsuccess = () => {\n                const result = req.result;\n                res(result && result.value);\n            };\n            req.onerror = rej;\n        });\n    }\n\n    static remove(key, util: IDBUtil) {\n        if (!util.tx) {\n            util.createTransaction([MetaHelper.tableName]);\n        }\n        const store = util.objectStore(MetaHelper.tableName);\n\n        return promise((res, rej) => {\n            const req = store.delete(\n                util.keyRange(key)\n            );\n            req.onsuccess = res;\n            req.onerror = rej;\n        });\n    }\n}","import { IDataBase } from \"@/common\";\nimport { TableMeta } from \"./table_meta\";\nimport { MetaHelper } from \"@worker/meta_helper\";\n\nexport class DbMeta {\n    name: string;\n    version: number;\n\n    tables: TableMeta[];\n\n    constructor(db: IDataBase) {\n        this.name = db.name;\n        db.tables.push({\n            name: MetaHelper.tableName,\n            columns: {\n                key: {\n                    primaryKey: true\n                },\n                value: {\n                    enableSearch: false\n                }\n            }\n        })\n        this.tables = db.tables.map(table => {\n            return new TableMeta(table, db.version);\n        });\n        this.version = db.version || 1;\n    }\n}","import { ERROR_TYPE, IError } from \"@/common\";\n\nexport class LogHelper implements IError {\n    type: ERROR_TYPE;\n    message: string;\n    private info_: any;\n\n    status: boolean;\n\n    log(msg) {\n        if (this.status) {\n            console.log(msg);\n        }\n    }\n\n    constructor(type: ERROR_TYPE, info?) {\n        this.type = type;\n        this.info_ = info;\n        this.message = this.getMsg_();\n    }\n\n    throw() {\n        throw this.get();\n    }\n\n\n    logError() {\n        console.error(this.get());\n    }\n\n\n\n    get() {\n        return {\n            message: this.message,\n            type: this.type\n        } as IError;\n    }\n\n    private getMsg_() {\n        let errMsg: string;\n        switch (this.type) {\n            case ERROR_TYPE.NotArray:\n                errMsg = \"Supplied value is not an array\";\n                break;\n            case ERROR_TYPE.UndefinedColumn:\n                errMsg = \"Column is undefined in Where\";\n                break;\n            case ERROR_TYPE.UndefinedValue:\n                errMsg = \"Value is undefined in Where\";\n                break;\n            case ERROR_TYPE.UndefinedColumnName:\n                errMsg = \"Column name is undefined '\" + this.info_['TableName'] + \"'\";\n                break;\n            case ERROR_TYPE.UndefinedDbName:\n                errMsg = \"Database name is not supplied\";\n                break;\n            case ERROR_TYPE.UndefinedColumnValue:\n                errMsg = \"Column value is undefined\";\n                break;\n            case ERROR_TYPE.NoValueSupplied:\n                errMsg = \"No value is supplied\";\n                break;\n            case ERROR_TYPE.InvalidOp:\n                errMsg = \"Invalid Op Value '\" + this.info_['Op'] + \"'\";\n                break;\n            case ERROR_TYPE.ColumnNotExist:\n                errMsg = this.info_['isOrder'] ?\n                    `Column '${this.info_['column']}' in order query does not exist` :\n                    `Column '${this.info_['column']}' does not exist`;\n                break;\n            case ERROR_TYPE.EnableSearchOff:\n                errMsg = \"Search is turned off for the Column '\" + this.info_['column'] + \"'\";\n                break;\n            case ERROR_TYPE.NullValue:\n                errMsg = \"Null value is not allowed for column '\" + this.info_['ColumnName'] + \"'\";\n                break;\n            case ERROR_TYPE.WrongDataType:\n                errMsg = \"Supplied value for column '\" + this.info_['column'] +\n                    \"' have wrong data type\";\n                break;\n            case ERROR_TYPE.TableNotExist:\n                errMsg = \"Table '\" + this.info_['tableName'] + \"' does not exist\";\n                break;\n            case ERROR_TYPE.DbNotExist:\n                errMsg = `Database with name ${this.info_['dbName']} does not exist`;\n                break;\n            case ERROR_TYPE.NotObject:\n                errMsg = \"supplied value is not object\";\n                break;\n            case ERROR_TYPE.InvalidOp:\n                errMsg = \"Invalid Config '\" + this.info_['Config'] + \" '\";\n                break;\n            case ERROR_TYPE.DbBlocked:\n                errMsg = `database is blocked, cant be deleted right now`;\n                break;\n            case ERROR_TYPE.NullValueInWhere:\n                errMsg = `Null/undefined is not allowed in where. Column '${this.info_['column']}' has null`;\n                break;\n            case ERROR_TYPE.MethodNotExist:\n                errMsg = `method ${this.info_} does not exist.`;\n                break;\n            case ERROR_TYPE.IndexedDbNotSupported:\n                errMsg = \"Browser does not support indexeddb\";\n                break;\n            case ERROR_TYPE.InvalidJoinQuery:\n            case ERROR_TYPE.InvalidGroupQuery:\n            case ERROR_TYPE.InvalidOrderQuery:\n            case ERROR_TYPE.ImportScriptsFailed:\n                errMsg = this.info_;\n                break;\n            default:\n                if (!this.type) {\n                    this.type = ERROR_TYPE.Unknown\n                }\n                errMsg = this.message;\n                break;\n        }\n        return errMsg;\n    }\n}","import { DbMeta, TableMeta } from \"@worker/model\";\nimport { TABLE_STATE } from \"@worker/enums\";\nimport { IDB_MODE, QUERY_OPTION, promise } from \"@/common\";\nimport { LogHelper } from \"@worker/utils\";\n\nexport class IDBUtil {\n\n    db: DbMeta;\n\n    con: IDBDatabase;\n    tx: IDBTransaction;\n\n    logger = new LogHelper(null);\n\n    constructor(db: DbMeta) {\n        this.db = db;\n    }\n\n    emptyTx() {\n        if (!this.tx) return;\n        this.tx.oncomplete = null;\n        this.tx.onabort = null;\n        this.tx.onerror = null;\n        this.tx = null;\n    }\n\n    createTransactionIfNotExist(tables: string[], mode?: IDB_MODE) {\n        if (!this.tx) {\n            this.createTransaction(tables, mode);\n        }\n    }\n\n    createTransaction(tables: string[], mode = IDB_MODE.ReadWrite) {\n        this.tx = this.con.transaction(tables, mode);\n        return promise((res, rej) => {\n            this.tx.oncomplete = res;\n            this.tx.onabort = res;\n            this.tx.onerror = rej;\n        });\n    }\n\n    keyRange(value, op?) {\n        let keyRange: IDBKeyRange;\n        switch (op) {\n            case QUERY_OPTION.Between: keyRange = IDBKeyRange.bound(value.low, value.high, false, false); break;\n            case QUERY_OPTION.GreaterThan: keyRange = IDBKeyRange.lowerBound(value, true); break;\n            case QUERY_OPTION.GreaterThanEqualTo: keyRange = IDBKeyRange.lowerBound(value); break;\n            case QUERY_OPTION.LessThan: keyRange = IDBKeyRange.upperBound(value, true); break;\n            case QUERY_OPTION.LessThanEqualTo: keyRange = IDBKeyRange.upperBound(value); break;\n            default: keyRange = IDBKeyRange.only(value); break;\n        }\n        return keyRange;\n    }\n\n    objectStore(name: string) {\n        return this.tx.objectStore(name);\n    }\n\n    abortTransaction() {\n        if (this.tx) {\n            this.tx.abort();\n        }\n    }\n\n    close() {\n        if (this.con) {\n            this.con.close();\n        }\n        // wait for 100 ms before success\n        return promise(res => {\n            this.con = null;\n            setTimeout(res, 100);\n        });\n    }\n\n    initDb() {\n\n        const db = this.db;\n        let isDbCreated = false;\n        const initLogic = (res, rej) => {\n            const dbOpenRequest = indexedDB.open(db.name, db.version);\n\n            dbOpenRequest.onsuccess = () => {\n                this.con = dbOpenRequest.result;\n                this.con.onversionchange = (e: any) => {\n                    // if (e.newVersion === null) { // An attempt is made to delete the db\n                    e.target.close(); // Manually close our connection to the db\n                    // }\n                }\n                res(isDbCreated);\n            }\n\n            dbOpenRequest.onerror = (e) => {\n                console.error(\"error\", e);\n                rej(e);\n            };\n\n            dbOpenRequest.onupgradeneeded = function (e) {\n                const upgradeConnection: IDBDatabase = (e as any).target.result;\n                isDbCreated = true;\n                const createObjectStore = (table: TableMeta) => {\n                    const option: IDBObjectStoreParameters = table.primaryKey ? {\n                        keyPath: table.primaryKey\n                    } : {\n                            autoIncrement: true\n                        }\n\n                    // Delete the old datastore.    \n                    if (upgradeConnection.objectStoreNames.contains(table.name)) {\n                        upgradeConnection.deleteObjectStore(table.name);\n                    }\n\n                    const store = upgradeConnection.createObjectStore(table.name, option);\n                    table.columns.forEach(column => {\n                        if (column.enableSearch) {\n                            const columnName = column.name;\n                            const options = column.primaryKey ? { unique: true } : { unique: column.unique };\n                            options['multiEntry'] = column.multiEntry;\n                            const keyPath = column.keyPath == null ? columnName : column.keyPath;\n                            store.createIndex(columnName, keyPath, options);\n                        }\n                    });\n                }\n                const createStates = [TABLE_STATE.Create, TABLE_STATE.Delete];\n                db.tables.forEach(table => {\n                    if (createStates.indexOf(table.state) >= 0) {\n                        createObjectStore(table);\n                    }\n                });\n            }\n        }\n        return promise<boolean>(initLogic)\n    }\n}","export const promiseAll = <T>(promises: any) => {\n    return Promise.all<T>(promises);\n};","export const promiseReject = (value) => {\n    return Promise.reject(value);\n}","import { LogHelper } from \"./log_helper\";\n\nexport const getError = (e) => {\n    const customError = e instanceof LogHelper;\n    if (customError) {\n        e.logError();\n        return (e as LogHelper).get();\n    }\n    else {\n        let error;\n        if (e.name) {\n            error = new LogHelper(e.name);\n            error.message = e.message;\n        }\n        else {\n            error = new LogHelper((e as any).target.error.name);\n            error.message = (e as any).target.error.message;\n        }\n        if (process.env.NODE_ENV === 'dev') {\n            error.logError();\n        }\n        return error.get();\n    }\n}","import { IDBUtil } from \"@worker/idbutil\";\nimport { InsertQuery, SelectQuery, ERROR_TYPE, UpdateQuery } from \"@/common\";\nimport { LogHelper, getError, promiseReject, getErrorFromException } from \"@worker/utils\";\nimport { DbMeta } from \"@worker/model\";\n\nexport class Base {\n    db: DbMeta;\n    util: IDBUtil;\n    query: InsertQuery | SelectQuery | UpdateQuery;\n\n    rowAffected = 0;\n    isTxQuery = false;\n    objectStore: IDBObjectStore;\n    tableName: string;\n\n    protected results: any[] = [];\n    // get tableName() {\n    //     return (this.query as SelectQuery).from || (this.query as InsertQuery).into\n    // }\n\n    table(name?: string) {\n        const tableName = name || this.tableName;\n        return this.db.tables.find(q => q.name === tableName)\n    }\n\n    primaryKey(tableName?: string) {\n        return this.table(tableName).primaryKey;\n    }\n\n\n    protected getColumnInfo(columnName: string, tableName?: string) {\n        return this.table(tableName).columns.find(column => column.name === columnName);\n    }\n\n\n\n    onException(ex: DOMException, type?) {\n        console.error(ex);\n        this.util.abortTransaction();\n        return promiseReject(\n            getErrorFromException(ex, type)\n        );\n    }\n}","import { ERROR_TYPE } from \"@/common\"\nimport { getError } from \"./get_error\";\n\nexport const getErrorFromException = (ex, type = ERROR_TYPE.InvalidQuery) => {\n    ex.name = type;\n    return getError(ex);\n}","import { DATA_TYPE } from \"@/common\";\n\nexport const getDataType = (value) => {\n    if (value == null) {\n        return DATA_TYPE.Null;\n    }\n    const type = typeof value;\n    switch (type) {\n        case 'object':\n            if (Array.isArray(value)) {\n                return DATA_TYPE.Array;\n            }\n            if (value instanceof Date) {\n                return DATA_TYPE.DateTime;\n            }\n    }\n    return type;\n}","export const isNull = (value) => {\n    if (value == null) {\n        return true;\n    } else {\n        switch (typeof value) {\n            case 'string': return value.length === 0;\n            case 'number': return isNaN(value);\n        }\n    }\n    return false;\n};","import { TableMeta } from \"@/worker/model/table_meta\";\nimport { promise, IColumnOption, TStringAny, ERROR_TYPE, DATA_TYPE, InsertQuery } from \"@/common\";\nimport { IColumn } from \"@/worker/interfaces\";\nimport { getDataType, LogHelper, isNull } from \"@/worker/utils\";\n\n\nexport class ValuesChecker {\n    table: TableMeta;\n    autoIncrementValue;\n    query: InsertQuery;\n\n    constructor(table: TableMeta, autoIncValues) {\n        this.table = table;\n        this.autoIncrementValue = autoIncValues;\n    }\n\n    checkAndModifyValues(query: InsertQuery) {\n        let err: LogHelper;\n        this.query = query;\n        const values = query.values;\n        const ignoreIndexes = [];\n        values.every((item, index) => {\n            err = this.checkAndModifyValue(item);\n            if (query.ignore && err) {\n                ignoreIndexes.push(index);\n                err = null;\n            }\n            return err ? false : true;\n        });\n        ignoreIndexes.forEach(index => {\n            values.splice(index, 1);\n        });\n        return { err, values };\n    }\n\n    private checkAndModifyValue(value) {\n        let error: LogHelper;\n        this.table.columns.every(column => {\n            error = this.checkAndModifyColumnValue_(column, value);\n            return error ? false : true;\n        })\n        return error;\n    }\n\n    private checkNotNullAndDataType_(column: IColumn, value: TStringAny) {\n        // check not null schema\n        if (column.notNull && isNull(value[column.name])) {\n            return this.getError(ERROR_TYPE.NullValue, { ColumnName: column.name });\n        }\n        // check datatype\n        else if (column.dataType && !isNull(value[column.name]) &&\n            getDataType(value[column.name]) !== column.dataType) {\n            return this.getError(ERROR_TYPE.WrongDataType, { column: column.name });\n        }\n    }\n\n    private checkAndModifyColumnValue_(column: IColumn, value: TStringAny) {\n        const columnValue = value[column.name];\n        // check auto increment scheme\n        if (column.autoIncrement) {\n            // if value is null, then create the autoincrement value\n            if (isNull(columnValue)) {\n                value[column.name] = ++this.autoIncrementValue[column.name];\n            }\n            else {\n                if (getDataType(columnValue) === DATA_TYPE.Number) {\n                    // if column value is greater than autoincrement value saved, then make the\n                    // column value as autoIncrement value\n                    if (columnValue > this.autoIncrementValue[column.name]) {\n                        this.autoIncrementValue[column.name] = columnValue;\n                    }\n                }\n            }\n        }\n        // check Default Schema\n        else if (column.default !== undefined && isNull(columnValue)) {\n            value[column.name] = column.default;\n        }\n        const query = this.query;\n        if (query.validation) {\n            return this.checkNotNullAndDataType_(column, value);\n        }\n    }\n\n    private getError(error: ERROR_TYPE, details: object) {\n        return new LogHelper(error, details);\n    }\n}","import { ITable, DATA_TYPE, ERROR_TYPE } from \"@/common\";\nimport { LogHelper, isNull, getDataType } from \"@worker/utils\";\nimport { TableMeta } from \"@worker/model/table_meta\";\nimport { IColumn } from \"@worker/interfaces\";\n\nexport class SchemaChecker {\n    table: TableMeta;\n    constructor(table: TableMeta) {\n        this.table = table;\n    }\n\n    check(setValue: object, tblName: string) {\n        let log: LogHelper;\n        if (typeof setValue === DATA_TYPE.Object) {\n            if (this.table) {\n                // loop through table column and find data is valid\n                this.table.columns.every((column) => {\n                    if (column.name in setValue) {\n                        log = this.checkByColumn_(column, setValue[column.name]);\n                    }\n                    return log ? false : true;\n                });\n            }\n            else {\n                log = new LogHelper(ERROR_TYPE.TableNotExist, { tableName: tblName });\n            }\n        }\n        else {\n            log = new LogHelper(ERROR_TYPE.NotObject);\n        }\n        return log;\n    }\n\n\n\n    private checkByColumn_(column: IColumn, value) {\n        // check not null schema\n        if (column.notNull === true && isNull(value)) {\n            return new LogHelper(ERROR_TYPE.NullValue, { ColumnName: column.name });\n        }\n\n        // check datatype\n        const type = getDataType(value);\n        const checkFurther = value != null;\n        if (column.dataType && checkFurther) {\n            if (type !== column.dataType && type !== 'object') {\n                return new LogHelper(ERROR_TYPE.WrongDataType, { column: column.name });\n            }\n        }\n\n        // check allowed operators\n        if (checkFurther && type === 'object') {\n            const allowedOp = ['+', '-', '*', '/', '{push}'];\n            for (const prop in value) {\n                if (allowedOp.indexOf(prop) < 0 && column.dataType && type !== column.dataType) {\n                    return new LogHelper(ERROR_TYPE.WrongDataType, { column: column.name });\n                }\n            }\n        }\n    }\n}","import { InsertQuery, DATA_TYPE, ERROR_TYPE, SelectQuery, QUERY_OPTION, UpdateQuery, API } from \"@/common\";\nimport { LogHelper, getDataType } from \"@/worker/utils\";\nimport { DbMeta } from \"../model\";\nimport { ValuesChecker } from \"@worker/executors/insert\";\nimport { SchemaChecker } from \"./update/schema_checker\";\n\nexport class QueryHelper {\n    db: DbMeta;\n\n    constructor(dbSchema: DbMeta) {\n        this.db = dbSchema;\n    }\n\n    validate(api: API, query: InsertQuery | SelectQuery | UpdateQuery) {\n        switch (api) {\n            case API.Select:\n            case API.Remove:\n            case API.Count:\n                return this.checkSelect(query as SelectQuery);\n            case API.Insert:\n                return this.checkInsertQuery(query as InsertQuery);\n            case API.Update:\n                return this.checkUpdate(query as UpdateQuery);\n        }\n    }\n\n    private getTable_(tableName: string) {\n        return this.db.tables.find(q => q.name === tableName);\n    }\n\n    isInsertQryValid(query: InsertQuery) {\n        const table = this.getTable_(query.into);\n        let log: LogHelper;\n        if (table) {\n            switch (getDataType(query.values)) {\n                case DATA_TYPE.Array:\n                    break;\n                case DATA_TYPE.Null:\n                    log = new LogHelper(ERROR_TYPE.NoValueSupplied);\n                    break;\n                default:\n                    log = new LogHelper(ERROR_TYPE.NotArray);\n            }\n        }\n        else {\n            log = new LogHelper(ERROR_TYPE.TableNotExist, { tableName: query.into });\n        }\n        return {\n            table, log\n        };\n    }\n\n    private checkUpdate(query: UpdateQuery) {\n        let err = new SchemaChecker(this.getTable_(query.in)).\n            check(query.set, query.in);\n        if (err) return err;\n        if (query.where != null) {\n            err = this.checkForNullInWhere_(query);\n            if (err) return err;\n            this.addGreatAndLessToNotOp_(query as any);\n        }\n    }\n\n    private checkSelect(query: SelectQuery) {\n        const table = this.getTable_(query.from);\n        if (!table) {\n            return new LogHelper(ERROR_TYPE.TableNotExist,\n                { tableName: query.from }\n            );\n        }\n\n        if (query.where) {\n            const err = this.checkForNullInWhere_(query);\n            if (err) return err;\n            this.addGreatAndLessToNotOp_(query);\n        }\n    }\n\n    private checkForNullInWhere_(query): LogHelper {\n        for (const columnName in query.where) {\n            if (query.where[columnName] == null) {\n                return new LogHelper(ERROR_TYPE.NullValueInWhere, { column: columnName });\n            }\n        }\n    }\n\n    private addGreatAndLessToNotOp_(query: SelectQuery) {\n        const whereQuery = query.where;\n        const containsNot = (qry: object, keys: string[]) => {\n            return keys.findIndex(key => qry[key][QUERY_OPTION.NotEqualTo] != null) >= 0;\n        };\n        const addToSingleQry = (qry, keys: string[]) => {\n            let value;\n            keys.forEach((prop) => {\n                value = qry[prop];\n                if (value[QUERY_OPTION.NotEqualTo] != null) {\n                    qry[prop][QUERY_OPTION.GreaterThan] = value[QUERY_OPTION.NotEqualTo];\n                    if (qry[QUERY_OPTION.Or] === undefined) {\n                        qry[QUERY_OPTION.Or] = {};\n                        qry[QUERY_OPTION.Or][prop] = {};\n                    }\n                    else if (qry[QUERY_OPTION.Or][prop] === undefined) {\n                        qry[QUERY_OPTION.Or][prop] = {};\n                    }\n                    qry[QUERY_OPTION.Or][prop][QUERY_OPTION.LessThan] = value[QUERY_OPTION.NotEqualTo];\n                    delete qry[prop][QUERY_OPTION.NotEqualTo];\n                }\n            });\n            return qry;\n        };\n        switch (getDataType(whereQuery)) {\n            case DATA_TYPE.Object:\n                const queryKeys = Object.keys(whereQuery);\n                if (containsNot(whereQuery, queryKeys)) {\n                    if (queryKeys.length === 1) {\n                        query.where = addToSingleQry(whereQuery, queryKeys);\n                    }\n                    else {\n                        const whereTmpQry = [];\n                        queryKeys.forEach((prop) => {\n                            whereTmpQry.push(addToSingleQry({ [prop]: whereQuery[prop] }, [prop]));\n                        });\n                        query.where = whereTmpQry;\n                    }\n                }\n                break;\n            default:\n                const whereTmp = [];\n                (whereQuery as object[]).forEach(qry => {\n                    const qryKeys = Object.keys(qry);\n                    if (containsNot(qry, qryKeys)) {\n                        qry = addToSingleQry(qry, qryKeys);\n                    }\n                    whereTmp.push(qry);\n                });\n                query.where = whereTmp;\n        }\n    }\n\n    private checkInsertQuery(query: InsertQuery) {\n        const validResult = this.isInsertQryValid(query);\n        let table = validResult.table;\n        const error = validResult.log;\n        if (error) return error;\n        if (query.skipDataCheck) return;\n        const valueCheckerInstance = new ValuesChecker(table, table.autoIncColumnValue);\n        const { values, err } = valueCheckerInstance.checkAndModifyValues(query);\n        query.values = values;\n        return err;\n    }\n}","export * from \"./values_checker\";\nimport { InsertQuery, promise, promiseAll, TStringAny, API, IDB_MODE } from \"@/common\";\nimport { Base } from \"@worker/executors/base\";\nimport { IDBUtil } from \"@/worker/idbutil\";\nimport { QueryHelper } from \"@worker/executors/query_helper\";\nimport { DbMeta } from \"@/worker/model\";\nimport { getError, promiseReject } from \"@/worker/utils\";\nimport { MetaHelper } from \"@/worker/meta_helper\";\n\nexport class Insert extends Base {\n\n    query: InsertQuery;\n\n    private valuesAffected_ = [];\n\n    constructor(query: InsertQuery, util: IDBUtil) {\n        super();\n        if (query.validation == null) {\n            query.validation = true;\n        }\n        this.query = query;\n        this.util = util;\n        this.tableName = query.into;\n    }\n\n    execute(db: DbMeta) {\n        const err = new QueryHelper(db).validate(API.Insert, this.query);\n        if (err) return promiseReject(err);\n        return this.insertData_(db).then(_ => {\n            return this.query.return ? this.valuesAffected_ : this.rowAffected\n        }).catch(err => {\n            this.util.abortTransaction();\n            return promiseReject(err);\n        })\n    }\n\n    private insertData_(db: DbMeta) {\n\n        let onInsertData;\n        let addMethod;\n\n        const query = this.query;\n        if (query.return) {\n            onInsertData = (value) => {\n                this.valuesAffected_.push(value);\n            };\n\n        }\n        else {\n            onInsertData = (value) => {\n                ++this.rowAffected;\n            };\n        }\n        addMethod = (() => {\n            const idbMethod = query.upsert ? \"put\" : \"add\";\n            if (query.ignore && !this.isTxQuery) {\n                return (value) => {\n                    const tx = this.util.con.transaction(query.into, IDB_MODE.ReadWrite);\n                    const objectStore = tx.objectStore(query.into);\n                    return objectStore[idbMethod](value);\n                };\n            }\n            if (!this.isTxQuery) {\n                this.util.createTransaction(\n                    [query.into, MetaHelper.tableName],\n                )\n            }\n            this.objectStore = this.util.objectStore(this.tableName);\n            return (value) => {\n                return this.objectStore[idbMethod](value);\n            };\n        })();\n\n        return promiseAll(\n            query.values.map((value) => {\n                return promise((res, rej) => {\n                    const addResult = addMethod(value);\n                    addResult.onerror = (err) => {\n                        if (query.ignore) {\n                            res();\n                        } else {\n                            rej(err);\n                        }\n                    }\n                    addResult.onsuccess = function () {\n                        onInsertData(value);\n                        res();\n                    };\n                });\n            })\n        ).then(() => {\n            MetaHelper.set(MetaHelper.dbSchema, db, this.util);\n        });\n    }\n}","import { setCrossBrowserIndexedDb } from \"@worker/utils\";\n\nexport const IS_WORKER = typeof (self as any).alert === 'undefined' && typeof ServiceWorkerGlobalScope === 'undefined';\nexport const IS_IDB_SUPPORTED = setCrossBrowserIndexedDb();","export const setCrossBrowserIndexedDb = () => {\n    try {\n        if (!indexedDB) {\n            indexedDB = (self as any).mozIndexedDB ||\n                (self as any).webkitIndexedDB || (self as any).msIndexedDB;\n        }\n        if (indexedDB) {\n            IDBTransaction = IDBTransaction ||\n                (self as any).webkitIDBTransaction || (self as any).msIDBTransaction;\n            (self as any).IDBKeyRange = (self as any).IDBKeyRange ||\n                (self as any).webkitIDBKeyRange || (self as any).msIDBKeyRange;\n        }\n        else {\n            return false;\n        }\n    } catch (ex) {\n        return false;\n    }\n    return true;\n};","export const getKeys = (value) => {\n    return Object.keys(value);\n};","export const isArray = (value) => {\n    return Array.isArray(value);\n};","import { getKeys } from \"./get_keys\"\n\nexport const getLength = (value): Number => {\n    return getKeys(value).length;\n}","export const getObjectFirstKey = (value) => {\n    for (const key in value) {\n        return key;\n    }\n};","import { CaseOption, QUERY_OPTION } from \"@/common\";\n\nexport class ThenEvaluator {\n    private columnName_: string;\n    private value;\n    private caseQuery_: { [columnName: string]: [CaseOption] };\n    private caseColumnQuery_: CaseOption[];\n    private length_: number;\n\n    setCaseAndValue(caseQuery: any, value) {\n        this.caseQuery_ = caseQuery;\n        this.setValue(value);\n    }\n\n    setCaseAndColumn(caseQuery: { [columnName: string]: [CaseOption] }, columnName: string) {\n        this.caseQuery_ = caseQuery;\n        this.setColumn(columnName);\n        return this;\n    }\n\n    setColumn(columnName: string) {\n        this.columnName_ = columnName;\n        this.caseColumnQuery_ = this.caseQuery_[this.columnName_];\n        this.length_ = this.caseColumnQuery_.length;\n        return this;\n    }\n\n    setValue(value) {\n        this.value = value;\n        return this;\n    }\n\n    evaluate() {\n        for (let i = 0; i < this.length_; i++) {\n            if (this.checkCase_(this.caseColumnQuery_[i]) === true) {\n                return this.caseColumnQuery_[i].then;\n            }\n        }\n        const lastThen = this.caseColumnQuery_[this.length_ - 1].then;\n        return lastThen == null ? this.value[this.columnName_] : lastThen;\n    }\n\n    private checkCase_(cond: CaseOption) {\n        let queryOption;\n        for (queryOption in cond) {\n            switch (queryOption) {\n                case QUERY_OPTION.GreaterThan:\n                    if (this.value[this.columnName_] > cond[queryOption]) {\n                        return true;\n                    } break;\n                case QUERY_OPTION.Equal:\n                    if (this.value[this.columnName_] === cond[queryOption]) {\n                        return true;\n                    } break;\n                case QUERY_OPTION.LessThan:\n                    if (this.value[this.columnName_] < cond[queryOption]) {\n                        return true;\n                    } break;\n                case QUERY_OPTION.GreaterThanEqualTo:\n                    if (this.value[this.columnName_] >= cond[queryOption]) {\n                        return true;\n                    } break;\n                case QUERY_OPTION.LessThanEqualTo:\n                    if (this.value[this.columnName_] <= cond[queryOption]) {\n                        return true;\n                    } break;\n                case QUERY_OPTION.NotEqualTo:\n                    if (this.value[this.columnName_] !== cond[queryOption]) {\n                        return true;\n                    } break;\n                case QUERY_OPTION.Between:\n                    if (this.value[this.columnName_] > cond[queryOption].low && this.value[this.columnName_] < cond[queryOption].high) {\n                        return true;\n                    } break;\n            }\n            return false;\n        }\n    }\n}","import { Select } from \"./index\";\nimport { LogHelper, promiseReject, getError } from \"@/worker/utils\";\nimport { ERROR_TYPE, promise } from \"@/common\";\n\nexport const executeWhereUndefinedLogic = function (this: Select) {\n    let cursorRequest: IDBRequest;\n    if (this.query.order && this.query.order.idbSorting !== false && this.query.order.by) {\n        if (this.objectStore.indexNames.contains(this.query.order.by as string)) {\n            const orderType: IDBCursorDirection = this.query.order.type &&\n                this.query.order.type.toLowerCase() === 'desc' ? 'prev' : 'next';\n            this.sorted = true;\n            cursorRequest = this.objectStore.index(this.query.order.by as string).\n                openCursor(null, orderType);\n        }\n        else {\n            return promiseReject(\n                new LogHelper(\n                    ERROR_TYPE.ColumnNotExist,\n                    { column: this.query.order.by, isOrder: true }\n                )\n            );\n        }\n    }\n    else {\n        cursorRequest = this.objectStore.openCursor();\n    }\n    const onSuccess = (() => {\n        if (this.shouldEvaluateLimitAtEnd === false && this.shouldEvaluateSkipAtEnd === false) {\n            if (this.skipRecord && this.limitRecord) {\n                return executeSkipAndLimit;\n            }\n            else if (this.skipRecord) {\n                return executeSkip;\n            }\n            else if (this.limitRecord) {\n                return executeLimit;\n            }\n        }\n        return executeSimple;\n    })();\n    return promise<void>((res, rej) => {\n        cursorRequest.onerror = rej;\n        cursorRequest.onsuccess = onSuccess.call(this, res);\n    });\n}\n\nconst executeSkipAndLimit = function (this: Select, onFinished) {\n    let recordSkipped = false,\n        cursor: IDBCursorWithValue;\n    return (e) => {\n        cursor = (e as any).target.result;\n        if (cursor) {\n            if (recordSkipped && this.results.length !== this.limitRecord) {\n                this.pushResult(cursor.value);\n                cursor.continue();\n            }\n            else {\n                recordSkipped = true;\n                cursor.advance(this.skipRecord);\n            }\n        } else {\n            onFinished();\n        }\n    };\n}\n\nconst executeSkip = function (this: Select, onFinished) {\n    let recordSkipped = false,\n        cursor;\n    return (e: any) => {\n        cursor = e.target.result;\n        if (cursor) {\n            if (recordSkipped) {\n                this.pushResult(cursor.value);\n                cursor.continue();\n            }\n            else {\n                recordSkipped = true;\n                cursor.advance(this.skipRecord);\n            }\n        } else {\n            onFinished();\n        }\n    };\n}\n\nconst executeSimple = function (this: Select, onFinished) {\n    let cursor;\n    return (e: any) => {\n        cursor = e.target.result;\n        if (cursor) {\n            this.pushResult(cursor.value);\n            (cursor as any).continue();\n        }\n        else {\n            onFinished();\n        }\n    };\n}\n\nconst executeLimit = function (this: Select, onFinished) {\n    let cursor;\n    return (e: any) => {\n        cursor = e.target.result;\n        if (cursor && this.results.length !== this.limitRecord) {\n            this.pushResult(cursor.value);\n            cursor.continue();\n        } else {\n            onFinished();\n        }\n    };\n}\n","export const removeSpace = (value: string) => {\n    return value.replace(/\\s/g, '');\n};","import { Select } from \"./\";\nimport { IColumn } from \"@/worker/interfaces\";\nimport { removeSpace, getDataType, getError, LogHelper } from \"@/worker/utils\";\nimport { ERROR_TYPE, DATA_TYPE, CaseOption, OrderQuery } from \"@/common\";\n\nexport const processGroupDistinctAggr = function (this: Select) {\n    if (this.query.distinct) {\n        const groupBy = [];\n        const result = this.results[0];\n        for (const key in result) {\n            groupBy.push(key);\n        }\n        const primaryKey = this.primaryKey(),\n            index = groupBy.indexOf(primaryKey);\n        groupBy.splice(index, 1);\n        this.query.groupBy = groupBy.length > 0 ? groupBy : null;\n    }\n    if (this.query.groupBy) {\n        if (this.query.aggregate) {\n            this.executeAggregateGroupBy();\n        }\n        else {\n            this.processGroupBy();\n        }\n    }\n    else if (this.query.aggregate) {\n        this.processAggregateQry();\n    }\n};\n\nconst getOrderColumnInfo = function (this: Select, orderColumn: string) {\n    let column: IColumn;\n    if (this.query.join == null) {\n        column = this.getColumnInfo(orderColumn);\n    }\n    else {\n        const splittedByDot = removeSpace(orderColumn).split(\".\");\n        orderColumn = splittedByDot[1];\n        column = this.getColumnInfo(orderColumn, splittedByDot[0]);\n    }\n    if (column == null) {\n        const valueFromFirstColumn = this.results[0][orderColumn];\n        if (valueFromFirstColumn) {\n            return {\n                dataType: getDataType(valueFromFirstColumn),\n                name: orderColumn\n            } as IColumn;\n        }\n        throw new LogHelper(ERROR_TYPE.ColumnNotExist,\n            { column: orderColumn, isOrder: true }\n        )\n\n    }\n    return column;\n}\n\nconst compareStringInDesc_ = (a: string, b: string) => {\n    return b.localeCompare(a);\n}\n\nconst compareStringinAsc_ = (a: string, b: string) => {\n    return a.localeCompare(b);\n}\n\nconst compareDefaultInDesc_ = (a: string, b) => {\n    return new String(b).localeCompare(a);\n}\n\nconst compareDefaultinAsc_ = (a, b: string) => {\n    return new String(a).localeCompare(b);\n}\n\nconst compareNumberInDesc_ = (a: number, b: number) => {\n    return b - a;\n}\n\nconst compareNumberinAsc_ = (a: number, b: number) => {\n    return a - b;\n}\n\nconst compareDateInDesc_ = (a: Date, b: Date) => {\n    return b.getTime() - a.getTime();\n}\n\nconst compareDateInAsc_ = (a: Date, b: Date) => {\n    return a.getTime() - b.getTime();\n}\n\nconst getValInDesc_ = function (this: Select, value1, value2, caseQuery: { [columnName: string]: [CaseOption] }) {\n    for (const columnName in caseQuery) {\n        this.thenEvaluator.setCaseAndValue(caseQuery, value1);\n        const column1 = this.thenEvaluator.setColumn(columnName).evaluate();\n        this.thenEvaluator.setCaseAndValue(caseQuery, value2);\n        const column2 = this.thenEvaluator.setColumn(columnName).evaluate();\n        switch (typeof value1[column1]) {\n            case DATA_TYPE.String:\n                return compareStringInDesc_(value1[column1], value2[column2]);\n            default:\n                return compareNumberInDesc_(value1[column1], value2[column2]);\n        }\n    }\n}\n\nconst getValInAsc_ = function (this: Select, value1, value2, caseQuery: { [columnName: string]: [CaseOption] }) {\n    for (const columnName in caseQuery) {\n        this.thenEvaluator.setCaseAndValue(caseQuery, value1);\n        const column1 = this.thenEvaluator.setColumn(columnName).evaluate();\n        this.thenEvaluator.setCaseAndValue(caseQuery, value2);\n        const column2 = this.thenEvaluator.setColumn(columnName).evaluate();\n        switch (typeof value1[column1]) {\n            case DATA_TYPE.String:\n                return compareStringinAsc_(value1[column1], value2[column2]);\n            default:\n                return compareNumberinAsc_(value1[column1], value2[column2]);\n        }\n    }\n}\n\nconst getValueComparer_ = (column: IColumn, order: OrderQuery): (a, b) => number => {\n    switch (column.dataType) {\n        case DATA_TYPE.String:\n            return order.type === 'asc' ? compareStringinAsc_ : compareStringInDesc_;\n        case DATA_TYPE.Number:\n            return order.type === 'asc' ? compareNumberinAsc_ : compareNumberInDesc_;\n        case DATA_TYPE.DateTime:\n            return order.type === 'asc' ? compareDateInAsc_ : compareDateInDesc_;\n        default:\n            return order.type === 'asc' ? compareDefaultinAsc_ : compareDefaultInDesc_;\n    }\n\n}\n\nconst orderBy_ = function (this: Select, order: OrderQuery) {\n    order.type = getOrderType_(order.type);\n    let orderColumn = order.by;\n    if (orderColumn != null && typeof orderColumn === DATA_TYPE.Object) {\n        if (order.type === \"asc\") {\n            this.results.sort((a, b) => {\n                return getValInAsc_.call(this, a, b, orderColumn as any);\n            });\n        }\n        else {\n            this.results.sort((a, b) => {\n                return getValInDesc_.call(this, a, b, orderColumn as any);\n            });\n        }\n    }\n    else {\n        const columnInfo = getOrderColumnInfo.call(this, orderColumn as string);\n        if (columnInfo != null) {\n            const orderMethod = getValueComparer_(columnInfo, order);\n            orderColumn = columnInfo.name;\n            if (order.case == null) {\n                this.results.sort((a, b) => {\n                    return orderMethod(a[orderColumn as string], b[orderColumn as string]);\n                });\n            }\n            else {\n                this.thenEvaluator.setCaseAndColumn({ [orderColumn as string]: order.case }, orderColumn as string);\n                this.results.sort((a, b) => {\n                    return orderMethod(\n                        this.thenEvaluator.setValue(a).evaluate(),\n                        this.thenEvaluator.setValue(b).evaluate()\n                    );\n                });\n            }\n        }\n    }\n\n}\n\nconst getOrderType_ = (type: string) => {\n    return type == null ? 'asc' : type.toLowerCase();\n}\n\nexport const processOrderBy = function (this: Select) {\n    const order = this.query.order;\n    if (order && this.results.length > 0 && !this.sorted) {\n        const orderQueryType = getDataType(order);\n        if (orderQueryType === DATA_TYPE.Object) {\n            orderBy_.call(this, order);\n        }\n        else if (orderQueryType === DATA_TYPE.Array) {\n            orderBy_.call(this, order[0]);\n            for (let i = 1, length = (order as any).length; i < length; i++) {\n                // if (this.error == null) {\n                const prevOrderQueryBy = order[i - 1].by;\n                const currentOrderQuery: OrderQuery = order[i];\n                let currentorderQueryBy = currentOrderQuery.by;\n                const orderColumnDetail = getOrderColumnInfo.call(this, currentorderQueryBy as string);\n                if (orderColumnDetail != null) {\n                    currentorderQueryBy = orderColumnDetail.name;\n                    currentOrderQuery.type = getOrderType_(currentOrderQuery.type);\n                    const orderMethod = getValueComparer_(orderColumnDetail, currentOrderQuery);\n                    this.results.sort((a, b) => {\n                        if (a[prevOrderQueryBy] === b[prevOrderQueryBy]) {\n                            return orderMethod(\n                                a[currentorderQueryBy as string],\n                                b[currentorderQueryBy as string]);\n                        }\n                        return 0;\n                    });\n                }\n                // }\n            }\n        }\n    }\n}\n\nexport const processAggregateQry = function (this: Select) {\n    const datas = this.results;\n    const datasLength = datas.length;\n    const results = {};\n    let columnToAggregate;\n    // free results memory\n    this.results = undefined;\n    const getCount = () => {\n        let result = 0;\n        for (const i in datas) {\n            result += datas[i][columnToAggregate] ? 1 : 0;\n        }\n        return result;\n    };\n    const getMax = () => {\n        let result = 0;\n        for (const i in datas) {\n            result = result > datas[i][columnToAggregate] ?\n                result : datas[i][columnToAggregate];\n        }\n        return result;\n    };\n    const getMin = () => {\n        let result = Infinity, value = Infinity;\n        for (const i in datas) {\n            value = datas[i][columnToAggregate] ?\n                datas[i][columnToAggregate] : Infinity;\n            result = result < value ? result : value;\n        }\n        return result;\n    };\n    const getSum = () => {\n        let result = 0;\n        for (const i in datas) {\n            result += datas[i][columnToAggregate];\n        }\n        return result;\n    };\n    const getAvg = () => {\n        let result = 0;\n        for (const i in datas) {\n            result += datas[i][columnToAggregate];\n        }\n        return result / datasLength;\n    };\n    for (const prop in this.query.aggregate) {\n        const aggregateColumn = this.query.aggregate[prop];\n        const aggregateValType = getDataType(aggregateColumn);\n        let aggregateCalculator;\n        switch (prop) {\n            case 'count':\n                aggregateCalculator = getCount; break;\n            case 'max':\n                aggregateCalculator = getMax; break;\n            case 'min':\n                aggregateCalculator = getMin; break;\n            case 'sum':\n                aggregateCalculator = getSum; break;\n            case 'avg':\n                aggregateCalculator = getAvg; break;\n        }\n        switch (aggregateValType) {\n            case DATA_TYPE.String:\n                columnToAggregate = aggregateColumn;\n                results[`${prop}(${columnToAggregate})`] = aggregateCalculator();\n                break;\n            case DATA_TYPE.Array:\n                for (const key in aggregateColumn) {\n                    columnToAggregate = aggregateColumn[key];\n                    results[`${prop}(${columnToAggregate})`] = aggregateCalculator();\n                }\n        }\n    }\n\n    // add results to the first index of result\n    for (const prop in results) {\n        datas[0][prop] = results[prop];\n    }\n    this.results = [datas[0]];\n}","import { Select } from \"./\";\nimport { promise } from \"@/common\";\nimport { BaseFetch } from \"../base_fetch\";\n\nexport const executeWhereLogic = function (this: BaseFetch, column, value, op, dir) {\n\n    value = op ? value[op] : value;\n    const cursorRequest = this.objectStore.index(column).openCursor(\n        this.util.keyRange(value, op),\n        dir\n    );\n\n    const onSuccess = (() => {\n        if (this.shouldEvaluateLimitAtEnd === false && this.shouldEvaluateSkipAtEnd === false) {\n            if (this.skipRecord && this.limitRecord) {\n                return executeSkipAndLimitForWhere_;\n            }\n            else if (this.skipRecord) {\n                return executeSkipForWhere_;\n            }\n            else if (this.limitRecord) {\n                return executeLimitForWhere_;\n            }\n\n        }\n        return executeSimpleForWhere_;\n    })();\n\n    return promise<any>((res, rej) => {\n        cursorRequest.onerror = rej;\n        cursorRequest.onsuccess = onSuccess.call(this, res);\n    })\n\n}\n\nconst executeSkipAndLimitForWhere_ = function (this: Select, onFinish) {\n    let recordSkipped = false;\n    return (e: any) => {\n        const cursor: IDBCursorWithValue = e.target.result;\n        if (cursor) {\n            if (recordSkipped && this.results.length !== this.limitRecord) {\n                const value = cursor.value;\n                if (this.shouldAddValue(value)) {\n                    this.pushResult(value);\n                }\n                cursor.continue();\n            }\n            else {\n                recordSkipped = true;\n                cursor.advance(this.skipRecord);\n            }\n        }\n        else {\n            onFinish();\n        }\n    };\n}\n\nconst executeSkipForWhere_ = function (this: Select, onFinish) {\n    let recordSkipped = false;\n    return (e: any) => {\n        const cursor = e.target.result;\n        if (cursor) {\n            if (recordSkipped) {\n                const value = cursor.value;\n                if (this.shouldAddValue(value)) {\n                    this.pushResult(value);\n                }\n                cursor.continue();\n            }\n            else {\n                recordSkipped = true;\n                cursor.advance(this.skipRecord);\n            }\n        }\n        else {\n            onFinish();\n        }\n    };\n}\n\nconst executeLimitForWhere_ = function (this: Select, onFinish) {\n    return (e: any) => {\n        const cursor = e.target.result;\n        if (cursor && this.results.length !== this.limitRecord) {\n            const value = cursor.value;\n            if (this.shouldAddValue(value)) {\n                this.pushResult(value);\n            }\n            cursor.continue();\n        }\n        else {\n            onFinish();\n        }\n    };\n\n}\n\nconst executeSimpleForWhere_ = function (this: Select, onFinish) {\n    return (e: any) => {\n        const cursor: IDBCursorWithValue = e.target.result;\n        if (cursor) {\n            const value = cursor.value;\n            if (this.shouldAddValue(value)) {\n                this.pushResult(value);\n            }\n            cursor.continue();\n        }\n        else {\n            onFinish();\n        }\n    };\n}","import { OCCURENCE } from \"@/common\";\n\nexport const getRegexFromLikeExpression = (likeExpression: string) => {\n    const filterValues = likeExpression.split('%');\n    let filterValue: string;\n    let occurence: OCCURENCE;\n    if (filterValues[1]) {\n        filterValue = filterValues[1];\n        occurence = filterValues.length > 2 ? OCCURENCE.Any : OCCURENCE.Last;\n    }\n    else {\n        filterValue = filterValues[0];\n        occurence = OCCURENCE.First;\n    }\n    switch (occurence) {\n        case OCCURENCE.First:\n            return new RegExp(`^${filterValue}`, 'i');\n        case OCCURENCE.Last:\n            return new RegExp(`${filterValue}$`, 'i');\n        default:\n            return new RegExp(`${filterValue}`, 'i');\n    }\n}","import { getDataType } from \"./get_data_type\";\n\nconst isObject = (value) => {\n    return getDataType(value) === 'object' && !(value instanceof RegExp);\n};\n\nexport const clone = (obj) => {\n    if (isObject(obj)) {\n        const copy = {};\n        for (const i in obj) {\n            copy[i] = obj[i] != null && isObject(obj[i]) ? clone(obj[i]) : obj[i];\n        }\n        return copy;\n    }\n    return obj;\n};","import { getDataType } from \"./get_data_type\"\nimport { DATA_TYPE } from \"../../main\";\nimport { QUERY_OPTION } from \"@/common\";\n\nexport const compare = (value, compareValue, symbol?) => {\n    const type1 = getDataType(value);\n    const type2 = getDataType(compareValue);\n\n    if (type1 !== type2) return false;\n    if (type1 === DATA_TYPE.DateTime) {\n        value = value.getTime();\n        compareValue = compareValue.getTime();\n    }\n    switch (symbol) {\n        // greater than\n        case QUERY_OPTION.GreaterThan:\n            return value > compareValue;\n        // less than\n        case QUERY_OPTION.LessThan:\n            return value < compareValue;\n        // less than equal\n        case QUERY_OPTION.LessThanEqualTo:\n            return value <= compareValue;\n        // greather than equal\n        case QUERY_OPTION.GreaterThanEqualTo:\n            return value >= compareValue;\n        // Not equal to\n        case QUERY_OPTION.NotEqualTo:\n            return value !== compareValue;\n        default:\n            return value === compareValue;\n    }\n}","import { QUERY_OPTION } from \"@/common\";\nimport { getDataType, clone, compare, getRegexFromLikeExpression } from \"@worker/utils\";\n\n/**\n * For matching the different column value existance for where option\n * \n * @export\n * @class WhereChecker\n */\nexport class WhereChecker {\n  where: object;\n  checkFlag: boolean;\n\n  constructor(where: object, checkFlag: boolean) {\n    this.where = clone(where);\n    this.checkFlag = checkFlag;\n  }\n\n  remove(props: string[]) {\n    const last = props.pop();\n    const value = props.reduce((prev, curr) => prev && prev[curr], this.where);\n    delete value[last];\n  }\n\n  check(rowValue) {\n    let status = true;\n    if (!this.checkFlag) return status;\n    for (let columnName in this.where) {\n      if (!status) {\n        return status;\n      }\n      const whereColumnValue = this.where[columnName];\n      const columnValue = rowValue[columnName];\n      if (getDataType(whereColumnValue) === \"object\") {\n        for (const key in whereColumnValue) {\n          if (!status) {\n            return status;\n          }\n          switch (key) {\n            case QUERY_OPTION.In:\n              status = this.checkIn(columnName, columnValue);\n              break;\n            case QUERY_OPTION.Like:\n              status = this.checkLike_(columnName, columnValue);\n              break;\n            case QUERY_OPTION.Regex:\n              status = this.checkRegex(columnName, columnValue);\n              break;\n            case QUERY_OPTION.Between:\n            case QUERY_OPTION.GreaterThan:\n            case QUERY_OPTION.LessThan:\n            case QUERY_OPTION.GreaterThanEqualTo:\n            case QUERY_OPTION.LessThanEqualTo:\n            case QUERY_OPTION.NotEqualTo:\n              status = this.checkComparisionOp_(columnName, columnValue, key);\n              break;\n            default:\n              status = false;\n          }\n        }\n      }\n      else {\n        status = compare(whereColumnValue, columnValue);\n      }\n    }\n    return status;\n  }\n\n  private checkIn(column, value) {\n    return (this.where[column][QUERY_OPTION.In] as any[]).find(q => compare(q, value)) != null;\n  }\n\n  private checkLike_(column, value) {\n    return getRegexFromLikeExpression(this.where[column][QUERY_OPTION.Like]).test(value);\n  }\n\n  private checkRegex(column, value) {\n    return this.where[column][QUERY_OPTION.Regex].test(value);\n  }\n\n  private checkComparisionOp_(column, value, symbol) {\n    const compareValue = this.where[column][symbol];\n    if (symbol != QUERY_OPTION.Between) {\n      return compare(value, compareValue, symbol);\n    }\n    return compare(value, compareValue.low, '>=') &&\n      compare(value, compareValue.high, '<=');\n  }\n}","import { Base } from \"./base\";\nimport { SelectQuery, QUERY_OPTION, ERROR_TYPE } from \"@/common\";\nimport { getRegexFromLikeExpression, promiseReject } from \"@worker/utils\";\nimport { LogHelper, getObjectFirstKey, getDataType, getLength, getError } from \"@worker/utils\";\nimport { WhereChecker } from \"./where_checker\";\nimport { executeWhereLogic } from \"./select/where\";\nimport { executeInLogic } from \"./select/in\";\nimport { executeRegexLogic } from \"./select/regex\";\n\nexport class BaseFetch extends Base {\n    query: SelectQuery;\n    whereCheckerInstance: WhereChecker;\n    executeWhereLogic: typeof executeWhereLogic;\n    skipRecord;\n    limitRecord;\n    shouldEvaluateLimitAtEnd = false;\n    shouldEvaluateSkipAtEnd = false;\n    executeInLogic: typeof executeInLogic;\n    executeRegexLogic: typeof executeRegexLogic;\n\n    resultCount: number;\n\n    protected shouldAddValue: (value) => boolean;\n    protected goToWhereLogic() {\n        const query = this.query as SelectQuery;\n        const firstColumn = getObjectFirstKey(query.where);\n        if (this.objectStore.indexNames.contains(firstColumn)) {\n            const value = query.where[firstColumn];\n            if (getDataType(value) === 'object') {\n                const checkFlag = getLength(value) > 1 ||\n                    getLength(query.where) > 1\n\n                this.whereCheckerInstance = new WhereChecker(query.where, checkFlag);\n                const key = getObjectFirstKey(value);\n                this.whereCheckerInstance.remove([firstColumn, key]);\n                switch (key) {\n                    case QUERY_OPTION.Like: {\n                        const regexVal = getRegexFromLikeExpression(value[QUERY_OPTION.Like]);\n                        return this.executeRegexLogic(firstColumn, regexVal);\n                    }\n                    case QUERY_OPTION.Regex:\n                        return this.executeRegexLogic(firstColumn, value[QUERY_OPTION.Regex]);\n                    case QUERY_OPTION.In:\n                        return this.executeInLogic(\n                            firstColumn, value[QUERY_OPTION.In]\n                        );\n                    case QUERY_OPTION.Between:\n                    case QUERY_OPTION.GreaterThan:\n                    case QUERY_OPTION.LessThan:\n                    case QUERY_OPTION.GreaterThanEqualTo:\n                    case QUERY_OPTION.LessThanEqualTo:\n                        return this.executeWhereLogic(firstColumn, value, key, \"next\");\n                    case QUERY_OPTION.Aggregate: break;\n                    default:\n                        return this.executeWhereLogic(firstColumn, value, null, \"next\");\n                }\n            }\n            else {\n                const checkFlag = getLength(query.where) > 1;\n                this.whereCheckerInstance = new WhereChecker(query.where, checkFlag);\n                this.whereCheckerInstance.remove([firstColumn]);\n                return this.executeWhereLogic(firstColumn, value, null, \"next\");\n            }\n        }\n        else {\n            const column = this.getColumnInfo(firstColumn);\n            const error = column == null ?\n                new LogHelper(ERROR_TYPE.ColumnNotExist, { column: firstColumn }) :\n                new LogHelper(ERROR_TYPE.EnableSearchOff, { column: firstColumn });\n            return promiseReject(\n                error\n            );\n        }\n    }\n\n}","import { Select } from \"./\";\nimport { promise, promiseAll } from \"@/common\";\nimport { BaseFetch } from \"../base_fetch\";\n\nexport const executeInLogic = function (this: BaseFetch, column, values) {\n    let skip = this.skipRecord;\n    const skipOrPush = (val) => {\n        if (skip === 0) {\n            (this as Select).pushResult(val);\n        }\n        else {\n            --skip;\n        }\n    };\n    const onSuccess = (() => {\n        if (this.shouldEvaluateLimitAtEnd === false && this.shouldEvaluateSkipAtEnd === false) {\n            if (this.skipRecord && this.limitRecord) {\n                return executeSkipAndLimitForIn_;\n            }\n            else if (this.skipRecord) {\n                return executeSkipForIn_;\n            }\n            else if (this.limitRecord) {\n                executeLimitForIn_;\n            }\n        }\n        return executeSimpleForIn_;\n    })();\n\n    const columnStore = this.objectStore.index(column);\n    const runInLogic: (val) => Promise<void> = (value) => {\n        return promise((res, rej) => {\n            const cursorRequest = columnStore.openCursor(this.util.keyRange(value));\n            cursorRequest.onsuccess = onSuccess.call(this, res, skipOrPush);\n            cursorRequest.onerror = rej;\n        });\n    };\n\n    return promiseAll<void>(\n        values.map(function (val) {\n            return runInLogic(val);\n        })\n    );\n\n};\n\nconst executeSkipAndLimitForIn_ = function (this: Select, onFinish, skipOrPush) {\n    return (e: any) => {\n        const cursor: IDBCursorWithValue = e.target.result;\n        if (this.results.length !== this.limitRecord && cursor) {\n            const value = cursor.value;\n            if (this.shouldAddValue(value)) {\n                skipOrPush(value);\n            }\n            cursor.continue();\n        }\n        else {\n            onFinish();\n        }\n    };\n}\n\nconst executeSkipForIn_ = function (this: Select, onFinish, skipOrPush) {\n\n    return (e: any) => {\n        const cursor: IDBCursorWithValue = e.target.result;\n        if (cursor) {\n            const value = cursor.value\n            if (this.shouldAddValue(value)) {\n                skipOrPush(value);\n            }\n            cursor.continue();\n        }\n        else {\n            onFinish();\n        }\n    };\n}\n\nconst executeLimitForIn_ = function (this: Select, onFinish) {\n    return (e: any) => {\n        const cursor: IDBCursorWithValue = e.target.result;\n        if (cursor && this.results.length !== this.limitRecord) {\n            const value = cursor.value;\n            if (this.shouldAddValue(value)) {\n                this.pushResult(cursor.value);\n            }\n            cursor.continue();\n        }\n        else {\n            onFinish();\n        }\n    };\n\n}\n\nconst executeSimpleForIn_ = function (this: Select, onFinish) {\n    return (e: any) => {\n        const cursor: IDBCursorWithValue = e.target.result;\n        if (cursor) {\n            const value = cursor.value\n            if (this.shouldAddValue(value)) {\n                this.pushResult(value);\n            }\n            cursor.continue();\n        }\n        else {\n            onFinish();\n        }\n    };\n}","import { BaseFetch } from \"../base_fetch\";\nimport { Select } from \".\";\nimport { promise } from \"@/common\";\n\n\nexport const executeRegexLogic = function (this: BaseFetch, column, exp: RegExp) {\n\n    let skip = this.skipRecord;\n    const skipOrPush = (val) => {\n        if (skip === 0) {\n            (this as Select).pushResult(val);\n        }\n        else {\n            --skip;\n        }\n    };\n    this.shouldAddValue = (cursor) => {\n        return exp.test(cursor.key) &&\n            this.whereCheckerInstance.check(cursor.value);\n    };\n\n    const cursorRequest = this.objectStore.index(column).openCursor();\n\n    const onSuccess = (() => {\n        if (this.shouldEvaluateLimitAtEnd === false && this.shouldEvaluateSkipAtEnd === false) {\n            if (this.skipRecord && this.limitRecord) {\n                return executeSkipAndLimitForRegex_;\n            }\n            else if (this.skipRecord) {\n                return executeSkipForRegex_;\n            }\n            else if (this.limitRecord) {\n                return executeLimitForRegex_;\n            }\n        }\n        return executeSimpleForRegex_;\n    })();\n\n    return promise<any>((res, rej) => {\n        cursorRequest.onerror = rej;\n        cursorRequest.onsuccess = onSuccess.call(this, res, skipOrPush);\n    })\n\n}\n\nconst executeSkipAndLimitForRegex_ = function (this: Select, onFinish, skipOrPush) {\n    return (e: any) => {\n        const cursor = e.target.result;\n        if (this.results.length !== this.limitRecord && cursor) {\n            if (this.shouldAddValue(cursor)) {\n                skipOrPush(cursor.value);\n            }\n            cursor.continue();\n        } else {\n            onFinish();\n        }\n    };\n}\n\nconst executeSkipForRegex_ = function (this: Select, onFinish, skipOrPush) {\n    return (e: any) => {\n        const cursor = e.target.result;\n        if (cursor) {\n            if (this.shouldAddValue(cursor)) {\n                skipOrPush((cursor.value));\n            }\n            cursor.continue();\n        } else {\n            onFinish();\n        }\n    };\n}\n\nconst executeLimitForRegex_ = function (this: Select, onFinish) {\n    return (e: any) => {\n        const cursor = e.target.result;\n        if (this.results.length !== this.limitRecord && cursor) {\n            if (this.shouldAddValue(cursor)) {\n                this.pushResult(cursor.value);\n            }\n            cursor.continue();\n        } else {\n            onFinish();\n        }\n    };\n}\n\nconst executeSimpleForRegex_ = function (this: Select, onFinish) {\n    return (e: any) => {\n        const cursor = e.target.result;\n        if (cursor) {\n            if (this.shouldAddValue(cursor)) {\n                this.pushResult(cursor.value);\n            }\n            cursor.continue();\n        } else {\n            onFinish();\n        }\n    };\n}\n","import { Select } from \"./\";\nimport { JoinQuery, DATA_TYPE, ERROR_TYPE, SelectQuery } from \"@/common\";\nimport { getDataType, LogHelper, removeSpace, promiseReject } from \"@/worker/utils\";\n\n\nexport const executeJoinQuery = function (this: Select) {\n    return new Join(this).execute();\n}\n\ninterface JoinQueryWithInfo extends JoinQuery {\n    joinTableInfo: JoinTableInfo\n}\n\nexport class Join {\n\n    private joinQueryStack_: JoinQueryWithInfo[] = [];\n    private currentQueryStackIndex_ = 0;\n    tablesFetched = [];\n    results = [];\n\n    select: Select;\n    constructor(select: Select) {\n        this.select = select;\n    }\n\n    get query() {\n        return this.select.query;\n    }\n\n    getTable(name: string) {\n        return this.select.table(name);\n    }\n\n    private executeSelect(query: SelectQuery) {\n        // this.select.util.emptyTx();\n        return new Select(query, this.select.util).\n            execute(this.select.db);\n    }\n\n    execute() {\n        const query = this.query;\n        this.joinQueryStack_ = getDataType(query.join) === DATA_TYPE.Object ?\n            [query.join as JoinQueryWithInfo] : query.join as JoinQueryWithInfo[];\n        // get the data for first table\n        const tableName = query.from;\n        const tablesToFetch = [tableName];\n        for (let i = 0, length = this.joinQueryStack_.length; i < length; i++) {\n            const item = this.joinQueryStack_[i];\n            let jointblInfo = this.getJoinTableInfo_(item.on);\n            // table 1 is fetched & table2 needs to be fetched for join\n            if (item.with === jointblInfo.table1.table) {\n                jointblInfo = {\n                    table1: jointblInfo.table2,\n                    table2: jointblInfo.table1\n                };\n            }\n\n            const err = this.checkJoinQuery_(jointblInfo, item);\n            if (err) {\n                return promiseReject(err);\n            }\n            this.joinQueryStack_[i].joinTableInfo = jointblInfo;\n            tablesToFetch.push(item.with)\n        }\n\n        if (!this.select.isTxQuery) {\n            this.select.util.createTransaction(tablesToFetch);\n        }\n\n        return this.executeSelect({\n            from: tableName,\n            where: query.where,\n            case: query.case,\n            flatten: query.flatten\n        }).then(results => {\n            this.results = results.map((item) => {\n                return {\n                    [this.currentQueryStackIndex_]: item\n                };\n            });\n            this.tablesFetched.push(tableName);\n            return this.startExecutingJoinLogic_();\n        });\n    }\n\n    private onJoinQueryFinished_() {\n        // const query = this.query;\n        if (this.results.length > 0) {\n\n            try {\n                let results = [];\n                const tables = Object.keys(this.results[0]);\n                const tablesLength = tables.length;\n                const mapWithAlias = (query: JoinQuery, value: object) => {\n                    if (query.as != null) {\n                        for (const key in query.as) {\n                            if (value[(query.as as any)[key]] === undefined) {\n                                value[(query.as as any)[key]] = value[key];\n                                delete value[key];\n                            }\n                        }\n                    }\n                    return value;\n                };\n                this.results.forEach((result) => {\n                    let data = result[\"0\"]; // first table data\n                    for (let i = 1; i < tablesLength; i++) {\n                        const query = this.joinQueryStack_[i - 1];\n                        data = { ...data, ...mapWithAlias(query, result[i]) };\n                    }\n                    results.push(data);\n                });\n                this.select['results'] = results;\n                this.select.setLimitAndSkipEvaluationAtEnd_();\n                this.select.query.flatten = null;\n                if (process.env.NODE_ENV === 'dev') {\n                    try {\n                        this.select.processOrderBy();\n                    }\n                    catch (ex) {\n                        return promiseReject(\n                            new LogHelper(ERROR_TYPE.InvalidOrderQuery, ex.message)\n                        );\n                    }\n                }\n                else {\n                    this.select.processOrderBy();\n                }\n\n                if (process.env.NODE_ENV === 'dev') {\n                    try {\n                        this.select.processGroupDistinctAggr();\n                    }\n                    catch (ex) {\n                        return promiseReject(\n                            new LogHelper(ERROR_TYPE.InvalidGroupQuery, ex.message)\n                        );\n                    }\n                }\n                else {\n                    this.select.processGroupDistinctAggr();\n                }\n            }\n            catch (ex) {\n                return promiseReject(\n                    new LogHelper(ERROR_TYPE.InvalidJoinQuery, ex.message)\n                );\n            }\n        }\n        return;\n    }\n\n    private startExecutingJoinLogic_() {\n        const joinQuery = this.joinQueryStack_[this.currentQueryStackIndex_];\n        if (joinQuery) {\n            try {\n                let jointblInfo = joinQuery.joinTableInfo;\n                return this.executeSelect({\n                    from: joinQuery.with,\n                    where: joinQuery.where,\n                    case: joinQuery.case,\n                    flatten: joinQuery.flatten\n                }).then(results => {\n                    this.jointables(joinQuery.type, jointblInfo, results);\n                    this.tablesFetched.push(jointblInfo.table2.table);\n                    ++this.currentQueryStackIndex_;\n                    return this.startExecutingJoinLogic_();\n                });\n            }\n            catch (ex) {\n                return promiseReject(\n                    new LogHelper(ERROR_TYPE.InvalidJoinQuery, ex.message)\n                );\n            }\n        }\n        else {\n            return this.onJoinQueryFinished_();\n        }\n    }\n\n    private jointables(joinType: string, jointblInfo: JoinTableInfo, secondtableData: any[]) {\n\n        const results = [];\n        const column1 = jointblInfo.table1.column;\n        const column2 = jointblInfo.table2.column;\n        const table1Index = this.tablesFetched.indexOf(jointblInfo.table1.table);\n        const table2Index = this.currentQueryStackIndex_ + 1;\n        const performInnerJoin = () => {\n            let index = 0;\n            this.results.forEach(valueFromFirstTable => {\n                secondtableData.forEach((valueFromSecondTable) => {\n                    if (valueFromFirstTable[table1Index][column1] === valueFromSecondTable[column2]) {\n                        results[index] = { ...valueFromFirstTable };\n                        results[index++][table2Index] = valueFromSecondTable;\n                    }\n                });\n            });\n        };\n        const performleftJoin = () => {\n            let index = 0;\n            let valueMatchedFromSecondTable: any[];\n            let callBack;\n            const columnDefaultValue = {};\n            this.getTable(jointblInfo.table2.table).columns.forEach(col => {\n                columnDefaultValue[col.name] = null;\n            });\n            this.results.forEach((valueFromFirstTable) => {\n                valueMatchedFromSecondTable = [];\n                if (table2Index === 1) {\n                    callBack = function (valueFromSecondTable) {\n                        if (valueFromFirstTable[table1Index][column1] === valueFromSecondTable[column2]) {\n                            valueMatchedFromSecondTable.push(valueFromSecondTable);\n                        }\n                    };\n                }\n                else {\n                    callBack = function (valueFromSecondTable) {\n                        const value = valueFromFirstTable[table1Index];\n                        if (value != null && value[column1] === valueFromSecondTable[column2]) {\n                            valueMatchedFromSecondTable.push(valueFromSecondTable);\n                        }\n                    };\n                }\n                secondtableData.forEach(callBack);\n                if (valueMatchedFromSecondTable.length === 0) {\n                    valueMatchedFromSecondTable = [columnDefaultValue];\n                }\n                valueMatchedFromSecondTable.forEach(function (value) {\n                    results[index] = { ...valueFromFirstTable };\n                    results[index++][table2Index] = value;\n                });\n            });\n        };\n        switch (joinType) {\n            case \"left\":\n                performleftJoin(); break;\n            default:\n                performInnerJoin();\n        }\n        this.results = results;\n    }\n\n    private getJoinTableInfo_(joinOn: string) {\n        joinOn = removeSpace(joinOn);\n        const splittedjoinOn = joinOn.split(\"=\");\n        const splittedjoinOnbydotFirst = splittedjoinOn[0].split(\".\");\n        const splittedjoinOnbydotSecond = splittedjoinOn[1].split(\".\");\n        const info = {\n            table1: {\n                table: splittedjoinOnbydotFirst[0],\n                column: splittedjoinOnbydotFirst[1]\n            },\n            table2: {\n                table: splittedjoinOnbydotSecond[0],\n                column: splittedjoinOnbydotSecond[1]\n            }\n        } as JoinTableInfo;\n        return info;\n    }\n\n    private checkJoinQuery_(jointblInfo: JoinTableInfo, qry: JoinQuery) {\n        const table1 = jointblInfo.table1;\n        const table2 = jointblInfo.table2;\n        const tableSchemaOf1stTable = this.getTable(table1.table);\n        const tableSchemaOf2ndTable = this.getTable(table2.table);\n        let err: LogHelper;\n\n        // check on info & with info \n        if (qry.with !== table2.table) {\n            err = new LogHelper(ERROR_TYPE.InvalidJoinQuery,\n                `on value should contains value of with`\n            );\n        }\n\n        // check for column existance\n\n        if (tableSchemaOf1stTable.columns.find(q => q.name === table1.column) == null) {\n            err = new LogHelper(ERROR_TYPE.InvalidJoinQuery,\n                `column ${table1.column} does not exist in table ${table1.table}`\n            );\n        }\n        else if (tableSchemaOf2ndTable.columns.find(q => q.name === table2.column) == null) {\n            err = new LogHelper(ERROR_TYPE.InvalidJoinQuery,\n                `column ${table2.column} does not exist in table ${table2.table}`\n            );\n        }\n\n        // check for column match in both table\n        if (qry.as == null) {\n            qry.as = {};\n        }\n        tableSchemaOf1stTable.columns.every(function (column) {\n            const columnFound = tableSchemaOf2ndTable.columns.find(q => q.name === column.name && q.name !== table1.column);\n            if (columnFound != null && qry.as[columnFound.name] == null) {\n                err = new LogHelper(ERROR_TYPE.InvalidJoinQuery,\n                    `column ${column.name} exist in both table ${table1.table} & ${table2.table}`\n                );\n                return false;\n            }\n            return true;\n        });\n        return err;\n    }\n}\n\ntype JoinTableInfo = {\n    table1: { table: string, column: string }\n    table2: { table: string, column: string }\n};","import { SelectQuery, QUERY_OPTION, IDB_MODE, API, WhereQuery } from \"@/common\";\nimport { IDBUtil } from \"@/worker/idbutil\";\nimport { QueryHelper } from \"@worker/executors/query_helper\";\nimport { DbMeta } from \"@/worker/model\";\nimport { isArray, isObject, getKeys, getObjectFirstKey, promiseReject, getLength } from \"@/worker/utils\";\nimport { setPushResult, setLimitAndSkipEvaluationAtEnd, removeDuplicates } from \"./base_select\";\nimport { ThenEvaluator } from \"./then_evaluator\";\nimport { executeWhereUndefinedLogic } from \"./not_where\"\nimport { processAggregateQry, processGroupDistinctAggr, processOrderBy } from \"./order_by\";\nimport { executeAggregateGroupBy, processGroupBy } from \"./group_by\";\nimport { executeWhereLogic } from \"./where\";\nimport { BaseFetch } from \"@executors/base_fetch\";\nimport { executeInLogic } from \"./in\";\nimport { executeRegexLogic } from \"./regex\";\nimport { executeJoinQuery } from \"./join\";\n\nexport class Select extends BaseFetch {\n    sorted = false;\n    isOr: boolean;\n    isArrayQry: boolean;\n    query: SelectQuery;\n    orInfo: {\n        results?: any[];\n        orQuery: object\n    };\n\n    isSubQuery = false;\n\n    protected pushResult: (value) => void;\n\n    protected thenEvaluator = new ThenEvaluator();\n\n    executeWhereUndefinedLogic: typeof executeWhereUndefinedLogic;\n\n    setLimitAndSkipEvaluationAtEnd_: typeof setLimitAndSkipEvaluationAtEnd\n    setPushResult: typeof setPushResult;\n    removeDuplicates: typeof removeDuplicates;\n    executeJoinQuery: typeof executeJoinQuery\n    processGroupDistinctAggr: typeof processGroupDistinctAggr;\n    processOrderBy: typeof processOrderBy;\n    processAggregateQry: typeof processAggregateQry;\n    executeAggregateGroupBy: typeof executeAggregateGroupBy;\n    processGroupBy: typeof processGroupBy;\n\n\n    constructor(query: SelectQuery, util: IDBUtil) {\n        super();\n        this.query = query;\n        this.util = util;\n        this.tableName = query.from;\n        this.setPushResult();\n        if (isArray(this.query.where)) {\n            this.isArrayQry = true;\n            this.setLimitAndSkipEvaluationAtEnd_();\n        }\n        else {\n            this.skipRecord = query.skip;\n            this.limitRecord = query.limit;\n        }\n        if (query.order) {\n            if (isArray(query.order) || query.order.case || isObject(query.order.by)) {\n                this.query.order.idbSorting = false;\n            }\n            this.setLimitAndSkipEvaluationAtEnd_();\n        }\n        else if (query.groupBy) {\n            this.setLimitAndSkipEvaluationAtEnd_();\n        }\n    }\n\n    execute(db: DbMeta): Promise<any> {\n        this.db = db;\n        let pResult: Promise<void>;\n        try {\n            const err = new QueryHelper(db).validate(API.Select, this.query);\n            if (err) return promiseReject(err);\n            this.initTransaction_();\n            if (this.query.join == null) {\n                if (this.query.where != null) {\n                    if (isArray(this.query.where)) {\n                        pResult = this.processWhereArrayQry();\n                    }\n                    else {\n                        pResult = this.processWhere_();\n                    }\n                }\n                else {\n                    pResult = this.executeWhereUndefinedLogic();\n                }\n            }\n            else {\n                pResult = this.executeJoinQuery();\n            }\n            return pResult.then(\n                this.returnResult_.bind(this)\n            )\n        }\n        catch (ex) {\n            return this.onException(ex);\n        }\n    }\n\n    private processWhereArrayQry() {\n        this.isArrayQry = true;\n        const whereQuery = this.query.where as WhereQuery[];\n        const pKey = this.primaryKey();\n        let isFirstWhere = true, output = [], operation;\n\n        const isItemExist = (keyValue) => {\n            return output.findIndex(item => item[pKey] === keyValue) >= 0;\n        };\n        const onSuccess = () => {\n            if (operation === QUERY_OPTION.And) {\n                const doAnd = () => {\n                    let andResults = [];\n                    this.results.forEach((item) => {\n                        if (isItemExist(item[pKey])) {\n                            andResults.push(item);\n                        }\n                    });\n                    output = andResults;\n                    andResults = null;\n                };\n\n                if (isFirstWhere === true) {\n                    output = this.results;\n                }\n                else if (output.length > 0) {\n                    doAnd();\n                }\n            }\n            else {\n                if (output.length > 0) {\n                    this.results = [...output, ...this.results];\n                    this.removeDuplicates();\n                    output = this.results;\n                }\n                else {\n                    output = this.results;\n                }\n            }\n            isFirstWhere = false;\n            if (whereQuery.length > 0) {\n                this.results = [];\n                return processFirstQry();\n            }\n            else {\n                this.results = output;\n            }\n\n        };\n        const processFirstQry = () => {\n            this.query.where = whereQuery.shift();\n            if (this.query.where[QUERY_OPTION.Or]) {\n                if (getLength(this.query.where) === 1) {\n                    operation = QUERY_OPTION.Or;\n                    this.query.where = this.query.where[QUERY_OPTION.Or] as any;\n                }\n                else {\n                    operation = QUERY_OPTION.And;\n                }\n            }\n            else {\n                operation = QUERY_OPTION.And;\n            }\n            return this.processWhere_().then(onSuccess);\n        };\n        return processFirstQry();\n    }\n\n    private initTransaction_() {\n        if (!this.isTxQuery) {\n            this.util.createTransactionIfNotExist([this.tableName], IDB_MODE.ReadOnly);\n        }\n        this.objectStore = this.util.objectStore(this.tableName);\n    }\n\n    private processWhere_() {\n        this.shouldAddValue = (value) => {\n            return this.whereCheckerInstance.check(value);\n        };\n        if ((this.query.where as WhereQuery).or) {\n            this.processOrLogic_();\n        }\n        return this.goToWhereLogic().then(() => {\n            return this.onWhereEvaluated();\n        })\n    }\n\n    private onWhereEvaluated() {\n        if (this.isOr) {\n            return this.orQuerySuccess_();\n        }\n    }\n\n    private returnResult_ = () => {\n        if (this.query.flatten) {\n            const flattendData = [];\n            const indexToDelete = {};\n            this.query.flatten.forEach(column => {\n                this.results.forEach((data, i) => {\n                    data[column].forEach(item => {\n                        flattendData.push(\n                            { ...data, ...{ [column]: item } }\n                        );\n                    });\n                    indexToDelete[i] = true;\n                });\n            });\n            let itemsDeleted = 0;\n            getKeys(indexToDelete).forEach(key => {\n                this.results.splice(Number(key) - itemsDeleted, 1);\n                ++itemsDeleted;\n            });\n            this.results = this.results.concat(flattendData);\n        }\n        this.processGroupDistinctAggr();\n        this.processOrderBy();\n        if (this.shouldEvaluateSkipAtEnd) {\n            this.results.splice(0, this.query.skip);\n        }\n        if (this.shouldEvaluateLimitAtEnd) {\n            this.results = this.results.slice(0, this.query.limit);\n        }\n        return this.results;\n    }\n\n    private orQueryFinish_() {\n        this.isOr = false;\n        this.results = this.orInfo.results;\n        // free or info memory\n        this.orInfo = null;\n        this.removeDuplicates();\n        // this.onQueryFinished();\n    }\n\n    private orQuerySuccess_() {\n        this.orInfo.results = [... this.orInfo.results, ...this.results];\n        if (!this.query.limit || (this.query.limit > this.orInfo.results.length)) {\n            this.results = [];\n            const key = getObjectFirstKey(this.orInfo.orQuery);\n            if (key != null) {\n                const where = {};\n                where[key] = this.orInfo.orQuery[key];\n                delete this.orInfo.orQuery[key];\n                this.query.where = where;\n                return this.goToWhereLogic().then(this.onWhereEvaluated.bind(this))\n            }\n        }\n        return this.orQueryFinish_();\n    }\n\n    private processOrLogic_() {\n        this.isOr = true;\n        const where = this.query.where as WhereQuery;\n        this.orInfo = {\n            orQuery: where.or as any,\n            results: []\n        };\n        // free or memory\n        delete where.or;\n    }\n}\n\nSelect.prototype.executeInLogic = executeInLogic;\nSelect.prototype.executeWhereUndefinedLogic = executeWhereUndefinedLogic;\nSelect.prototype.executeWhereLogic = executeWhereLogic;\nSelect.prototype.executeRegexLogic = executeRegexLogic;\n\nSelect.prototype.setLimitAndSkipEvaluationAtEnd_ = setLimitAndSkipEvaluationAtEnd\nSelect.prototype.setPushResult = setPushResult;\nSelect.prototype.removeDuplicates = removeDuplicates;\nSelect.prototype.executeJoinQuery = executeJoinQuery\nSelect.prototype.processGroupDistinctAggr = processGroupDistinctAggr;\nSelect.prototype.processOrderBy = processOrderBy;\nSelect.prototype.processAggregateQry = processAggregateQry;\nSelect.prototype.executeAggregateGroupBy = executeAggregateGroupBy;\nSelect.prototype.processGroupBy = processGroupBy;\n","export const isObject = (value) => {\n    return typeof value === 'object';\n};","import { Select } from \"./index\";\n\nexport const setPushResult = function (this: Select) {\n    if (this.query.case) {\n        this.pushResult = (value) => {\n            let columnName: string;\n            this.thenEvaluator.setCaseAndValue(this.query.case, value);\n            for (columnName in this.query.case) {\n                value[columnName] = this.thenEvaluator.setColumn(columnName).evaluate();\n            }\n            this.results.push(value);\n        };\n    }\n    else {\n        this.pushResult = (value) => {\n            this.results.push(value);\n        };\n    }\n}\n\nexport const setLimitAndSkipEvaluationAtEnd = function (this: Select) {\n    if (this.query.limit) {\n        this.shouldEvaluateLimitAtEnd = true;\n    }\n    if (this.query.skip) {\n        this.shouldEvaluateSkipAtEnd = true;\n    }\n}\n\nexport const removeDuplicates = function (this: Select) {\n    let datas = this.results;\n    // free results memory\n    this.results = null;\n    const key = this.primaryKey();\n    const lookupObject = {};\n    for (let i = 0, len = datas.length; i < len; i++) {\n        lookupObject[datas[i][key]] = datas[i];\n    }\n    datas = [];\n    for (const i in lookupObject) {\n        datas.push(lookupObject[i]);\n    }\n    this.results = datas;\n}","import { Select } from \".\";\nimport { getDataType, getObjectFirstKey } from \"@/worker/utils\";\nimport { QUERY_OPTION, DATA_TYPE } from \"@/common\";\n\nexport const processGroupBy = function (this: Select) {\n    const groupBy = this.query.groupBy as any;\n    let datas = this.results;\n    const lookUpObj = {};\n    // free results memory\n    this.results = this.query.groupBy = null;\n    if (getDataType(groupBy) !== DATA_TYPE.Object) {\n        if (getDataType(groupBy) === DATA_TYPE.String) {\n            for (const i in datas) {\n                lookUpObj[datas[i][groupBy as string]] = datas[i];\n            }\n        }\n        else {\n            let objKey;\n            for (const i in datas) {\n                objKey = \"\";\n                for (const column in groupBy) {\n                    objKey += datas[i][groupBy[column]];\n                }\n                lookUpObj[objKey] = datas[i];\n            }\n        }\n    }\n    else {\n        const caseQueryLength = Object.keys(groupBy).length;\n        if (caseQueryLength === 1) {\n            const groupByColumn = getObjectFirstKey(groupBy);\n            this.thenEvaluator.setCaseAndColumn(groupBy, groupByColumn);\n            for (const i in datas) {\n                lookUpObj[this.thenEvaluator.setValue(datas[i]).evaluate()] = datas[i];\n            }\n        }\n        else {\n            let objKey;\n            for (const i in datas) {\n                objKey = \"\";\n                this.thenEvaluator.setCaseAndValue(groupBy, datas[i]);\n                for (const column in groupBy) {\n                    objKey += this.thenEvaluator.setColumn(column).evaluate();\n                }\n                lookUpObj[objKey] = datas[i];\n            }\n        }\n    }\n    // free datas memory\n    datas = [];\n    for (const i in lookUpObj) {\n        datas.push(lookUpObj[i]);\n    }\n    this.results = datas;\n}\n\nexport const executeAggregateGroupBy = function (this: Select) {\n    const grpQry = this.query.groupBy as any;\n    let datas = this.results;\n    // free results memory\n    this.results = undefined;\n    const lookUpObj = {};\n    // assign aggregate\n    const aggregateQry = this.query.aggregate;\n\n    let index;\n    let objKey;\n    let value;\n    let columnToAggregate;\n    const calculateAggregate = () => {\n        const getCount = () => {\n            value = lookUpObj[objKey];\n            // get old value\n            value = value ? value[\"count(\" + columnToAggregate + \")\"] : 0;\n            // add with old value if data exist\n            value += datas[index][columnToAggregate] ? 1 : 0;\n            return value;\n        };\n        const getMax = () => {\n            value = lookUpObj[objKey];\n            // get old value\n            value = value ? value[\"max(\" + columnToAggregate + \")\"] : 0;\n            datas[index][columnToAggregate] = datas[index][columnToAggregate] ?\n                datas[index][columnToAggregate] : 0;\n            // compare between old value and new value\n            return value > datas[index][columnToAggregate] ? value : datas[index][columnToAggregate];\n        };\n        const getMin = () => {\n            value = lookUpObj[objKey];\n            // get old value\n            value = value ? value[\"min(\" + columnToAggregate + \")\"] : Infinity;\n            datas[index][columnToAggregate] = datas[index][columnToAggregate] ?\n                datas[index][columnToAggregate] : Infinity;\n            // compare between old value and new value\n            return value < datas[index][columnToAggregate] ? value : datas[index][columnToAggregate];\n        };\n        const getSum = () => {\n            value = lookUpObj[objKey];\n            // get old value\n            value = value ? value[\"sum(\" + columnToAggregate + \")\"] : 0;\n            // add with old value if data exist\n            value += datas[index][columnToAggregate] ? datas[index][columnToAggregate] : 0;\n            return value;\n        };\n        const getAvg = () => {\n            value = lookUpObj[objKey];\n            // get old sum value\n            let sumOfColumn = value ? value[\"sum(\" + columnToAggregate + \")\"] : 0;\n            // add with old value if data exist\n            sumOfColumn += datas[index][columnToAggregate] ? datas[index][columnToAggregate] : 0;\n            datas[index][\"sum(\" + columnToAggregate + \")\"] = sumOfColumn;\n            // get old count value\n            value = value ? value[\"count(\" + columnToAggregate + \")\"] : 0;\n            // add with old value if data exist\n            value += datas[index][columnToAggregate] ? 1 : 0;\n            datas[index][\"count(\" + columnToAggregate + \")\"] = value;\n        };\n        for (const prop in aggregateQry) {\n            const aggregateColumn = aggregateQry[prop];\n            const aggregateValType = getDataType(aggregateColumn);\n            let aggregateCalculator;\n            switch (prop) {\n                case QUERY_OPTION.Count:\n                    aggregateCalculator = getCount;\n                    break;\n                case QUERY_OPTION.Max:\n                    aggregateCalculator = getMax;\n                    break;\n                case QUERY_OPTION.Min:\n                    aggregateCalculator = getMin;\n                    break;\n                case QUERY_OPTION.Sum:\n                    aggregateCalculator = getSum;\n                    break;\n                case QUERY_OPTION.Avg:\n                    aggregateCalculator = getAvg;\n                    break;\n            }\n            switch (aggregateValType) {\n                case DATA_TYPE.String:\n                    columnToAggregate = aggregateColumn;\n                    datas[index][`${prop}(${columnToAggregate})`] = aggregateCalculator();\n                    break;\n                case DATA_TYPE.Array:\n                    for (const item in aggregateColumn) {\n                        columnToAggregate = aggregateColumn[item];\n                        datas[index][`${prop}(${columnToAggregate})`] = aggregateCalculator();\n                    }\n            }\n        }\n    };\n\n    if (getDataType(grpQry) === DATA_TYPE.String) {\n        for (index in datas) {\n            objKey = datas[index][grpQry];\n            calculateAggregate();\n            lookUpObj[objKey] = datas[index];\n        }\n    }\n    else {\n        for (index in datas) {\n            objKey = \"\";\n            for (const column in grpQry) {\n                objKey += datas[index][grpQry[column]];\n            }\n            calculateAggregate();\n            lookUpObj[objKey] = datas[index];\n        }\n\n    }\n    // free datas memory\n    datas = [];\n    for (const i in lookUpObj) {\n        datas.push(lookUpObj[i]);\n    }\n    // Checking for avg and if exist then fill the datas;\n    if (aggregateQry.avg) {\n        if (getDataType(aggregateQry.avg) === DATA_TYPE.String) {\n            for (index in datas) {\n                const sumForAvg = datas[index][\"sum(\" + aggregateQry.avg + \")\"],\n                    countForAvg = datas[index][\"count(\" + aggregateQry.avg + \")\"];\n                datas[index][\"avg(\" + aggregateQry.avg + \")\"] = sumForAvg / countForAvg;\n                if (aggregateQry.count !== aggregateQry.avg) {\n                    delete datas[index][\"count(\" + aggregateQry.avg + \")\"];\n                }\n                if (aggregateQry.sum !== aggregateQry.avg) {\n                    delete datas[index][\"sum(\" + aggregateQry.avg + \")\"];\n                }\n            }\n        }\n        else {\n            const isCountTypeString = getDataType(aggregateQry.count) === DATA_TYPE.String;\n            const isSumTypeString = getDataType(aggregateQry.sum) === DATA_TYPE.String;\n            for (index in datas) {\n                for (const column in aggregateQry.avg as any) {\n                    const avgColumn = aggregateQry.avg[column],\n                        sum = datas[index][\"sum(\" + avgColumn + \")\"],\n                        count = datas[index][\"count(\" + avgColumn + \")\"];\n                    datas[index][\"avg(\" + avgColumn + \")\"] = sum / count;\n\n                    if (isCountTypeString) {\n                        if (aggregateQry.count !== avgColumn) {\n                            delete datas[index][\"count(\" + avgColumn + \")\"];\n                        }\n                        else if (aggregateQry.count.indexOf(avgColumn) === -1) {\n                            delete datas[index][\"count(\" + avgColumn + \")\"];\n                        }\n                    }\n\n                    if (isSumTypeString) {\n                        if (aggregateQry.sum !== avgColumn) {\n                            delete datas[index][\"sum(\" + avgColumn + \")\"];\n                        }\n                        else if (aggregateQry.sum.indexOf(avgColumn) === -1) {\n                            delete datas[index][\"sum(\" + avgColumn + \")\"];\n                        }\n                    }\n                }\n            }\n        }\n    }\n    this.results = datas;\n}\n","import { promise } from \"@/common\";\nimport { BaseFetch } from \"../base_fetch\";\nimport { Count } from \".\";\n\nexport const executeWhereUndefinedLogic = function (this: BaseFetch) {\n    let countRequest;\n    const onSuccess = (() => {\n        if (this.objectStore.count) {\n            countRequest = this.objectStore.count();\n            return (onFinish) => {\n                return () => {\n                    (this as Count).resultCount = countRequest.result;\n                    onFinish();\n                }\n            }\n        }\n        else {\n            let cursor;\n            countRequest = this.objectStore.openCursor();\n            return (onFinish) => {\n                return (e: any) => {\n                    cursor = e.target.result;\n                    if (cursor) {\n                        ++(this as Count).resultCount;\n                        cursor.continue();\n                    }\n                    else {\n                        onFinish();\n                    }\n                };\n            };\n        }\n    })();\n    return promise((res, rej) => {\n        countRequest.onerror = rej;\n        countRequest.onsuccess = onSuccess(res);\n    });\n}\n","import { BaseFetch } from \"@executors/base_fetch\";\nimport { Select } from \"@executors/select\";\nimport { CountQuery, SelectQuery, IDB_MODE, API, WhereQuery } from \"@/common\";\nimport { IDBUtil } from \"@/worker/idbutil\";\nimport { DbMeta } from \"@worker/model\";\nimport { QueryHelper } from \"@executors/query_helper\";\nimport { promiseReject, isArray, getError } from \"@worker/utils\";\nimport { executeWhereUndefinedLogic } from \"@executors/count/not_where\";\nimport { executeWhereLogic } from \"./where\";\nimport { executeRegexLogic } from \"./regex\";\nimport { executeInLogic } from \"./in\";\n\nexport class Count extends BaseFetch {\n\n    query: CountQuery;\n    resultCount: number = 0;\n    executeWhereUndefinedLogic: typeof executeWhereUndefinedLogic;\n\n    constructor(query: CountQuery, util: IDBUtil) {\n        super();\n        this.query = query;\n        this.util = util;\n        this.tableName = query.from;\n    }\n\n    execute(db: DbMeta) {\n        this.db = db;\n        const queryHelper = new QueryHelper(db);\n        const query = this.query;\n        const err = queryHelper.validate(API.Count, query);\n        if (err) {\n            return promiseReject(\n                err\n            );\n        }\n        try {\n            let result: Promise<void>;\n            const getDataFromSelect = () => {\n                const selectInstance = new Select(this.query as SelectQuery, this.util);\n                selectInstance.isTxQuery = this.isTxQuery;\n                return selectInstance.execute(db).then(results => {\n                    this.resultCount = results.length;\n                });\n            };\n            this.initTransaction_();\n            if (query.join == null) {\n                if (query.where != null) {\n                    if ((query.where as WhereQuery).or || isArray(this.query.where)) {\n                        result = getDataFromSelect();\n                    }\n                    else {\n                        result = this.goToWhereLogic();\n                    }\n                }\n                else {\n                    result = this.executeWhereUndefinedLogic() as any;\n                }\n            }\n            else {\n                result = getDataFromSelect();\n            }\n            return result.then(_ => {\n                return this.resultCount;\n            })\n        }\n        catch (ex) {\n            this.onException(ex);\n        }\n    }\n\n    private initTransaction_() {\n        if (!this.isTxQuery) {\n            this.util.createTransaction([this.query.from], IDB_MODE.ReadOnly);\n        }\n        this.objectStore = this.util.objectStore(this.query.from);\n    }\n}\n\nCount.prototype.executeWhereUndefinedLogic = executeWhereUndefinedLogic;\nCount.prototype.executeWhereLogic = executeWhereLogic\nCount.prototype.executeRegexLogic = executeRegexLogic\nCount.prototype.executeInLogic = executeInLogic","import { BaseFetch } from \"../base_fetch\";\nimport { getLength } from \"@/worker/utils\";\nimport { Count } from \".\";\nimport { promise } from \"@/common\";\n\nexport const executeWhereLogic = function (this: BaseFetch, column, value, op) {\n    value = op ? value[op] : value;\n    let cursorRequest;\n    let cursor: IDBCursorWithValue;\n\n\n    return promise((res, rej) => {\n        if (getLength(this.query.where) === 1 && this.objectStore.count) {\n            cursorRequest = this.objectStore.index(column).count(this.util.keyRange(value, op));\n            cursorRequest.onsuccess = () => {\n                (this as Count).resultCount = cursorRequest.result;\n                res();\n            }\n        }\n        else {\n            cursorRequest = this.objectStore.index(column).openCursor(this.util.keyRange(value, op));\n            cursorRequest.onsuccess = (e) => {\n                cursor = e.target.result;\n                if (cursor) {\n                    if (this.whereCheckerInstance.check(cursor.value)) {\n                        ++(this as Count).resultCount;\n                    }\n                    cursor.continue();\n                }\n                else {\n                    res();\n                }\n            }\n        }\n        cursorRequest.onerror = rej;\n    });\n}","import { BaseFetch } from \"../base_fetch\";\nimport { promise } from \"@/common\";\nimport { Count } from \".\";\n\nexport const executeRegexLogic = function (this: BaseFetch, column: string, exp: RegExp) {\n    let cursor: IDBCursorWithValue;\n    const cursorRequest = this.objectStore.index(column).openCursor();\n    this.shouldAddValue = (cursor) => {\n        return exp.test(cursor.key) &&\n            this.whereCheckerInstance.check(cursor.value);\n    };\n    return promise((res, rej) => {\n        cursorRequest.onerror = rej;\n        cursorRequest.onsuccess = (e: any) => {\n            cursor = e.target.result;\n            if (cursor) {\n                if (this.shouldAddValue(cursor)) {\n                    ++(this as Count).resultCount;\n                }\n                cursor.continue();\n            }\n            else {\n                res();\n            }\n        };\n    })\n}","import { promise, promiseAll } from \"@/common\";\nimport { BaseFetch } from \"../base_fetch\";\n\n\nexport const executeInLogic = function (this: BaseFetch, column, values) {\n    let cursor: IDBCursorWithValue;\n    const columnStore = this.objectStore.index(column);\n    const runInLogic: (val) => Promise<void> = (value) => {\n        const keyRange = this.util.keyRange(value);\n        if (this.objectStore.count) {\n            return promise((res, rej) => {\n                const cursorRequest = columnStore.count(keyRange);\n                cursorRequest.onsuccess = (e: any) => {\n                    this.resultCount += e.target.result;\n                    res();\n                };\n                cursorRequest.onerror = rej;\n            });\n        }\n        return promise<void>((res, rej) => {\n            const cursorRequest = columnStore.openCursor(keyRange);\n            cursorRequest.onsuccess = (e: any) => {\n                cursor = e.target.result;\n                if (cursor) {\n                    if (this.whereCheckerInstance.check(cursor.value)) {\n                        ++this.resultCount;\n                    }\n                    cursor.continue();\n                }\n                else {\n                    res();\n                }\n            };\n            cursorRequest.onerror = rej;\n        });\n    };\n\n    return promiseAll<void>(\n        values.map(function (val) {\n            return runInLogic(val);\n        })\n    );\n}\n","import { getDataType } from \"@worker/utils\";\nimport { DATA_TYPE } from \"@/common\";\n\nexport const updateValue = (suppliedValue, storedValue) => {\n    for (const key in suppliedValue) {\n        if (getDataType(suppliedValue[key]) !== DATA_TYPE.Object) {\n            storedValue[key] = suppliedValue[key];\n        }\n        else {\n            for (const op in suppliedValue[key]) {\n                switch (op as any) {\n                    case '+': storedValue[key] += suppliedValue[key][op]; break;\n                    case '-': storedValue[key] -= suppliedValue[key][op]; break;\n                    case '*': storedValue[key] *= suppliedValue[key][op]; break;\n                    case '/': storedValue[key] /= suppliedValue[key][op]; break;\n                    case '{push}': storedValue[key].push(suppliedValue[key][op]); break;\n                    default: storedValue[key] = suppliedValue[key];\n                }\n                break;\n            }\n        }\n    }\n    return storedValue;\n};","import { UpdateQuery, SelectQuery, QUERY_OPTION, API, WhereQuery } from \"@/common\";\nimport { IDBUtil } from \"@/worker/idbutil\";\nimport { DbMeta } from \"@worker/model\";\nimport { QueryHelper } from \"../query_helper\";\nimport { promiseReject, isArray } from \"@worker/utils\";\nimport { BaseFetch } from \"@executors/base_fetch\";\nimport { Select } from \"@executors/select\";\nimport { executeWhereUndefinedLogic } from \"./not_where\";\nimport { executeInLogic } from \"./in\";\nimport { executeRegexLogic } from \"./regex\";\nimport { executeWhereLogic } from \"./where\";\n\nexport class Update extends BaseFetch {\n    executeWhereUndefinedLogic: typeof executeWhereUndefinedLogic\n\n    constructor(query: UpdateQuery, util: IDBUtil) {\n        super();\n        this.query = query as any;\n        this.util = util;\n        this.tableName = query.in;\n    }\n\n    execute(db: DbMeta) {\n        this.db = db;\n        const query: UpdateQuery = this.query as any;\n        try {\n            const queryHelper = new QueryHelper(db);\n            const err = queryHelper.validate(API.Update, query);\n            if (err) return promiseReject(err);\n\n            this.initTransaction();\n            let pResult: Promise<void>;\n            if (query.where != null) {\n                if ((query.where as WhereQuery).or || isArray(query.where)) {\n                    pResult = this.executeComplexLogic_();\n                }\n                else {\n                    pResult = this.goToWhereLogic();\n                }\n            }\n            else {\n                pResult = this.executeWhereUndefinedLogic();\n            }\n            return pResult.then(() => {\n                return this.rowAffected;\n            })\n        }\n        catch (ex) {\n            return this.onException(ex);\n        }\n    }\n\n    private executeComplexLogic_() {\n        const query: UpdateQuery = this.query as any;\n        const selectObject = new Select({\n            from: query.in,\n            where: query.where,\n            ignoreCase: query.ignoreCase\n        } as SelectQuery, this.util);\n        selectObject.isTxQuery = this.isTxQuery;\n        return selectObject.execute(this.db).then((results: any[]) => {\n            const key = this.primaryKey(query.in);\n            const inQuery = [];\n            results.forEach((value) => {\n                inQuery.push(value[key]);\n            });\n            results = null;\n            const whereQry = { [key]: { [QUERY_OPTION.In]: inQuery } };\n            this.query.where = whereQry;\n            this.initTransaction();\n            return this.goToWhereLogic();\n        });\n    }\n\n    private initTransaction() {\n        const tableName = (this.query as any).in;\n        if (!this.isTxQuery) {\n            this.util.createTransaction([tableName]);\n        }\n        this.objectStore = this.util.objectStore(tableName);\n    }\n}\n\nUpdate.prototype.executeWhereUndefinedLogic = executeWhereUndefinedLogic;\nUpdate.prototype.executeWhereLogic = executeWhereLogic\nUpdate.prototype.executeRegexLogic = executeRegexLogic\nUpdate.prototype.executeInLogic = executeInLogic","import { Update } from \"./\";\nimport { promise } from \"@/common\";\nimport { updateValue } from \"./update_value\";\n\n\nexport const executeWhereUndefinedLogic = function (this: Update) {\n    const cursorRequest: IDBRequest<IDBCursorWithValue> = this.objectStore.openCursor();\n    const setValue = (this.query as any).set;\n    return promise<void>((res, rej) => {\n        cursorRequest.onsuccess = (e: any) => {\n            const cursor: IDBCursorWithValue = (e as any).target.result;\n            if (cursor) {\n                try {\n                    const cursorUpdateRequest = cursor.update(updateValue(setValue, cursor.value));\n                    cursorUpdateRequest.onsuccess = () => {\n                        ++this.rowAffected;\n                        cursor.continue();\n                    };\n                    cursorUpdateRequest.onerror = rej;\n                } catch (ex) {\n                    rej(\n                        ex\n                    );\n                }\n            }\n            else {\n                res();\n            }\n        };\n        cursorRequest.onerror = rej;\n    })\n\n}\n","import { promise } from \"@/common\";\nimport { updateValue } from \"./update_value\";\nimport { Update } from \"./\";\n\nexport const executeWhereLogic = function (this: Update, column, value, op) {\n\n    value = op ? value[op] : value;\n    const cursorRequest = this.objectStore.index(column).openCursor(this.util.keyRange(value, op));\n    const setValue = (this.query as any).set;\n    return promise<void>((res, rej) => {\n        cursorRequest.onsuccess = (e: any) => {\n            const cursor: IDBCursorWithValue = e.target.result;\n            if (cursor) {\n                if (this.whereCheckerInstance.check(cursor.value)) {\n                    try {\n                        const cursorUpdateRequest = cursor.update(updateValue(setValue, cursor.value));\n                        cursorUpdateRequest.onsuccess = () => {\n                            ++this.rowAffected;\n                            cursor.continue();\n                        };\n                        cursorUpdateRequest.onerror = rej;\n                    } catch (ex) {\n                        rej(\n                            ex\n                        );\n                    }\n                }\n                else {\n                    cursor.continue();\n                }\n            }\n            else {\n                res();\n            }\n        };\n        cursorRequest.onerror = rej\n    })\n}","import { Update } from \"./\";\nimport { updateValue } from \"./update_value\";\nimport { promise } from \"@/common\";\n\nexport const executeRegexLogic = function (this: Update, column: string, exp: RegExp) {\n    let cursor: IDBCursorWithValue;\n    const cursorOpenRequest = this.objectStore.index(column).openCursor();\n    this.shouldAddValue = (cursor) => {\n        return exp.test(cursor.key) &&\n            this.whereCheckerInstance.check(cursor.value);\n    };\n    const setValue = (this.query as any).set;\n    return promise<void>((res, rej) => {\n\n        cursorOpenRequest.onsuccess = (e: any) => {\n            cursor = e.target.result;\n            if (cursor) {\n                if (this.shouldAddValue(cursor)) {\n                    try {\n                        const cursorUpdateRequest = cursor.update(updateValue(setValue, cursor.value));\n                        cursorUpdateRequest.onsuccess = () => {\n                            ++this.rowAffected;\n                            cursor.continue();\n                        };\n                        cursorUpdateRequest.onerror = rej;\n                    } catch (ex) {\n                        rej(\n                            ex\n                        );\n                    }\n                }\n                else {\n                    cursor.continue();\n                }\n\n            }\n            else {\n                res();\n            }\n        };\n        cursorOpenRequest.onerror = rej;\n    })\n\n}\n","import { Update } from \"./\";\nimport { promiseAll, promise, UpdateQuery } from \"@/common\";\nimport { updateValue } from \"./update_value\";\n\n\nexport const executeInLogic = function (this: Update, column, values: any[]) {\n    const columnStore = this.objectStore.index(column);\n    const query: UpdateQuery = this.query as any;\n    const runInLogic: (val) => Promise<void> = (value) => {\n        return promise((res, rej) => {\n            const cursorRequest = columnStore.openCursor(this.util.keyRange(value));\n            cursorRequest.onsuccess = (e: any) => {\n                const cursor: IDBCursorWithValue = e.target.result;\n                if (cursor) {\n                    const value = cursor.value;\n                    if (this.whereCheckerInstance.check(value)) {\n                        try {\n                            const cursorUpdateRequest = cursor.update(updateValue(query.set, value));\n                            cursorUpdateRequest.onsuccess = () => {\n                                ++this.rowAffected;\n                                cursor.continue();\n                            };\n                            cursorUpdateRequest.onerror = rej;\n                        }\n                        catch (ex) {\n                            rej(\n                                ex\n                            );\n                        }\n\n                    }\n                    else {\n                        cursor.continue();\n                    }\n                }\n                else {\n                    res();\n                }\n            };\n            cursorRequest.onerror = rej;\n        });\n    };\n\n    return promiseAll<void>(\n        values.map(function (val) {\n            return runInLogic(val);\n        })\n    );\n}\n","import { IntersectQuery, SelectQuery } from \"@/common\";\nimport { Base } from \"@executors/base\";\nimport { Select } from \"@executors/select\";\nimport { DbMeta } from \"../model\";\n\nexport class Intersect extends Base {\n\n    constructor(intersectQry: IntersectQuery, util) {\n        super();\n        this.query = intersectQry as any;\n        this.util = util;\n    }\n\n    execute(db: DbMeta) {\n        this.db = db;\n        const intersectQry: IntersectQuery = this.query as any;\n        let index = 0;\n        let hashMap = {};\n        let hashMapTemp = {};\n        let isQueryForSameTable = true;\n        const queries = intersectQry.queries;\n        const queryLength = queries.length;\n        queries.every((qry, i) => {\n            if (i + 1 < queryLength && qry.from !== queries[i + 1].from) {\n                isQueryForSameTable = false;\n                return false;\n            }\n            return true;\n        });\n        let getHashKey;\n        if (isQueryForSameTable) {\n            const pKey = this.primaryKey(queries[0].from);\n            getHashKey = (val) => {\n                return val[pKey];\n            };\n        }\n        else {\n            getHashKey = (val) => {\n                let columnValKey = \"\";\n                for (const key in val) {\n                    columnValKey += val[key];\n                }\n                return columnValKey;\n            };\n        }\n\n        let select: Select;\n        const fetchData = () => {\n            if (index < queryLength) {\n                select = new Select(queries[index], this.util);\n                return select.execute(this.db).then((selectResult) => {\n                    hashMap = {};\n                    selectResult.forEach(val => {\n                        const columnValKey = getHashKey(val);\n                        if (index === 0) {\n                            hashMapTemp[columnValKey] = val;\n                        } else if (hashMapTemp[columnValKey] != null) {\n                            hashMap[columnValKey] = val;\n                        }\n                    });\n                    if (index > 0) {\n                        hashMapTemp = { ...hashMap };\n                    }\n\n                    ++index;\n                    return fetchData();\n                })\n            }\n            else {\n                const results = [];\n                let resultPusher: (key: string) => void;\n                let skip = intersectQry.skip;\n                const limit = intersectQry.limit;\n                const onFinished = () => {\n                    select['results'] = results;\n                    Object.assign(select.query, {\n                        order: intersectQry.order,\n                        join: {} as any\n                    } as SelectQuery);\n                    select.processOrderBy();\n                    select.processGroupDistinctAggr();\n                    return (select['results']);\n                };\n                let shouldStopLoop = false;\n                let key: string;\n                const pushResult = () => {\n                    results.push(hashMap[key]);\n                };\n                const checkLimitAndPush = () => {\n                    if (results.length < limit) {\n                        pushResult();\n                    }\n                    else {\n                        shouldStopLoop = true;\n                    }\n                };\n                const skipChecker = (callBack: () => void) => {\n                    if (skip === 0) {\n                        callBack();\n                    }\n                    else {\n                        --skip;\n                    }\n                };\n                if (intersectQry.skip && intersectQry.limit) {\n                    resultPusher = () => {\n                        skipChecker(() => {\n                            checkLimitAndPush();\n                        });\n                    };\n\n                }\n                else if (intersectQry.limit) {\n                    resultPusher = checkLimitAndPush;\n                }\n                else if (intersectQry.skip) {\n                    resultPusher = () => {\n                        skipChecker(() => {\n                            pushResult();\n                        });\n                    };\n                }\n                else {\n                    resultPusher = () => {\n                        pushResult();\n                    };\n                }\n                if (limit) {\n                    for (key in hashMap) {\n                        resultPusher(key);\n                        if (shouldStopLoop) {\n                            break;\n                        }\n                    }\n                }\n                else {\n                    for (key in hashMap) {\n                        resultPusher(key);\n                    }\n                }\n                return onFinished();\n            }\n        };\n        return fetchData();\n    }\n}","import { LogHelper, getError } from \"@worker/utils\";\nimport { ERROR_TYPE, promise } from \"@/common\";\n\nexport class DropDb {\n\n    execute(dbName: string) {\n        return promise((res, rej) => {\n            const dropDbRequest = indexedDB.deleteDatabase(dbName);\n            dropDbRequest.onblocked = () => {\n                const err = new LogHelper(ERROR_TYPE.DbBlocked);\n                return rej(\n                    getError(err)\n                );\n            };\n            dropDbRequest.onerror = (e) => {\n                return rej(\n                    getError(e)\n                )\n            };\n            dropDbRequest.onsuccess = () => {\n                res();\n            };\n        })\n    }\n}\n","import { Base } from \"@executors/base\";\nimport { SelectQuery } from \"@/common\";\nimport { DbMeta } from \"@worker/model\";\nimport { Select } from \"@executors/select\";\nimport { IDBUtil } from \"@/worker/idbutil\";\n\nexport class Union extends Base {\n\n    constructor(query: SelectQuery[], util: IDBUtil) {\n        super();\n        this.query = query as any;\n        this.util = util;\n    }\n\n    execute(db: DbMeta) {\n        this.db = db;\n        const query: SelectQuery[] = this.query as any;\n        let index = 0;\n        const hashMap = {};\n        let isQueryForSameTable = true;\n        const queryLength = query.length;\n        query.every((qry, i) => {\n            if (i + 1 < queryLength && qry.from !== query[i + 1].from) {\n                isQueryForSameTable = false;\n                return false;\n            }\n            return true;\n        });\n        let getHashKey;\n        if (isQueryForSameTable) {\n            const pKey = this.primaryKey(query[0].from);\n            getHashKey = (val) => {\n                return val[pKey];\n            };\n        }\n        else {\n            getHashKey = (val) => {\n                let columnValKey = \"\";\n                for (const key in val) {\n                    columnValKey += val[key];\n                }\n                return columnValKey;\n            };\n        }\n        let select: Select;\n        const fetchData = () => {\n            if (index < query.length) {\n                select = new Select(query[index++], this.util);\n                return select.execute(db).then((selectResult) => {\n                    selectResult.forEach(val => {\n                        hashMap[getHashKey(val)] = val;\n                    });\n                    return fetchData();\n                })\n            }\n            else {\n                const results = [];\n                for (const key in hashMap) {\n                    results.push(hashMap[key]);\n                }\n                return results;\n            }\n        };\n        return fetchData();\n    }\n\n\n}","import { BaseFetch } from \"../base_fetch\";\nimport { RemoveQuery, QUERY_OPTION, API, WhereQuery } from \"@/common\";\nimport { IDBUtil } from \"@/worker/idbutil\";\nimport { QueryHelper } from \"@executors/query_helper\";\nimport { DbMeta } from \"@/worker/model\";\nimport { promiseReject, isArray, getObjectFirstKey, getError } from \"@/worker/utils\";\nimport { Select } from \"@executors/select\";\nimport { executeWhereUndefinedLogic } from \"./not_where\";\nimport { executeInLogic } from \"./in\";\nimport { executeWhereLogic } from \"./where\";\nimport { executeRegexLogic } from \"./regex\";\n\nexport class Remove extends BaseFetch {\n    isOr;\n    executeWhereUndefinedLogic;\n\n    constructor(\n        query: RemoveQuery, util: IDBUtil\n    ) {\n        super();\n        this.query = query;\n        this.util = util;\n        this.tableName = query.from;\n    }\n\n    execute(db: DbMeta) {\n        this.db = db;\n        const queryHelper = new QueryHelper(db);\n        const query = this.query;\n        const err = queryHelper.validate(API.Remove, query);\n        if (err) return promiseReject(\n            err\n        );\n        try {\n            this.initTransaction_();\n            let pResult: Promise<void>;\n            if (query.where != null) {\n                if (isArray(query.where)) {\n                    pResult = this.processWhereArrayQry();\n                }\n                else {\n                    pResult = this.processWhere_();\n                }\n            }\n            else {\n                pResult = this.executeWhereUndefinedLogic();\n            }\n            return pResult.then(() => {\n                return this.rowAffected;\n            })\n\n        }\n        catch (ex) {\n            return this.onException(ex);\n        }\n\n    }\n\n    private processWhereArrayQry() {\n        const selectObject = new Select(this.query, this.util);\n        selectObject.isTxQuery = this.isTxQuery;\n        return selectObject.execute(this.db).then((results) => {\n            const keyList = [];\n            const pkey = this.primaryKey(this.query.from);\n            results.forEach((item) => {\n                keyList.push(item[pkey]);\n            });\n            results = null;\n            const whereQry = { [pkey]: { [QUERY_OPTION.In]: keyList } };\n            this.query[QUERY_OPTION.Where] = whereQry;\n            return this.processWhere_();\n        })\n    }\n\n    private processWhere_() {\n        if ((this.query.where as WhereQuery).or) {\n            this.processOrLogic();\n        }\n        return this.goToWhereLogic().then(() => {\n            return this.onWhereEvaluated();\n        });\n    }\n\n    private initTransaction_() {\n        if (!this.isTxQuery) {\n            this.util.createTransaction([this.query.from]);\n        }\n        this.objectStore = this.util.objectStore(this.query.from);\n    }\n\n    private onWhereEvaluated() {\n        if (this.isOr) {\n            return this.orQuerySuccess_();\n        }\n    }\n\n    private orQuerySuccess_() {\n        const key = getObjectFirstKey((this as any)._orInfo.OrQuery);\n        if (key != null) {\n            const where = {};\n            where[key] = (this as any)._orInfo.OrQuery[key];\n            delete (this as any)._orInfo.OrQuery[key];\n            this.query.where = where;\n            return this.goToWhereLogic().then(() => {\n                return this.onWhereEvaluated();\n            })\n        }\n        else {\n            this.isOr = true;\n        }\n    }\n\n    private processOrLogic() {\n        this.isOr = true;\n        const where = this.query.where as WhereQuery;\n        (this as any)._orInfo = {\n            OrQuery: where.or\n        };\n\n        // free or memory\n        delete where.or;\n    }\n}\n\nRemove.prototype.executeInLogic = executeInLogic;\nRemove.prototype.executeWhereUndefinedLogic = executeWhereUndefinedLogic;\nRemove.prototype.executeWhereLogic = executeWhereLogic;\nRemove.prototype.executeRegexLogic = executeRegexLogic;","import { Remove } from \".\";\nimport { promise, promiseAll } from \"@/common\";\n\nexport const executeInLogic = function (this: Remove, column, values) {\n    const columnIndex = this.objectStore.index(column)\n    const runInLogic: (val) => Promise<void> = (value) => {\n        return promise((res, rej) => {\n            const cursorRequest = columnIndex.openCursor(this.util.keyRange(value));\n            cursorRequest.onsuccess = (e: any) => {\n                const cursor: IDBCursorWithValue = e.target.result;\n                if (cursor) {\n                    if (this.whereCheckerInstance.check(cursor.value)) {\n                        cursor.delete();\n                        ++this.rowAffected;\n                    }\n                    cursor.continue();\n                }\n                else {\n                    res();\n                }\n            };\n            cursorRequest.onerror = rej;\n        });\n    };\n\n    return promiseAll<void>(\n        values.map(function (val) {\n            return runInLogic(val);\n        })\n    );\n}\n","import { Remove } from \".\";\nimport { promise } from \"@/common\";\n\nexport const executeWhereUndefinedLogic = function (this: Remove) {\n    let cursor;\n    const cursorRequest = this.objectStore.openCursor();\n    return promise<void>((res, rej) => {\n        cursorRequest.onsuccess = (e: any) => {\n            cursor = e.target.result;\n            if (cursor) {\n                cursor.delete();\n                ++this.rowAffected;\n                (cursor as any).continue();\n            }\n            else {\n                res();\n            }\n        };\n        cursorRequest.onerror = rej;\n    })\n\n}\n","import { Remove } from \".\";\nimport { promise } from \"@/common\";\n\nexport const executeWhereLogic = function (this: Remove, column, value, op) {\n    let cursor: IDBCursorWithValue,\n        cursorRequest;\n    value = op ? value[op] : value;\n    cursorRequest = this.objectStore.index(column).openCursor(this.util.keyRange(value, op));\n    return promise<void>((res, rej) => {\n        cursorRequest.onsuccess = (e) => {\n            cursor = e.target.result;\n            if (cursor) {\n                if (this.whereCheckerInstance.check(cursor.value)) {\n                    cursor.delete();\n                    ++this.rowAffected;\n                }\n                cursor.continue();\n            }\n            else {\n                res();\n            }\n        };\n\n        cursorRequest.onerror = rej\n    })\n\n}\n\n","import { Remove } from \"./\";\nimport { promise } from \"@/common\";\n\nexport const executeRegexLogic = function (this: Remove, column: string, exp: RegExp) {\n    let cursor: IDBCursorWithValue;\n    const cursorRequest = this.objectStore.index(column).openCursor();\n    this.shouldAddValue = (cursor) => {\n        return exp.test(cursor.key) &&\n            this.whereCheckerInstance.check(cursor.value);\n    };\n    return promise<void>((res, rej) => {\n        cursorRequest.onsuccess = (e: any) => {\n            cursor = e.target.result;\n            if (cursor) {\n                if (this.shouldAddValue(cursor)) {\n                    cursor.delete();\n                    ++this.rowAffected;\n                }\n                cursor.continue();\n            }\n            else {\n                res();\n            }\n        };\n        cursorRequest.onerror = rej;\n    })\n\n}","import { Base } from \"@executors/base\";\nimport { IDBUtil } from \"@/worker/idbutil\";\nimport { DbMeta } from \"@/worker/model\";\nimport { MetaHelper } from \"@/worker/meta_helper\";\nimport { promise } from \"@/common\";\n\nexport class Clear extends Base {\n    constructor(tableName: string, util: IDBUtil) {\n        super();\n        this.query = tableName as any;\n        this.util = util;\n        this.tableName = tableName;\n    }\n\n    execute(db: DbMeta) {\n        this.db = db;\n        const tableName: string = this.query as any;\n        if (!this.isTxQuery) {\n            this.util.createTransaction([tableName, MetaHelper.tableName]);\n        }\n        const clearRequest: IDBRequest = this.util.objectStore(tableName).clear();\n        try {\n            return promise<void>((res, rej) => {\n                clearRequest.onsuccess = (e) => {\n                    const currentTable = this.table(tableName);\n                    for (const columnName in currentTable.autoIncColumnValue) {\n                        currentTable.autoIncColumnValue[columnName] = 0;\n                    }\n                    MetaHelper.set(MetaHelper.dbSchema, db, this.util).then(() => {\n                        res();\n                    }).catch(rej);\n                };\n\n                clearRequest.onerror = rej;\n            })\n        }\n        catch (ex) {\n            return this.onException(ex);\n        }\n\n    }\n}","import { Base } from \"@executors/base\";\nimport { TranscationQuery, WebWorkerRequest, ERROR_TYPE, SelectQuery, API, InsertQuery, UpdateQuery, RemoveQuery, CountQuery, WebWorkerResult, promise } from \"@/common\";\nimport { IDBUtil } from \"@worker/idbutil\";\nimport { promiseReject, LogHelper } from \"@worker/utils\";\nimport { Insert } from \"@executors/insert\";\nimport { Select } from \"@executors/select\";\nimport { Count } from \"@executors/count\";\nimport { Update } from \"@executors/update\";\nimport { Remove } from \"@executors/remove\";\nimport { DbMeta } from \"@worker/model\";\nimport { IQueryExecutor } from \"@/worker/interfaces\";\nimport { MetaHelper } from \"@/worker/meta_helper\";\n\nexport class Transaction extends Base {\n    results = {} as any;\n    reqQueue: WebWorkerRequest[] = [];\n    isQueryExecuting = false;\n\n    isTxStarted_ = false;\n\n    onSuccess: (result: any) => void;\n    onError: (err: LogHelper) => void;\n\n    constructor(qry: TranscationQuery, util: IDBUtil) {\n        super();\n        this.query = qry as any;\n        this.util = util;\n    }\n\n    execute(db: DbMeta) {\n        this.db = db;\n\n        const err = this.validate();\n        if (err) return promiseReject(\n            err\n        );\n        this.startExecution_()\n\n        return promise<void>((res, rej) => {\n            this.onSuccess = res;\n            this.onError = rej;\n        }).then(result => {\n            this.log(`transaction finished`);\n            return result;\n        })\n    }\n\n    validate() {\n        const query: TranscationQuery = this.query as any;\n        const notExistingTable = this.notExistingTable_(query.tables);\n        if (notExistingTable) {\n            return new LogHelper(ERROR_TYPE.TableNotExist, { tableName: notExistingTable });\n        }\n        const methodName = query.method;\n        let txLogic = self[methodName];\n        if (!txLogic) {\n            return new LogHelper(ERROR_TYPE.MethodNotExist, methodName);\n        }\n    }\n\n    private startExecution_() {\n        const query: TranscationQuery = this.query as any;\n        const select = (qry: SelectQuery) => {\n            return this.pushReq_({\n                name: API.Select,\n                query: qry\n            } as WebWorkerRequest);\n        };\n        const insert = (qry: InsertQuery) => {\n            return this.pushReq_({\n                name: API.Insert,\n                query: qry\n            } as WebWorkerRequest);\n        };\n        const update = (qry: UpdateQuery) => {\n            return this.pushReq_({\n                name: API.Update,\n                query: qry\n            } as WebWorkerRequest);\n        };\n        const remove = (qry: RemoveQuery) => {\n            return this.pushReq_({\n                name: API.Remove,\n                query: qry\n            } as WebWorkerRequest);\n        };\n        const count = (qry: CountQuery) => {\n            return this.pushReq_({\n                name: API.Count,\n                query: qry\n            } as WebWorkerRequest);\n        };\n        const setResult = (key: string, value) => {\n            this.results[key] = value;\n        };\n        const getResult = (key: string) => {\n            return this.results[key];\n        };\n        const abort = (msg: string) => {\n            this.abortTx_(msg);\n        };\n\n        const start = () => {\n            this.startTx_();\n        };\n        const methodName = query.method\n        let txLogic = self[methodName];\n\n        this.log(`transaction query started`);\n\n        return txLogic.call(\n            this,\n            {\n                data: query.data,\n                insert: insert, select: select,\n                update: update, remove: remove,\n                count: count, setResult: setResult,\n                getResult: getResult, abort: abort,\n                start: start\n            }\n        );\n    }\n\n    log(message) {\n        this.util.logger.log(message);\n    }\n\n    private startTx_() {\n        try {\n            this.isTxStarted_ = true;\n            let tableNames = (this.query as any).tables as string[];\n            tableNames = tableNames.concat(MetaHelper.tableName)\n            this.util.createTransaction(tableNames).then(_ => {\n                this.onSuccess(this.results);\n            }).catch(err => {\n                this.onError(err);\n            })\n            return this.processExecutionOfQry_();\n        }\n        catch (ex) {\n            this.onError(this.onException(ex) as any);\n        }\n    }\n\n\n\n\n\n    private onReqFinished_(result) {\n        const finisehdRequest = this.reqQueue.shift();\n\n        this.log(`finished request : ${finisehdRequest.name} `);\n\n        if (finisehdRequest) {\n            if (result.error) {\n                this.abortTx_(\"automatic abort of transaction due to error occured\");\n                this.log(`transaction aborted due to error occured`);\n                this.onError(result.error);\n            }\n            else {\n                this.isQueryExecuting = false;\n                if (finisehdRequest.onSuccess) {\n                    finisehdRequest.onSuccess(result);\n                }\n                this.processExecutionOfQry_();\n            }\n        }\n    }\n\n    private abortTx_(msg: string) {\n        this.reqQueue = [];\n        this.util.abortTransaction();\n        this.log(`transaction aborted. Msg : ${msg}`);\n\n    }\n\n    private executeRequest_(request: WebWorkerRequest) {\n        this.isQueryExecuting = true;\n        let requestObj: IQueryExecutor;\n        this.log(`executing request : ${request.name} `);\n        const onReqFinished = this.onReqFinished_.bind(this);\n        const query = request.query\n        switch (request.name) {\n            case API.Select:\n                requestObj = new Select(\n                    query, this.util\n                );\n                break;\n            case API.Insert:\n                requestObj = new Insert(\n                    query, this.util\n                );\n                break;\n            case API.Update:\n                requestObj = new Update(\n                    query, this.util\n                );\n                break;\n            case API.Remove:\n                requestObj = new Remove(\n                    query, this.util\n                );\n                break;\n            case API.Count:\n                requestObj = new Count(\n                    query, this.util\n                );\n                break;\n        }\n        requestObj.isTxQuery = true;\n        requestObj.execute(this.db).then(onReqFinished).catch(err => {\n            const result = {\n                error: err\n            } as WebWorkerResult;\n            onReqFinished(result);\n        })\n    }\n\n    private pushReq_(request: WebWorkerRequest) {\n        const push = () => {\n            this.reqQueue.push(request);\n        };\n        const promiseObj = promise((resolve, reject) => {\n            request.onSuccess = (result) => {\n                resolve(result);\n            };\n            request.onError = (error) => {\n                reject(error);\n            };\n        });\n        if (this.isTxStarted_ === true) {\n            push();\n            this.processExecutionOfQry_();\n        }\n        else {\n            push();\n        }\n        this.log(`request pushed : ${request.name}`);\n        return promiseObj;\n    }\n\n    private processExecutionOfQry_() {\n        if (this.isQueryExecuting === false) {\n            if (this.reqQueue.length > 0) {\n                this.executeRequest_(this.reqQueue[0]);\n            }\n        }\n    }\n\n    private notExistingTable_(tables: string[]) {\n        let invalidTable: string = null;\n        tables.every(tableName => {\n            const table = this.table(tableName);\n            if (table == null) {\n                invalidTable = tableName;\n                return false;\n            }\n            return true;\n        });\n        return invalidTable;\n    }\n}","import { WebWorkerRequest, API, IDataBase, InsertQuery, WebWorkerResult, promise, SelectQuery, CountQuery, SetQuery, ERROR_TYPE, IDbInfo } from \"@/common\";\nimport { DbMeta } from \"./model\";\nimport { IDBUtil } from \"./idbutil\";\nimport { Insert } from \"@executors/insert\";\nimport { IS_WORKER, IS_IDB_SUPPORTED } from \"./constants\";\nimport { MetaHelper } from \"./meta_helper\";\nimport { Select } from \"@executors/select\";\nimport { Count } from \"@executors/count\";\nimport { Update } from \"@executors/update\";\nimport { Intersect } from \"./intersect\";\nimport { DropDb } from \"@executors/drop_db\";\nimport { Union } from \"./union\";\nimport { Remove } from \"@executors/remove\";\nimport { Clear } from \"@executors/clear\";\nimport { Transaction } from \"@executors/transaction\";\nimport { TABLE_STATE } from \"./enums\";\nimport { LogHelper, getError, promiseReject } from \"@worker/utils\";\n\nexport class QueryManager {\n    util: IDBUtil;\n    db: DbMeta;\n\n    private onQryFinished;\n\n    protected get logger() {\n        return this.util.logger;\n    }\n\n    constructor(fn?: (result: any) => void) {\n        this.onQryFinished = IS_WORKER ? (result) => {\n            self.postMessage(result);\n        } : fn;\n    }\n\n    run(request: WebWorkerRequest) {\n        let queryResult: Promise<any>;\n        const query = request.query;\n        switch (request.name) {\n            case API.OpenDb:\n                queryResult = this.openDb(query);\n                break;\n            case API.InitDb:\n                queryResult = this.initDb(query);\n                break;\n            case API.CloseDb:\n                queryResult = this.closeDb();\n                break;\n            case API.Insert:\n                queryResult = new Insert(query, this.util).\n                    execute(this.db);\n                break;\n            case API.Select:\n                queryResult = new Select(query, this.util).\n                    execute(this.db);\n                break;\n            case API.Count:\n                queryResult = new Count(query, this.util).execute(this.db);\n                break;\n            case API.Update:\n                queryResult = new Update(query, this.util).execute(this.db);\n                break;\n            case API.Intersect:\n                queryResult = new Intersect(query, this.util).execute(this.db);\n                break;\n            case API.DropDb:\n                queryResult = this.dropDb();\n                break;\n            case API.Terminate:\n                queryResult = this.terminate();\n                break;\n            case API.Union:\n                queryResult = new Union(query, this.util).execute(this.db);\n                break;\n            case API.Remove:\n                queryResult = new Remove(query, this.util).execute(this.db);\n                break;\n            case API.Clear:\n                queryResult = new Clear(query, this.util).execute(this.db);\n                break;\n            case API.Transaction:\n                queryResult = new Transaction(query, this.util).execute(this.db);\n                break;\n            case API.Get:\n                queryResult = MetaHelper.get(query as string, this.util);\n                break;\n            case API.Set:\n                queryResult = MetaHelper.set(query.key, query.value, this.util);\n                break;\n            case API.ImportScripts:\n                queryResult = this.importScripts_(request);\n                break;\n            case API.ChangeLogStatus:\n                this.logger.status = query;\n                queryResult = Promise.resolve();\n                break;\n            default:\n                if (process.env.NODE_ENV === 'dev') {\n                    console.error('The Api:-' + request.name + ' does not support.');\n                }\n                queryResult = Promise.resolve();\n        }\n        this.logger.log(`Executing query ${request.name} in web worker`);\n        queryResult.then((result) => {\n            this.returnResult_({\n                result: result\n            });\n        }).catch(ex => {\n            const err = getError(ex);\n            const result = {\n                error: err\n            } as WebWorkerResult;\n            this.returnResult_(result);\n        });\n    }\n\n    private importScripts_(request: WebWorkerRequest) {\n        return promise<void>((res, rej) => {\n            try {\n                importScripts(...request.query);\n                res();\n            } catch (e) {\n                const err = new LogHelper(ERROR_TYPE.ImportScriptsFailed, e.message);\n                rej(err);\n            }\n        });\n    }\n\n    private returnResult_(result: WebWorkerResult) {\n        this.logger.log(`Query finished inside web worker`);\n        if (this.util) {\n            this.util.emptyTx();\n        }\n        this.onQryFinished(result);\n    }\n\n    private dropDb() {\n        const dbName = this.db.name;\n        return this.terminate().then(() => {\n            return new DropDb().execute(dbName);\n        });\n    }\n\n    closeDb() {\n        return this.util.close();\n    }\n\n    terminate() {\n        return this.closeDb().then(() => {\n            this.db = null;\n        });\n    }\n\n    openDb(query: IDbInfo) {\n        let pResult: Promise<boolean>;\n        if (this.db && query.name === this.db.name) {\n            pResult = this.initDb();\n        }\n        else {\n            pResult = this.initDb({\n                name: query.name,\n                tables: [\n                ],\n                version: query.version\n            });\n        }\n        return pResult.then(() => {\n            return this.db;\n        });\n    }\n\n    initDb(dataBase?: IDataBase) {\n        if (!IS_IDB_SUPPORTED) {\n            return promiseReject(\n                new LogHelper(ERROR_TYPE.IndexedDbNotSupported)\n            );\n        }\n\n        const dbMeta = dataBase ? new DbMeta(dataBase) : this.db;\n        this.util = new IDBUtil(dbMeta);\n        const upgradeDbSchema = (result) => {\n            return promise((res, rej) => {\n                MetaHelper.get(MetaHelper.dbSchema, this.util).then((savedDb: DbMeta) => {\n                    let shouldReCreateDb = false;\n                    let dbVersion;\n                    if (savedDb) {\n                        dbVersion = savedDb.version;\n\n                        savedDb.tables.forEach((savedTable, index) => {\n                            const providedTable = dbMeta.tables[index];\n\n                            if (providedTable) {\n                                if (savedTable.version < providedTable.version) {\n                                    providedTable.state = TABLE_STATE.Delete;\n                                    shouldReCreateDb = true;\n                                    if (dbVersion < providedTable.version) {\n                                        dbVersion = providedTable.version;\n                                    }\n                                }\n                                else {\n                                    providedTable.state = null;\n                                }\n                            }\n                        });\n                    }\n\n                    if (shouldReCreateDb) {\n                        dbMeta.version = dbVersion;\n                        this.terminate().then(_ => {\n                            this.util = new IDBUtil(dbMeta);\n                            this.util.initDb().then((isCreated) => {\n                                res(isCreated);\n                            }).catch(rej);\n                        });\n\n                        return;\n                    }\n                    else if (!result) {\n                        this.db = savedDb;\n                    }\n                    res(result);\n                });\n            });\n        };\n        return promise<boolean>((res, rej) => {\n            this.util.initDb().then((isCreated) => {\n                if (isCreated) {\n                    return isCreated;\n                }\n                return upgradeDbSchema(isCreated);\n            }).then(result => {\n                if (result) {\n                    MetaHelper.set(\n                        MetaHelper.dbSchema, dbMeta,\n                        this.util\n                    ).then(() => {\n                        this.db = dbMeta;\n                        res(true);\n                    });\n                }\n                else {\n\n                    res(false);\n                }\n            }).catch(rej);\n        });\n    }\n\n\n\n\n}\n","import { QueryManager } from \"@/worker/query_manager\";\nimport { IS_WORKER } from \"./constants\";\nexport * from \"./query_manager\";\n\nif (IS_WORKER) {\n    const manager = new QueryManager();\n    (self as any).onmessage = function (e) {\n        manager.run(e.data);\n    };\n}\n\n"],"sourceRoot":""}